
f103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  0800f03c  0800f03c  0001f03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8dc  0800f8dc  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f8dc  0800f8dc  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f8dc  0800f8dc  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8dc  0800f8dc  0001f8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8e0  0800f8e0  0001f8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800f8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  200000d8  0800f9bc  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  0800f9bc  00020a64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f097  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a48  00000000  00000000  0003f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00042be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  000441d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b081  00000000  00000000  00045950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001875c  00000000  00000000  000609d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa46  00000000  00000000  0007912d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108b73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000688c  00000000  00000000  00108bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800f024 	.word	0x0800f024

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	0800f024 	.word	0x0800f024

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <__popcountsi2>:
 8000664:	0843      	lsrs	r3, r0, #1
 8000666:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800066a:	1ac0      	subs	r0, r0, r3
 800066c:	0883      	lsrs	r3, r0, #2
 800066e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000672:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000676:	4418      	add	r0, r3
 8000678:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 800067c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000680:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000684:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000688:	0e00      	lsrs	r0, r0, #24
 800068a:	4770      	bx	lr

0800068c <SET_COUNT>:
extern uint8_t read_X2[4], read_X1[4], read_X0[4];
extern uint8_t read_Y2[4], read_Y1[4], read_Y0[4];
extern uint8_t read_Z2[4], read_Z1[4], read_Z0[4];


void SET_COUNT(int chip_select) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000694:	4a2c      	ldr	r2, [pc, #176]	; (8000748 <SET_COUNT+0xbc>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800069c:	4a2b      	ldr	r2, [pc, #172]	; (800074c <SET_COUNT+0xc0>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f008 fc88 	bl	8008fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80006ac:	4a26      	ldr	r2, [pc, #152]	; (8000748 <SET_COUNT+0xbc>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006b4:	4a25      	ldr	r2, [pc, #148]	; (800074c <SET_COUNT+0xc0>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	f008 fc7c 	bl	8008fbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, rm3100_MSB_X_buf, sizeof(rm3100_MSB_X_buf), 1000); //Not need to necessary to send multiple value or register
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	2201      	movs	r2, #1
 80006ca:	4921      	ldr	r1, [pc, #132]	; (8000750 <SET_COUNT+0xc4>)
 80006cc:	4821      	ldr	r0, [pc, #132]	; (8000754 <SET_COUNT+0xc8>)
 80006ce:	f00a ff4f 	bl	800b570 <HAL_SPI_Transmit>
	//Initiate Count cycle
	HAL_SPI_Transmit(&hspi1, MSB_X_buf, sizeof(MSB_X_buf), 1000);
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	2201      	movs	r2, #1
 80006d8:	491f      	ldr	r1, [pc, #124]	; (8000758 <SET_COUNT+0xcc>)
 80006da:	481e      	ldr	r0, [pc, #120]	; (8000754 <SET_COUNT+0xc8>)
 80006dc:	f00a ff48 	bl	800b570 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_X_buf, sizeof(LSB_X_buf), 1000);
 80006e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e4:	2201      	movs	r2, #1
 80006e6:	491d      	ldr	r1, [pc, #116]	; (800075c <SET_COUNT+0xd0>)
 80006e8:	481a      	ldr	r0, [pc, #104]	; (8000754 <SET_COUNT+0xc8>)
 80006ea:	f00a ff41 	bl	800b570 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Y_buf, sizeof(MSB_Y_buf), 1000);
 80006ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f2:	2201      	movs	r2, #1
 80006f4:	491a      	ldr	r1, [pc, #104]	; (8000760 <SET_COUNT+0xd4>)
 80006f6:	4817      	ldr	r0, [pc, #92]	; (8000754 <SET_COUNT+0xc8>)
 80006f8:	f00a ff3a 	bl	800b570 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Y_buf, sizeof(LSB_Y_buf), 1000);
 80006fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000700:	2201      	movs	r2, #1
 8000702:	4918      	ldr	r1, [pc, #96]	; (8000764 <SET_COUNT+0xd8>)
 8000704:	4813      	ldr	r0, [pc, #76]	; (8000754 <SET_COUNT+0xc8>)
 8000706:	f00a ff33 	bl	800b570 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Z_buf, sizeof(MSB_Z_buf), 1000);
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	2201      	movs	r2, #1
 8000710:	4915      	ldr	r1, [pc, #84]	; (8000768 <SET_COUNT+0xdc>)
 8000712:	4810      	ldr	r0, [pc, #64]	; (8000754 <SET_COUNT+0xc8>)
 8000714:	f00a ff2c 	bl	800b570 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Z_buf, sizeof(LSB_Z_buf), 1000);
 8000718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071c:	2201      	movs	r2, #1
 800071e:	4913      	ldr	r1, [pc, #76]	; (800076c <SET_COUNT+0xe0>)
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <SET_COUNT+0xc8>)
 8000722:	f00a ff25 	bl	800b570 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH);
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <SET_COUNT+0xbc>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800072e:	4a07      	ldr	r2, [pc, #28]	; (800074c <SET_COUNT+0xc0>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000736:	2201      	movs	r2, #1
 8000738:	4619      	mov	r1, r3
 800073a:	f008 fc3f 	bl	8008fbc <HAL_GPIO_WritePin>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000028 	.word	0x20000028
 800074c:	20000038 	.word	0x20000038
 8000750:	20000004 	.word	0x20000004
 8000754:	200006d8 	.word	0x200006d8
 8000758:	200000fc 	.word	0x200000fc
 800075c:	20000008 	.word	0x20000008
 8000760:	20000100 	.word	0x20000100
 8000764:	2000000c 	.word	0x2000000c
 8000768:	20000104 	.word	0x20000104
 800076c:	20000010 	.word	0x20000010

08000770 <Continuous_Mode>:
//Initiate Continuous Measurements Mode

void Continuous_Mode(int chip_select) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000778:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <Continuous_Mode+0x74>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <Continuous_Mode+0x78>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	f008 fc16 	bl	8008fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <Continuous_Mode+0x74>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <Continuous_Mode+0x78>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a0:	2200      	movs	r2, #0
 80007a2:	4619      	mov	r1, r3
 80007a4:	f008 fc0a 	bl	8008fbc <HAL_GPIO_WritePin>
	//Initiate Continuous Measurements Mode
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_buf, sizeof(rm3100_cmm_buf), 1000);
 80007a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ac:	2201      	movs	r2, #1
 80007ae:	490f      	ldr	r1, [pc, #60]	; (80007ec <Continuous_Mode+0x7c>)
 80007b0:	480f      	ldr	r0, [pc, #60]	; (80007f0 <Continuous_Mode+0x80>)
 80007b2:	f00a fedd 	bl	800b570 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_mod_buf, sizeof(rm3100_cmm_mod_buf), 1000);
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	2201      	movs	r2, #1
 80007bc:	490d      	ldr	r1, [pc, #52]	; (80007f4 <Continuous_Mode+0x84>)
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <Continuous_Mode+0x80>)
 80007c0:	f00a fed6 	bl	800b570 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80007c4:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <Continuous_Mode+0x74>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <Continuous_Mode+0x78>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	f008 fbf0 	bl	8008fbc <HAL_GPIO_WritePin>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000028 	.word	0x20000028
 80007e8:	20000038 	.word	0x20000038
 80007ec:	20000014 	.word	0x20000014
 80007f0:	200006d8 	.word	0x200006d8
 80007f4:	20000018 	.word	0x20000018

080007f8 <TMRC_Mode>:
//Initiate Time Measurements and Rate Control

void TMRC_Mode(int chip_select) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000800:	4a1a      	ldr	r2, [pc, #104]	; (800086c <TMRC_Mode+0x74>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <TMRC_Mode+0x78>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000810:	2201      	movs	r2, #1
 8000812:	4619      	mov	r1, r3
 8000814:	f008 fbd2 	bl	8008fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <TMRC_Mode+0x74>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <TMRC_Mode+0x78>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	f008 fbc6 	bl	8008fbc <HAL_GPIO_WritePin>
	//initiate Time Measurements and Reset Control
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_add_buf, sizeof(rm3100_tmrc_add_buf), 1000);
 8000830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000834:	2201      	movs	r2, #1
 8000836:	490f      	ldr	r1, [pc, #60]	; (8000874 <TMRC_Mode+0x7c>)
 8000838:	480f      	ldr	r0, [pc, #60]	; (8000878 <TMRC_Mode+0x80>)
 800083a:	f00a fe99 	bl	800b570 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_Val_buf, sizeof(rm3100_tmrc_Val_buf), 1000);
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	2201      	movs	r2, #1
 8000844:	490d      	ldr	r1, [pc, #52]	; (800087c <TMRC_Mode+0x84>)
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <TMRC_Mode+0x80>)
 8000848:	f00a fe92 	bl	800b570 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_read_buf, sizeof(rm3100_tmrc_read_buf),
//			1000);
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <TMRC_Mode+0x74>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <TMRC_Mode+0x78>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085c:	2201      	movs	r2, #1
 800085e:	4619      	mov	r1, r3
 8000860:	f008 fbac 	bl	8008fbc <HAL_GPIO_WritePin>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000028 	.word	0x20000028
 8000870:	20000038 	.word	0x20000038
 8000874:	2000001c 	.word	0x2000001c
 8000878:	200006d8 	.word	0x200006d8
 800087c:	20000020 	.word	0x20000020

08000880 <Mea_Result>:

//Read Measurements Results
void Mea_Result(int chip_select) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000888:	4a3f      	ldr	r2, [pc, #252]	; (8000988 <Mea_Result+0x108>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000890:	4a3e      	ldr	r2, [pc, #248]	; (800098c <Mea_Result+0x10c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000898:	2201      	movs	r2, #1
 800089a:	4619      	mov	r1, r3
 800089c:	f008 fb8e 	bl	8008fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80008a0:	4a39      	ldr	r2, [pc, #228]	; (8000988 <Mea_Result+0x108>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008a8:	4a38      	ldr	r2, [pc, #224]	; (800098c <Mea_Result+0x10c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b0:	2200      	movs	r2, #0
 80008b2:	4619      	mov	r1, r3
 80008b4:	f008 fb82 	bl	8008fbc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, MRRW2_X_buf, sizeof(MRRW2_X_buf), 1000);
 80008b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008bc:	2201      	movs	r2, #1
 80008be:	4934      	ldr	r1, [pc, #208]	; (8000990 <Mea_Result+0x110>)
 80008c0:	4834      	ldr	r0, [pc, #208]	; (8000994 <Mea_Result+0x114>)
 80008c2:	f00a fe55 	bl	800b570 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &read_X2[chip_select], sizeof(read_X2[chip_select]), 1000);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a33      	ldr	r2, [pc, #204]	; (8000998 <Mea_Result+0x118>)
 80008ca:	1899      	adds	r1, r3, r2
 80008cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d0:	2201      	movs	r2, #1
 80008d2:	4830      	ldr	r0, [pc, #192]	; (8000994 <Mea_Result+0x114>)
 80008d4:	f00a ff90 	bl	800b7f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X1[chip_select], sizeof(read_X1[chip_select]), 1000);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a30      	ldr	r2, [pc, #192]	; (800099c <Mea_Result+0x11c>)
 80008dc:	1899      	adds	r1, r3, r2
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	2201      	movs	r2, #1
 80008e4:	482b      	ldr	r0, [pc, #172]	; (8000994 <Mea_Result+0x114>)
 80008e6:	f00a ff87 	bl	800b7f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X0[chip_select], sizeof(read_X0[chip_select]), 1000);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a2c      	ldr	r2, [pc, #176]	; (80009a0 <Mea_Result+0x120>)
 80008ee:	1899      	adds	r1, r3, r2
 80008f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f4:	2201      	movs	r2, #1
 80008f6:	4827      	ldr	r0, [pc, #156]	; (8000994 <Mea_Result+0x114>)
 80008f8:	f00a ff7e 	bl	800b7f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y2[chip_select], sizeof(read_Y2[chip_select]), 1000);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a29      	ldr	r2, [pc, #164]	; (80009a4 <Mea_Result+0x124>)
 8000900:	1899      	adds	r1, r3, r2
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	2201      	movs	r2, #1
 8000908:	4822      	ldr	r0, [pc, #136]	; (8000994 <Mea_Result+0x114>)
 800090a:	f00a ff75 	bl	800b7f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y1[chip_select], sizeof(read_Y1[chip_select]), 1000);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <Mea_Result+0x128>)
 8000912:	1899      	adds	r1, r3, r2
 8000914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000918:	2201      	movs	r2, #1
 800091a:	481e      	ldr	r0, [pc, #120]	; (8000994 <Mea_Result+0x114>)
 800091c:	f00a ff6c 	bl	800b7f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y0[chip_select], sizeof(read_Y0[chip_select]), 1000);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <Mea_Result+0x12c>)
 8000924:	1899      	adds	r1, r3, r2
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	2201      	movs	r2, #1
 800092c:	4819      	ldr	r0, [pc, #100]	; (8000994 <Mea_Result+0x114>)
 800092e:	f00a ff63 	bl	800b7f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z2[chip_select], sizeof(read_Z2[chip_select]), 1000);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <Mea_Result+0x130>)
 8000936:	1899      	adds	r1, r3, r2
 8000938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093c:	2201      	movs	r2, #1
 800093e:	4815      	ldr	r0, [pc, #84]	; (8000994 <Mea_Result+0x114>)
 8000940:	f00a ff5a 	bl	800b7f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z1[chip_select], sizeof(read_Z1[chip_select]), 1000);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <Mea_Result+0x134>)
 8000948:	1899      	adds	r1, r3, r2
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	2201      	movs	r2, #1
 8000950:	4810      	ldr	r0, [pc, #64]	; (8000994 <Mea_Result+0x114>)
 8000952:	f00a ff51 	bl	800b7f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z0[chip_select], sizeof(read_Z0[chip_select]), 1000);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <Mea_Result+0x138>)
 800095a:	1899      	adds	r1, r3, r2
 800095c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000960:	2201      	movs	r2, #1
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <Mea_Result+0x114>)
 8000964:	f00a ff48 	bl	800b7f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <Mea_Result+0x108>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <Mea_Result+0x10c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	f008 fb1e 	bl	8008fbc <HAL_GPIO_WritePin>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000028 	.word	0x20000028
 800098c:	20000038 	.word	0x20000038
 8000990:	20000024 	.word	0x20000024
 8000994:	200006d8 	.word	0x200006d8
 8000998:	20000308 	.word	0x20000308
 800099c:	200002c4 	.word	0x200002c4
 80009a0:	2000031c 	.word	0x2000031c
 80009a4:	20000340 	.word	0x20000340
 80009a8:	2000025c 	.word	0x2000025c
 80009ac:	20000334 	.word	0x20000334
 80009b0:	200002c8 	.word	0x200002c8
 80009b4:	20000280 	.word	0x20000280
 80009b8:	20000330 	.word	0x20000330

080009bc <Comb_measurement>:
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
//}


//Combine Measurements
void Comb_measurement(int chip_select) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
//    // Get current time from RTC
//    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);

    // Combine bytes for X-axis
    mag_X[chip_select] = (read_X2[chip_select] << 16) | (read_X1[chip_select] << 8) | read_X0[chip_select];
 80009c4:	4aa9      	ldr	r2, [pc, #676]	; (8000c6c <Comb_measurement+0x2b0>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	041a      	lsls	r2, r3, #16
 80009ce:	49a8      	ldr	r1, [pc, #672]	; (8000c70 <Comb_measurement+0x2b4>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	440b      	add	r3, r1
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	4313      	orrs	r3, r2
 80009da:	49a6      	ldr	r1, [pc, #664]	; (8000c74 <Comb_measurement+0x2b8>)
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	440a      	add	r2, r1
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	4aa4      	ldr	r2, [pc, #656]	; (8000c78 <Comb_measurement+0x2bc>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_X[chip_select] = (mag_X[chip_select] & 0x800000) ? (mag_X[chip_select] | 0xFF000000) : mag_X[chip_select];
 80009ee:	4aa2      	ldr	r2, [pc, #648]	; (8000c78 <Comb_measurement+0x2bc>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d007      	beq.n	8000a0e <Comb_measurement+0x52>
 80009fe:	4a9e      	ldr	r2, [pc, #632]	; (8000c78 <Comb_measurement+0x2bc>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	e004      	b.n	8000a18 <Comb_measurement+0x5c>
 8000a0e:	4a9a      	ldr	r2, [pc, #616]	; (8000c78 <Comb_measurement+0x2bc>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	4619      	mov	r1, r3
 8000a18:	4a98      	ldr	r2, [pc, #608]	; (8000c7c <Comb_measurement+0x2c0>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Y-axis
    mag_Y[chip_select] = (read_Y2[chip_select] << 16) | (read_Y1[chip_select] << 8) | read_Y0[chip_select];
 8000a20:	4a97      	ldr	r2, [pc, #604]	; (8000c80 <Comb_measurement+0x2c4>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	041a      	lsls	r2, r3, #16
 8000a2a:	4996      	ldr	r1, [pc, #600]	; (8000c84 <Comb_measurement+0x2c8>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	440b      	add	r3, r1
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	4313      	orrs	r3, r2
 8000a36:	4994      	ldr	r1, [pc, #592]	; (8000c88 <Comb_measurement+0x2cc>)
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	440a      	add	r2, r1
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	4a92      	ldr	r2, [pc, #584]	; (8000c8c <Comb_measurement+0x2d0>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Y[chip_select] = (mag_Y[chip_select] & 0x800000) ? (mag_Y[chip_select] | 0xFF000000) : mag_Y[chip_select];
 8000a4a:	4a90      	ldr	r2, [pc, #576]	; (8000c8c <Comb_measurement+0x2d0>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d007      	beq.n	8000a6a <Comb_measurement+0xae>
 8000a5a:	4a8c      	ldr	r2, [pc, #560]	; (8000c8c <Comb_measurement+0x2d0>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a66:	4619      	mov	r1, r3
 8000a68:	e004      	b.n	8000a74 <Comb_measurement+0xb8>
 8000a6a:	4a88      	ldr	r2, [pc, #544]	; (8000c8c <Comb_measurement+0x2d0>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4a86      	ldr	r2, [pc, #536]	; (8000c90 <Comb_measurement+0x2d4>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Z-axis
    mag_Z[chip_select] = (read_Z2[chip_select] << 16) | (read_Z1[chip_select] << 8) | read_Z0[chip_select];
 8000a7c:	4a85      	ldr	r2, [pc, #532]	; (8000c94 <Comb_measurement+0x2d8>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	041a      	lsls	r2, r3, #16
 8000a86:	4984      	ldr	r1, [pc, #528]	; (8000c98 <Comb_measurement+0x2dc>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	440b      	add	r3, r1
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	4313      	orrs	r3, r2
 8000a92:	4982      	ldr	r1, [pc, #520]	; (8000c9c <Comb_measurement+0x2e0>)
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	440a      	add	r2, r1
 8000a98:	7812      	ldrb	r2, [r2, #0]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4a80      	ldr	r2, [pc, #512]	; (8000ca0 <Comb_measurement+0x2e4>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Z[chip_select] = (mag_Z[chip_select] & 0x800000) ? (mag_Z[chip_select] | 0xFF000000) : mag_Z[chip_select];
 8000aa6:	4a7e      	ldr	r2, [pc, #504]	; (8000ca0 <Comb_measurement+0x2e4>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <Comb_measurement+0x10a>
 8000ab6:	4a7a      	ldr	r2, [pc, #488]	; (8000ca0 <Comb_measurement+0x2e4>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	e004      	b.n	8000ad0 <Comb_measurement+0x114>
 8000ac6:	4a76      	ldr	r2, [pc, #472]	; (8000ca0 <Comb_measurement+0x2e4>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4a74      	ldr	r2, [pc, #464]	; (8000ca4 <Comb_measurement+0x2e8>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Calculate magnitude
   // magnitude[chip_select] = sqrt((float)(signed_mag_X[chip_select] * signed_mag_X[chip_select]) + (signed_mag_Y[chip_select] * signed_mag_Y[chip_select]) + (signed_mag_Z[chip_select] * signed_mag_Z[chip_select]));

    // Calculate axis values in float
    X_axis[chip_select] = (float)signed_mag_X[chip_select] / gain;
 8000ad8:	4a68      	ldr	r2, [pc, #416]	; (8000c7c <Comb_measurement+0x2c0>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fbf5 	bl	80002d0 <__aeabi_i2f>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	4b6f      	ldr	r3, [pc, #444]	; (8000ca8 <Comb_measurement+0x2ec>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	4610      	mov	r0, r2
 8000af0:	f7ff fcf6 	bl	80004e0 <__aeabi_fdiv>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4619      	mov	r1, r3
 8000af8:	4a6c      	ldr	r2, [pc, #432]	; (8000cac <Comb_measurement+0x2f0>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Y_axis[chip_select] = (float)signed_mag_Y[chip_select] / gain;
 8000b00:	4a63      	ldr	r2, [pc, #396]	; (8000c90 <Comb_measurement+0x2d4>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fbe1 	bl	80002d0 <__aeabi_i2f>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	4b65      	ldr	r3, [pc, #404]	; (8000ca8 <Comb_measurement+0x2ec>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4610      	mov	r0, r2
 8000b18:	f7ff fce2 	bl	80004e0 <__aeabi_fdiv>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4a63      	ldr	r2, [pc, #396]	; (8000cb0 <Comb_measurement+0x2f4>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Z_axis[chip_select] = (float)signed_mag_Z[chip_select] / gain;
 8000b28:	4a5e      	ldr	r2, [pc, #376]	; (8000ca4 <Comb_measurement+0x2e8>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fbcd 	bl	80002d0 <__aeabi_i2f>
 8000b36:	4602      	mov	r2, r0
 8000b38:	4b5b      	ldr	r3, [pc, #364]	; (8000ca8 <Comb_measurement+0x2ec>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4610      	mov	r0, r2
 8000b40:	f7ff fcce 	bl	80004e0 <__aeabi_fdiv>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4619      	mov	r1, r3
 8000b48:	4a5a      	ldr	r2, [pc, #360]	; (8000cb4 <Comb_measurement+0x2f8>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    x_axis[chip_select] = (int16_t)(X_axis[chip_select] * 100.0f);
 8000b50:	4a56      	ldr	r2, [pc, #344]	; (8000cac <Comb_measurement+0x2f0>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	4957      	ldr	r1, [pc, #348]	; (8000cb8 <Comb_measurement+0x2fc>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fc0c 	bl	8000378 <__aeabi_fmul>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fd58 	bl	8000618 <__aeabi_f2iz>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b219      	sxth	r1, r3
 8000b6c:	4a53      	ldr	r2, [pc, #332]	; (8000cbc <Comb_measurement+0x300>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    y_axis[chip_select] = (int16_t)(Y_axis[chip_select] * 100.0f);
 8000b74:	4a4e      	ldr	r2, [pc, #312]	; (8000cb0 <Comb_measurement+0x2f4>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	494e      	ldr	r1, [pc, #312]	; (8000cb8 <Comb_measurement+0x2fc>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fbfa 	bl	8000378 <__aeabi_fmul>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fd46 	bl	8000618 <__aeabi_f2iz>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	b219      	sxth	r1, r3
 8000b90:	4a4b      	ldr	r2, [pc, #300]	; (8000cc0 <Comb_measurement+0x304>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    z_axis[chip_select] = (int16_t)(Z_axis[chip_select] * 100.0f);
 8000b98:	4a46      	ldr	r2, [pc, #280]	; (8000cb4 <Comb_measurement+0x2f8>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba0:	4945      	ldr	r1, [pc, #276]	; (8000cb8 <Comb_measurement+0x2fc>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fbe8 	bl	8000378 <__aeabi_fmul>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd34 	bl	8000618 <__aeabi_f2iz>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b219      	sxth	r1, r3
 8000bb4:	4a43      	ldr	r2, [pc, #268]	; (8000cc4 <Comb_measurement+0x308>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

       // Log integer values for debugging
       myDebug("Integer values (scaled): X: %d Y: %d Z: %d\n",   x_axis[chip_select], y_axis[chip_select], z_axis[chip_select]);
 8000bbc:	4a3f      	ldr	r2, [pc, #252]	; (8000cbc <Comb_measurement+0x300>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4a3e      	ldr	r2, [pc, #248]	; (8000cc0 <Comb_measurement+0x304>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	4a3c      	ldr	r2, [pc, #240]	; (8000cc4 <Comb_measurement+0x308>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bd8:	4602      	mov	r2, r0
 8000bda:	483b      	ldr	r0, [pc, #236]	; (8000cc8 <Comb_measurement+0x30c>)
 8000bdc:	f000 f8ca 	bl	8000d74 <myDebug>
       myDebug("Hex values: X: 0x%04X Y: 0x%04X Z: 0x%04X\n", (uint16_t)x_axis[chip_select], (uint16_t)y_axis[chip_select], (uint16_t)z_axis[chip_select]);
 8000be0:	4a36      	ldr	r2, [pc, #216]	; (8000cbc <Comb_measurement+0x300>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	4619      	mov	r1, r3
 8000bec:	4a34      	ldr	r2, [pc, #208]	; (8000cc0 <Comb_measurement+0x304>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <Comb_measurement+0x308>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4602      	mov	r2, r0
 8000c04:	4831      	ldr	r0, [pc, #196]	; (8000ccc <Comb_measurement+0x310>)
 8000c06:	f000 f8b5 	bl	8000d74 <myDebug>


       uint8_t mag_data[6] = {0};
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	81bb      	strh	r3, [r7, #12]
        mag_data[0] = (x_axis[chip_select] >> 8) & 0xFF; // High byte of x
 8000c12:	4a2a      	ldr	r2, [pc, #168]	; (8000cbc <Comb_measurement+0x300>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c1a:	121b      	asrs	r3, r3, #8
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	723b      	strb	r3, [r7, #8]
        mag_data[1] = x_axis[chip_select] & 0xFF;        // Low byte of x
 8000c22:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <Comb_measurement+0x300>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	727b      	strb	r3, [r7, #9]
        mag_data[2] = (y_axis[chip_select] >> 8) & 0xFF; // High byte of y
 8000c2e:	4a24      	ldr	r2, [pc, #144]	; (8000cc0 <Comb_measurement+0x304>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c36:	121b      	asrs	r3, r3, #8
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	72bb      	strb	r3, [r7, #10]
        mag_data[3] = y_axis[chip_select] & 0xFF;        // Low byte of y
 8000c3e:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <Comb_measurement+0x304>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	72fb      	strb	r3, [r7, #11]
        mag_data[4] = (z_axis[chip_select] >> 8) & 0xFF; // High byte of z
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <Comb_measurement+0x308>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c52:	121b      	asrs	r3, r3, #8
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	733b      	strb	r3, [r7, #12]
        mag_data[5] = z_axis[chip_select] & 0xFF;
 8000c5a:	4a1a      	ldr	r2, [pc, #104]	; (8000cc4 <Comb_measurement+0x308>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	737b      	strb	r3, [r7, #13]
        for(uint8_t i =0;i<6;i++){
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e047      	b.n	8000cfc <Comb_measurement+0x340>
 8000c6c:	20000308 	.word	0x20000308
 8000c70:	200002c4 	.word	0x200002c4
 8000c74:	2000031c 	.word	0x2000031c
 8000c78:	2000030c 	.word	0x2000030c
 8000c7c:	2000023c 	.word	0x2000023c
 8000c80:	20000340 	.word	0x20000340
 8000c84:	2000025c 	.word	0x2000025c
 8000c88:	20000334 	.word	0x20000334
 8000c8c:	200001c8 	.word	0x200001c8
 8000c90:	20000320 	.word	0x20000320
 8000c94:	200002c8 	.word	0x200002c8
 8000c98:	20000280 	.word	0x20000280
 8000c9c:	20000330 	.word	0x20000330
 8000ca0:	20000260 	.word	0x20000260
 8000ca4:	200002b4 	.word	0x200002b4
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	200002a4 	.word	0x200002a4
 8000cb0:	20000284 	.word	0x20000284
 8000cb4:	2000024c 	.word	0x2000024c
 8000cb8:	42c80000 	.word	0x42c80000
 8000cbc:	20000300 	.word	0x20000300
 8000cc0:	20000338 	.word	0x20000338
 8000cc4:	200001c0 	.word	0x200001c0
 8000cc8:	0800f03c 	.word	0x0800f03c
 8000ccc:	0800f068 	.word	0x0800f068
        	data1[counter++] = mag_data[i];
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <Comb_measurement+0x398>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	1c59      	adds	r1, r3, #1
 8000cd8:	481e      	ldr	r0, [pc, #120]	; (8000d54 <Comb_measurement+0x398>)
 8000cda:	6001      	str	r1, [r0, #0]
 8000cdc:	f107 0110 	add.w	r1, r7, #16
 8000ce0:	440a      	add	r2, r1
 8000ce2:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <Comb_measurement+0x39c>)
 8000ce8:	54d1      	strb	r1, [r2, r3]
        	data_counter++;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <Comb_measurement+0x3a0>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <Comb_measurement+0x3a0>)
 8000cf4:	801a      	strh	r2, [r3, #0]
        for(uint8_t i =0;i<6;i++){
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d9e6      	bls.n	8000cd0 <Comb_measurement+0x314>
        }


    if(counter + 12 > DATA_SIZE){
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <Comb_measurement+0x398>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	330c      	adds	r3, #12
 8000d08:	2b64      	cmp	r3, #100	; 0x64
 8000d0a:	d91f      	bls.n	8000d4c <Comb_measurement+0x390>
    	write_to_file("/epdm.txt", data1, counter);
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <Comb_measurement+0x398>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4911      	ldr	r1, [pc, #68]	; (8000d58 <Comb_measurement+0x39c>)
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <Comb_measurement+0x3a4>)
 8000d16:	f006 fa51 	bl	80071bc <write_to_file>
//    	HAL_UART_Transmit(&huart2, data1, counter, 1000);
//    	HAL_UART_Transmit(&huart1, data1, counter, 1000);

        HAL_UART_Transmit(&huart2, data1,counter, 1000);
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <Comb_measurement+0x398>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <Comb_measurement+0x39c>)
 8000d26:	480f      	ldr	r0, [pc, #60]	; (8000d64 <Comb_measurement+0x3a8>)
 8000d28:	f00b fa87 	bl	800c23a <HAL_UART_Transmit>

//        HAL_UART_Transmit(&huart1, data_counter,sizeof(data_counter), 1000);
	      myDebug("%d\n",data_counter);
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <Comb_measurement+0x3a0>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <Comb_measurement+0x3ac>)
 8000d34:	f000 f81e 	bl	8000d74 <myDebug>

    	HAL_UART_Transmit(&huart1, "Data written to flash\n", sizeof("Data written to flash\n"), 1000);
 8000d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3c:	2217      	movs	r2, #23
 8000d3e:	490b      	ldr	r1, [pc, #44]	; (8000d6c <Comb_measurement+0x3b0>)
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <Comb_measurement+0x3b4>)
 8000d42:	f00b fa7a 	bl	800c23a <HAL_UART_Transmit>
    	counter = 0;
 8000d46:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <Comb_measurement+0x398>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]

    }


}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200000f8 	.word	0x200000f8
 8000d58:	200001d8 	.word	0x200001d8
 8000d5c:	200000f4 	.word	0x200000f4
 8000d60:	0800f094 	.word	0x0800f094
 8000d64:	20000730 	.word	0x20000730
 8000d68:	0800f0a0 	.word	0x0800f0a0
 8000d6c:	0800f0a4 	.word	0x0800f0a4
 8000d70:	20000550 	.word	0x20000550

08000d74 <myDebug>:

void myDebug(const char *fmt, ...) {
 8000d74:	b40f      	push	{r0, r1, r2, r3}
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b09a      	sub	sp, #104	; 0x68
 8000d7a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8000d7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d80:	667b      	str	r3, [r7, #100]	; 0x64
    char buffer[100];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000d82:	4638      	mov	r0, r7
 8000d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000d88:	2164      	movs	r1, #100	; 0x64
 8000d8a:	f00d fba9 	bl	800e4e0 <vsniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff f9db 	bl	800014c <strlen>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4639      	mov	r1, r7
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <myDebug+0x40>)
 8000da2:	f00b fa4a 	bl	800c23a <HAL_UART_Transmit>
    va_end(args);
}
 8000da6:	bf00      	nop
 8000da8:	3768      	adds	r7, #104	; 0x68
 8000daa:	46bd      	mov	sp, r7
 8000dac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000db0:	b004      	add	sp, #16
 8000db2:	4770      	bx	lr
 8000db4:	20000550 	.word	0x20000550

08000db8 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	bf38      	it	cc
 8000dca:	4613      	movcc	r3, r2
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4293      	cmp	r3, r2
 8000de6:	bf28      	it	cs
 8000de8:	4613      	movcs	r3, r2
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	fb01 f202 	mul.w	r2, r1, r2
 8000e0c:	1a9b      	subs	r3, r3, r2
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	1ad3      	subs	r3, r2, r3
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ffdf 	bl	8000df4 <lfs_aligndown>
 8000e36:	4603      	mov	r3, r0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	fab3 f383 	clz	r3, r3
 8000e50:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	fa93 f3a3 	rbit	r3, r3
 8000e6c:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr

08000e7a <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fbee 	bl	8000664 <__popcountsi2>
 8000e88:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	1ad3      	subs	r3, r2, r3
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8000eb4:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ffef 	bl	8000eac <lfs_fromle32>
 8000ece:	4603      	mov	r3, r0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffee 	bl	8000ed8 <lfs_frombe32>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f00c feb4 	bl	800dc7c <malloc>
 8000f14:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f00c feb0 	bl	800dc8c <free>
#else
    (void)p;
#endif
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68d8      	ldr	r0, [r3, #12]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	461a      	mov	r2, r3
 8000f66:	21ff      	movs	r1, #255	; 0xff
 8000f68:	f00c feb4 	bl	800dcd4 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f8c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d208      	bcs.n	8000fac <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8000f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f9e:	441a      	add	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fa4:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	f240 811b 	bls.w	80011e2 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8000fac:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000fb0:	e11c      	b.n	80011ec <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb4:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d03f      	beq.n	800103c <lfs_bd_read+0xc0>
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d13a      	bne.n	800103c <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d232      	bcs.n	800103c <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d324      	bcc.n	800102a <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	6859      	ldr	r1, [r3, #4]
 8000fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fea:	1acb      	subs	r3, r1, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	69b8      	ldr	r0, [r7, #24]
 8000ff2:	f7ff fef0 	bl	8000dd6 <lfs_min>
 8000ff6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001002:	1acb      	subs	r3, r1, r3
 8001004:	4413      	add	r3, r2
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4619      	mov	r1, r3
 800100a:	69f8      	ldr	r0, [r7, #28]
 800100c:	f00c fe54 	bl	800dcb8 <memcpy>

                data += diff;
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	4413      	add	r3, r2
 8001016:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4413      	add	r3, r2
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001020:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001028:	e0db      	b.n	80011e2 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	4619      	mov	r1, r3
 8001034:	69b8      	ldr	r0, [r7, #24]
 8001036:	f7ff fece 	bl	8000dd6 <lfs_min>
 800103a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001042:	429a      	cmp	r2, r3
 8001044:	d13a      	bne.n	80010bc <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8001050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001052:	429a      	cmp	r2, r3
 8001054:	d232      	bcs.n	80010bc <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800105c:	429a      	cmp	r2, r3
 800105e:	d324      	bcc.n	80010aa <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6859      	ldr	r1, [r3, #4]
 8001068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106a:	1acb      	subs	r3, r1, r3
 800106c:	4413      	add	r3, r2
 800106e:	4619      	mov	r1, r3
 8001070:	69b8      	ldr	r0, [r7, #24]
 8001072:	f7ff feb0 	bl	8000dd6 <lfs_min>
 8001076:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001082:	1acb      	subs	r3, r1, r3
 8001084:	4413      	add	r3, r2
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4619      	mov	r1, r3
 800108a:	69f8      	ldr	r0, [r7, #28]
 800108c:	f00c fe14 	bl	800dcb8 <memcpy>

                data += diff;
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	4413      	add	r3, r2
 8001096:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4413      	add	r3, r2
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80010a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80010a8:	e09b      	b.n	80011e2 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	69b8      	ldr	r0, [r7, #24]
 80010b6:	f7ff fe8e 	bl	8000dd6 <lfs_min>
 80010ba:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80010bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d336      	bcc.n	8001132 <lfs_bd_read+0x1b6>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80010d0:	fb02 f201 	mul.w	r2, r2, r1
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d12b      	bne.n	8001132 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010de:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80010e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d325      	bcc.n	8001132 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4619      	mov	r1, r3
 80010ee:	69b8      	ldr	r0, [r7, #24]
 80010f0:	f7ff fe80 	bl	8000df4 <lfs_aligndown>
 80010f4:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010fa:	685c      	ldr	r4, [r3, #4]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800110a:	47a0      	blx	r4
 800110c:	6178      	str	r0, [r7, #20]
            if (err) {
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <lfs_bd_read+0x19c>
                return err;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	e069      	b.n	80011ec <lfs_bd_read+0x270>
            }

            data += diff;
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4413      	add	r3, r2
 800111e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4413      	add	r3, r2
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8001128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8001130:	e057      	b.n	80011e2 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800113a:	429a      	cmp	r2, r3
 800113c:	d305      	bcc.n	800114a <lfs_bd_read+0x1ce>
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <lfs_bd_read+0x278>)
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <lfs_bd_read+0x27c>)
 8001142:	216b      	movs	r1, #107	; 0x6b
 8001144:	482d      	ldr	r0, [pc, #180]	; (80011fc <lfs_bd_read+0x280>)
 8001146:	f00c fd3f 	bl	800dbc8 <__assert_func>
        rcache->block = block;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800114e:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4619      	mov	r1, r3
 8001158:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800115a:	f7ff fe4b 	bl	8000df4 <lfs_aligndown>
 800115e:	4602      	mov	r2, r0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8001164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	4619      	mov	r1, r3
 8001172:	4610      	mov	r0, r2
 8001174:	f7ff fe52 	bl	8000e1c <lfs_alignup>
 8001178:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	4619      	mov	r1, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f7ff fe27 	bl	8000dd6 <lfs_min>
 8001188:	4602      	mov	r2, r0
                - rcache->off,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800118e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	4619      	mov	r1, r3
 8001198:	4610      	mov	r0, r2
 800119a:	f7ff fe1c 	bl	8000dd6 <lfs_min>
 800119e:	4602      	mov	r2, r0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011a8:	685c      	ldr	r4, [r3, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	462b      	mov	r3, r5
 80011c2:	47a0      	blx	r4
 80011c4:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	dd05      	ble.n	80011d8 <lfs_bd_read+0x25c>
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <lfs_bd_read+0x284>)
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <lfs_bd_read+0x27c>)
 80011d0:	2176      	movs	r1, #118	; 0x76
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <lfs_bd_read+0x280>)
 80011d4:	f00c fcf8 	bl	800dbc8 <__assert_func>
        if (err) {
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <lfs_bd_read+0x266>
            return err;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	e004      	b.n	80011ec <lfs_bd_read+0x270>
    while (size > 0) {
 80011e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f47f aee4 	bne.w	8000fb2 <lfs_bd_read+0x36>
        }
    }

    return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bdb0      	pop	{r4, r5, r7, pc}
 80011f4:	0800f0bc 	.word	0x0800f0bc
 80011f8:	0800f67c 	.word	0x0800f67c
 80011fc:	0800f0dc 	.word	0x0800f0dc
 8001200:	0800f0f0 	.word	0x0800f0f0

08001204 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af04      	add	r7, sp, #16
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8001212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001214:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
 800121e:	e039      	b.n	8001294 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8001220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2108      	movs	r1, #8
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fdd4 	bl	8000dd6 <lfs_min>
 800122e:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	1ad1      	subs	r1, r2, r3
 8001236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	4413      	add	r3, r2
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	9203      	str	r2, [sp, #12]
 8001240:	f107 0210 	add.w	r2, r7, #16
 8001244:	9202      	str	r2, [sp, #8]
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	460b      	mov	r3, r1
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff fe92 	bl	8000f7c <lfs_bd_read>
 8001258:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <lfs_bd_cmp+0x60>
            return res;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	e01c      	b.n	800129e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8001264:	6a3a      	ldr	r2, [r7, #32]
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	18d1      	adds	r1, r2, r3
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	4618      	mov	r0, r3
 8001272:	f00c fd13 	bl	800dc9c <memcmp>
 8001276:	61b8      	str	r0, [r7, #24]
        if (res) {
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	2b00      	cmp	r3, #0
 8001282:	da01      	bge.n	8001288 <lfs_bd_cmp+0x84>
 8001284:	2301      	movs	r3, #1
 8001286:	e00a      	b.n	800129e <lfs_bd_cmp+0x9a>
 8001288:	2302      	movs	r3, #2
 800128a:	e008      	b.n	800129e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800128c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	4413      	add	r3, r2
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001298:	429a      	cmp	r2, r3
 800129a:	d3c1      	bcc.n	8001220 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af04      	add	r7, sp, #16
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012be:	d061      	beq.n	8001384 <lfs_bd_flush+0xdc>
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f113 0f02 	cmn.w	r3, #2
 80012c8:	d05c      	beq.n	8001384 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d305      	bcc.n	80012e4 <lfs_bd_flush+0x3c>
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <lfs_bd_flush+0xe8>)
 80012da:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <lfs_bd_flush+0xec>)
 80012dc:	219e      	movs	r1, #158	; 0x9e
 80012de:	482e      	ldr	r0, [pc, #184]	; (8001398 <lfs_bd_flush+0xf0>)
 80012e0:	f00c fc72 	bl	800dbc8 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff fd93 	bl	8000e1c <lfs_alignup>
 80012f6:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012fc:	689c      	ldr	r4, [r3, #8]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	6819      	ldr	r1, [r3, #0]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	462b      	mov	r3, r5
 8001314:	47a0      	blx	r4
 8001316:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2b00      	cmp	r3, #0
 800131c:	dd05      	ble.n	800132a <lfs_bd_flush+0x82>
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <lfs_bd_flush+0xf4>)
 8001320:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <lfs_bd_flush+0xec>)
 8001322:	21a2      	movs	r1, #162	; 0xa2
 8001324:	481c      	ldr	r0, [pc, #112]	; (8001398 <lfs_bd_flush+0xf0>)
 8001326:	f00c fc4f 	bl	800dbc8 <__assert_func>
        if (err) {
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <lfs_bd_flush+0x8c>
            return err;
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	e028      	b.n	8001386 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d020      	beq.n	800137c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7ff fdf9 	bl	8000f34 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800134e:	69f8      	ldr	r0, [r7, #28]
 8001350:	9003      	str	r0, [sp, #12]
 8001352:	9102      	str	r1, [sp, #8]
 8001354:	9201      	str	r2, [sp, #4]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	2100      	movs	r1, #0
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff ff50 	bl	8001204 <lfs_bd_cmp>
 8001364:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b00      	cmp	r3, #0
 800136a:	da01      	bge.n	8001370 <lfs_bd_flush+0xc8>
                return res;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	e00a      	b.n	8001386 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8001376:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800137a:	e004      	b.n	8001386 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff fde6 	bl	8000f50 <lfs_cache_zero>
    }

    return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bdb0      	pop	{r4, r5, r7, pc}
 800138e:	bf00      	nop
 8001390:	0800f0fc 	.word	0x0800f0fc
 8001394:	0800f688 	.word	0x0800f688
 8001398:	0800f0dc 	.word	0x0800f0dc
 800139c:	0800f0f0 	.word	0x0800f0f0

080013a0 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff fdbf 	bl	8000f34 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f7ff ff73 	bl	80012a8 <lfs_bd_flush>
 80013c2:	6178      	str	r0, [r7, #20]
    if (err) {
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <lfs_bd_sync+0x2e>
        return err;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	e011      	b.n	80013f2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80013d8:	4610      	mov	r0, r2
 80013da:	4798      	blx	r3
 80013dc:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd05      	ble.n	80013f0 <lfs_bd_sync+0x50>
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <lfs_bd_sync+0x5c>)
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <lfs_bd_sync+0x60>)
 80013e8:	21c8      	movs	r1, #200	; 0xc8
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <lfs_bd_sync+0x64>)
 80013ec:	f00c fbec 	bl	800dbc8 <__assert_func>
    return err;
 80013f0:	697b      	ldr	r3, [r7, #20]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	0800f0f0 	.word	0x0800f0f0
 8001400:	0800f698 	.word	0x0800f698
 8001404:	0800f0dc 	.word	0x0800f0dc

08001408 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8001416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001418:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	f113 0f02 	cmn.w	r3, #2
 8001420:	d00b      	beq.n	800143a <lfs_bd_prog+0x32>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800142a:	429a      	cmp	r2, r3
 800142c:	d305      	bcc.n	800143a <lfs_bd_prog+0x32>
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <lfs_bd_prog+0x144>)
 8001430:	4a47      	ldr	r2, [pc, #284]	; (8001550 <lfs_bd_prog+0x148>)
 8001432:	21d3      	movs	r1, #211	; 0xd3
 8001434:	4847      	ldr	r0, [pc, #284]	; (8001554 <lfs_bd_prog+0x14c>)
 8001436:	f00c fbc7 	bl	800dbc8 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800143a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143e:	441a      	add	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	429a      	cmp	r2, r3
 8001448:	d977      	bls.n	800153a <lfs_bd_prog+0x132>
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <lfs_bd_prog+0x150>)
 800144c:	4a40      	ldr	r2, [pc, #256]	; (8001550 <lfs_bd_prog+0x148>)
 800144e:	21d4      	movs	r1, #212	; 0xd4
 8001450:	4840      	ldr	r0, [pc, #256]	; (8001554 <lfs_bd_prog+0x14c>)
 8001452:	f00c fbb9 	bl	800dbc8 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800145c:	429a      	cmp	r2, r3
 800145e:	d151      	bne.n	8001504 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8001464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001466:	429a      	cmp	r2, r3
 8001468:	d34c      	bcc.n	8001504 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	4413      	add	r3, r2
                off >= pcache->off &&
 8001476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001478:	429a      	cmp	r2, r3
 800147a:	d243      	bcs.n	8001504 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	6859      	ldr	r1, [r3, #4]
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800148a:	4413      	add	r3, r2
 800148c:	4619      	mov	r1, r3
 800148e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001490:	f7ff fca1 	bl	8000dd6 <lfs_min>
 8001494:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014a0:	1acb      	subs	r3, r1, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	69f9      	ldr	r1, [r7, #28]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00c fc05 	bl	800dcb8 <memcpy>

            data += diff;
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	4413      	add	r3, r2
 80014b4:	61fb      	str	r3, [r7, #28]
            off += diff;
 80014b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	4413      	add	r3, r2
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 80014be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	6898      	ldr	r0, [r3, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fc70 	bl	8000db8 <lfs_max>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d126      	bne.n	800153a <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f7ff fed8 	bl	80012a8 <lfs_bd_flush>
 80014f8:	6178      	str	r0, [r7, #20]
                if (err) {
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01c      	beq.n	800153a <lfs_bd_prog+0x132>
                    return err;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	e01e      	b.n	8001542 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d005      	beq.n	800151a <lfs_bd_prog+0x112>
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <lfs_bd_prog+0x154>)
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <lfs_bd_prog+0x148>)
 8001512:	21f1      	movs	r1, #241	; 0xf1
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <lfs_bd_prog+0x14c>)
 8001516:	f00c fb57 	bl	800dbc8 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800151e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4619      	mov	r1, r3
 8001528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800152a:	f7ff fc63 	bl	8000df4 <lfs_aligndown>
 800152e:	4602      	mov	r2, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800153a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153c:	2b00      	cmp	r3, #0
 800153e:	d18a      	bne.n	8001456 <lfs_bd_prog+0x4e>
    }

    return 0;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	0800f124 	.word	0x0800f124
 8001550:	0800f6a4 	.word	0x0800f6a4
 8001554:	0800f0dc 	.word	0x0800f0dc
 8001558:	0800f160 	.word	0x0800f160
 800155c:	0800f184 	.word	0x0800f184

08001560 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d305      	bcc.n	8001582 <lfs_bd_erase+0x22>
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <lfs_bd_erase+0x54>)
 8001578:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <lfs_bd_erase+0x58>)
 800157a:	21ff      	movs	r1, #255	; 0xff
 800157c:	480f      	ldr	r0, [pc, #60]	; (80015bc <lfs_bd_erase+0x5c>)
 800157e:	f00c fb23 	bl	800dbc8 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800158c:	6839      	ldr	r1, [r7, #0]
 800158e:	4610      	mov	r0, r2
 8001590:	4798      	blx	r3
 8001592:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	dd06      	ble.n	80015a8 <lfs_bd_erase+0x48>
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <lfs_bd_erase+0x60>)
 800159c:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <lfs_bd_erase+0x58>)
 800159e:	f240 1101 	movw	r1, #257	; 0x101
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <lfs_bd_erase+0x5c>)
 80015a4:	f00c fb10 	bl	800dbc8 <__assert_func>
    return err;
 80015a8:	68fb      	ldr	r3, [r7, #12]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	0800f0bc 	.word	0x0800f0bc
 80015b8:	0800f6b0 	.word	0x0800f6b0
 80015bc:	0800f0dc 	.word	0x0800f0dc
 80015c0:	0800f0f0 	.word	0x0800f0f0

080015c4 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3304      	adds	r3, #4
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d005      	beq.n	800160a <lfs_pair_isnull+0x1e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3304      	adds	r3, #4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d101      	bne.n	800160e <lfs_pair_isnull+0x22>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <lfs_pair_isnull+0x24>
 800160e:	2300      	movs	r3, #0
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d017      	beq.n	8001666 <lfs_pair_cmp+0x46>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3304      	adds	r3, #4
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d00f      	beq.n	8001666 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3304      	adds	r3, #4
 800164e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d008      	beq.n	8001666 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3304      	adds	r3, #4
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <lfs_pair_cmp+0x46>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <lfs_pair_cmp+0x48>
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d107      	bne.n	8001698 <lfs_pair_sync+0x26>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3304      	adds	r3, #4
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3304      	adds	r3, #4
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d00d      	beq.n	80016b4 <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3304      	adds	r3, #4
 80016a0:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d108      	bne.n	80016b8 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d101      	bne.n	80016b8 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <lfs_pair_sync+0x48>
 80016b8:	2300      	movs	r3, #0
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80016ca:	b590      	push	{r4, r7, lr}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fbe8 	bl	8000eac <lfs_fromle32>
 80016dc:	4602      	mov	r2, r0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1d1c      	adds	r4, r3, #4
 80016ec:	4610      	mov	r0, r2
 80016ee:	f7ff fbdd 	bl	8000eac <lfs_fromle32>
 80016f2:	4603      	mov	r3, r0
 80016f4:	6023      	str	r3, [r4, #0]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}

080016fe <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80016fe:	b590      	push	{r4, r7, lr}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fbd8 	bl	8000ec0 <lfs_tole32>
 8001710:	4602      	mov	r2, r0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	1d1c      	adds	r4, r3, #4
 8001720:	4610      	mov	r0, r2
 8001722:	f7ff fbcd 	bl	8000ec0 <lfs_tole32>
 8001726:	4603      	mov	r3, r0
 8001728:	6023      	str	r3, [r4, #0]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}

08001732 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	43db      	mvns	r3, r3
 800173e:	0fdb      	lsrs	r3, r3, #31
 8001740:	b2db      	uxtb	r3, r3
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	059b      	lsls	r3, r3, #22
 8001758:	159b      	asrs	r3, r3, #22
 800175a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	0d1b      	lsrs	r3, r3, #20
 800177c:	b29b      	uxth	r3, r3
 800177e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001782:	b29b      	uxth	r3, r3
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	0d1b      	lsrs	r3, r3, #20
 800179a:	b29b      	uxth	r3, r3
 800179c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017a0:	b29b      	uxth	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0d1b      	lsrs	r3, r3, #20
 80017b8:	b2db      	uxtb	r3, r3
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffed 	bl	80017ac <lfs_tag_chunk>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b25b      	sxtb	r3, r3
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0a9b      	lsrs	r3, r3, #10
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017f0:	b29b      	uxth	r3, r3
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff95 	bl	800174c <lfs_tag_isdelete>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffe6 	bl	80017fc <lfs_tag_size>
 8001830:	4603      	mov	r3, r0
 8001832:	3304      	adds	r3, #4
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e012      	b.n	8001872 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4403      	add	r3, r0
 8001868:	404a      	eors	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3301      	adds	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b02      	cmp	r3, #2
 8001876:	dde9      	ble.n	800184c <lfs_gstate_xor+0x10>
    }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e00b      	b.n	80018aa <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <lfs_gstate_iszero+0x20>
            return false;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e006      	b.n	80018b2 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	ddf0      	ble.n	8001892 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff97 	bl	80017fc <lfs_tag_size>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff84 	bl	80017fc <lfs_tag_size>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b2db      	uxtb	r3, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff2f 	bl	8001770 <lfs_tag_type1>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf14      	ite	ne
 8001918:	2301      	movne	r3, #1
 800191a:	2300      	moveq	r3, #0
 800191c:	b2db      	uxtb	r3, r3
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff1b 	bl	8001770 <lfs_tag_type1>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00a      	beq.n	8001956 <lfs_gstate_hasmovehere+0x30>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3304      	adds	r3, #4
 8001944:	6839      	ldr	r1, [r7, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fe6a 	bl	8001620 <lfs_pair_cmp>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <lfs_gstate_hasmovehere+0x30>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <lfs_gstate_hasmovehere+0x32>
 8001956:	2300      	movs	r3, #0
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fa9a 	bl	8000eac <lfs_fromle32>
 8001978:	4602      	mov	r2, r0
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fa92 	bl	8000eac <lfs_fromle32>
 8001988:	4602      	mov	r2, r0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fa8a 	bl	8000eac <lfs_fromle32>
 8001998:	4602      	mov	r2, r0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fa84 	bl	8000ec0 <lfs_tole32>
 80019b8:	4602      	mov	r2, r0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fa7c 	bl	8000ec0 <lfs_tole32>
 80019c8:	4602      	mov	r2, r0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fa74 	bl	8000ec0 <lfs_tole32>
 80019d8:	4602      	mov	r2, r0
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	609a      	str	r2, [r3, #8]
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fa5a 	bl	8000eac <lfs_fromle32>
 80019f8:	4602      	mov	r2, r0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fa52 	bl	8000eac <lfs_fromle32>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	605a      	str	r2, [r3, #4]
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fa4c 	bl	8000ec0 <lfs_tole32>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fa44 	bl	8000ec0 <lfs_tole32>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	605a      	str	r2, [r3, #4]
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fa2a 	bl	8000eac <lfs_fromle32>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fa22 	bl	8000eac <lfs_fromle32>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fa1a 	bl	8000eac <lfs_fromle32>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fa12 	bl	8000eac <lfs_fromle32>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fa0a 	bl	8000eac <lfs_fromle32>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fa02 	bl	8000eac <lfs_fromle32>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	615a      	str	r2, [r3, #20]
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f9fc 	bl	8000ec0 <lfs_tole32>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f9f4 	bl	8000ec0 <lfs_tole32>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f9ec 	bl	8000ec0 <lfs_tole32>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f9e4 	bl	8000ec0 <lfs_tole32>
 8001af8:	4602      	mov	r2, r0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f9dc 	bl	8000ec0 <lfs_tole32>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f9d4 	bl	8000ec0 <lfs_tole32>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	615a      	str	r2, [r3, #20]
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8001b26:	b480      	push	{r7}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e009      	b.n	8001b4a <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d101      	bne.n	8001b44 <lfs_mlist_isopen+0x1e>
            return true;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e007      	b.n	8001b54 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f1      	bne.n	8001b36 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3328      	adds	r3, #40	; 0x28
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e00d      	b.n	8001b8c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d105      	bne.n	8001b86 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	601a      	str	r2, [r3, #0]
            break;
 8001b84:	e007      	b.n	8001b96 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ed      	bne.n	8001b70 <lfs_mlist_remove+0x12>
        }
    }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4413      	add	r3, r2
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001be4:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8001be6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bea:	fb02 f201 	mul.w	r2, r2, r1
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d212      	bcs.n	8001c22 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	009a      	lsls	r2, r3, #2
 8001c06:	440a      	add	r2, r1
 8001c08:	6811      	ldr	r1, [r2, #0]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f002 021f 	and.w	r2, r2, #31
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4403      	add	r3, r0
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c3a:	6a1a      	ldr	r2, [r3, #32]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffe5 	bl	8001c2e <lfs_alloc_ack>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8001c76:	e04f      	b.n	8001d18 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7c:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d132      	bne.n	8001d18 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4413      	add	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001cbe:	6a12      	ldr	r2, [r2, #32]
 8001cc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cc4:	fb02 f201 	mul.w	r2, r2, r1
 8001cc8:	1a9a      	subs	r2, r3, r2
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8001cce:	e009      	b.n	8001ce4 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	1e5a      	subs	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d011      	beq.n	8001d14 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1dd      	bne.n	8001cd0 <lfs_alloc+0x64>
                }

                return 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e043      	b.n	8001da0 <lfs_alloc+0x134>
        while (lfs->free.i != lfs->free.size) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1a9      	bne.n	8001c78 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <lfs_alloc+0xc6>
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8001d2c:	f06f 031b 	mvn.w	r3, #27
 8001d30:	e036      	b.n	8001da0 <lfs_alloc+0x134>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d40:	6a12      	ldr	r2, [r2, #32]
 8001d42:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d46:	fb02 f201 	mul.w	r2, r2, r1
 8001d4a:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	00da      	lsls	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f7ff f839 	bl	8000dd6 <lfs_min>
 8001d64:	4602      	mov	r2, r0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	f00b ffa9 	bl	800dcd4 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8001d82:	2301      	movs	r3, #1
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <lfs_alloc+0x13c>)
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f004 fb39 	bl	8006400 <lfs_fs_rawtraverse>
 8001d8e:	60f8      	str	r0, [r7, #12]
        if (err) {
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f43f af6f 	beq.w	8001c76 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff56 	bl	8001c4a <lfs_alloc_drop>
            return err;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	08001bc3 	.word	0x08001bc3

08001dac <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b08f      	sub	sp, #60	; 0x3c
 8001db0:	af04      	add	r7, sp, #16
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	333c      	adds	r3, #60	; 0x3c
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fda7 	bl	8001926 <lfs_gstate_hasmovehere>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80b9 	beq.w	8001f52 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fcfc 	bl	80017de <lfs_tag_id>
 8001de6:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80b2 	beq.w	8001f52 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fcf3 	bl	80017de <lfs_tag_id>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461c      	mov	r4, r3
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	f7ff fcee 	bl	80017de <lfs_tag_id>
 8001e02:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8001e04:	429c      	cmp	r4, r3
 8001e06:	f200 80a4 	bhi.w	8001f52 <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001e10:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001e12:	e09e      	b.n	8001f52 <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fcfc 	bl	8001814 <lfs_tag_dsize>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	9203      	str	r2, [sp, #12]
 8001e32:	f107 0210 	add.w	r2, r7, #16
 8001e36:	9202      	str	r2, [sp, #8]
 8001e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3a:	9201      	str	r2, [sp, #4]
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2304      	movs	r3, #4
 8001e40:	460a      	mov	r2, r1
 8001e42:	2100      	movs	r1, #0
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff f899 	bl	8000f7c <lfs_bd_read>
 8001e4a:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <lfs_dir_getslice+0xaa>
            return err;
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	e089      	b.n	8001f6a <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff f83d 	bl	8000ed8 <lfs_frombe32>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	4053      	eors	r3, r2
 8001e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e68:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fcb7 	bl	80017de <lfs_tag_id>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d02b      	beq.n	8001ece <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001e76:	69f8      	ldr	r0, [r7, #28]
 8001e78:	f7ff fc7a 	bl	8001770 <lfs_tag_type1>
 8001e7c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e82:	d124      	bne.n	8001ece <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001e84:	69f8      	ldr	r0, [r7, #28]
 8001e86:	f7ff fcaa 	bl	80017de <lfs_tag_id>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fca2 	bl	80017de <lfs_tag_id>
 8001e9a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001e9c:	429c      	cmp	r4, r3
 8001e9e:	d816      	bhi.n	8001ece <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	1ad2      	subs	r2, r2, r3
 8001ea6:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <lfs_dir_getslice+0x1c8>)
 8001ea8:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d102      	bne.n	8001ebe <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8001eb8:	f06f 0301 	mvn.w	r3, #1
 8001ebc:	e055      	b.n	8001f6a <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001ebe:	69f8      	ldr	r0, [r7, #28]
 8001ec0:	f7ff fc80 	bl	80017c4 <lfs_tag_splice>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	029a      	lsls	r2, r3, #10
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	4413      	add	r3, r2
 8001ecc:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	1ad2      	subs	r2, r2, r3
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	405a      	eors	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d138      	bne.n	8001f52 <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8001ee0:	69f8      	ldr	r0, [r7, #28]
 8001ee2:	f7ff fc33 	bl	800174c <lfs_tag_isdelete>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8001eec:	f06f 0301 	mvn.w	r3, #1
 8001ef0:	e03b      	b.n	8001f6a <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001ef2:	69f8      	ldr	r0, [r7, #28]
 8001ef4:	f7ff fc82 	bl	80017fc <lfs_tag_size>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe ff6a 	bl	8000dd6 <lfs_min>
 8001f02:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001f0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f0e:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001f10:	3204      	adds	r2, #4
 8001f12:	6979      	ldr	r1, [r7, #20]
 8001f14:	9103      	str	r1, [sp, #12]
 8001f16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f18:	9102      	str	r1, [sp, #8]
 8001f1a:	9201      	str	r2, [sp, #4]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	4602      	mov	r2, r0
 8001f22:	2100      	movs	r1, #0
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff f829 	bl	8000f7c <lfs_bd_read>
 8001f2a:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <lfs_dir_getslice+0x18a>
                return err;
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	e019      	b.n	8001f6a <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	18d0      	adds	r0, r2, r3
 8001f3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	2100      	movs	r1, #0
 8001f46:	f00b fec5 	bl	800dcd4 <memset>

            return tag + gdiff;
 8001f4a:	6a3a      	ldr	r2, [r7, #32]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	e00b      	b.n	8001f6a <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fc5d 	bl	8001814 <lfs_tag_dsize>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f4bf af57 	bcs.w	8001e14 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8001f66:	f06f 0301 	mvn.w	r3, #1
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	372c      	adds	r7, #44	; 0x2c
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	000ffc00 	.word	0x000ffc00

08001f78 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af04      	add	r7, sp, #16
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001f86:	6838      	ldr	r0, [r7, #0]
 8001f88:	f7ff fc38 	bl	80017fc <lfs_tag_size>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	9302      	str	r3, [sp, #8]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2300      	movs	r3, #0
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff ff04 	bl	8001dac <lfs_dir_getslice>
 8001fa4:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b08c      	sub	sp, #48	; 0x30
 8001fb2:	af04      	add	r7, sp, #16
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbe:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc4:	441a      	add	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f240 80c0 	bls.w	8002152 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001fd2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001fd6:	e0c1      	b.n	800215c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fda:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03f      	beq.n	8002062 <lfs_dir_getread+0xb4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f113 0f02 	cmn.w	r3, #2
 8001fea:	d13a      	bne.n	8002062 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d232      	bcs.n	8002062 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002002:	429a      	cmp	r2, r3
 8002004:	d324      	bcc.n	8002050 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6859      	ldr	r1, [r3, #4]
 800200e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002010:	1acb      	subs	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	4619      	mov	r1, r3
 8002016:	69b8      	ldr	r0, [r7, #24]
 8002018:	f7fe fedd 	bl	8000dd6 <lfs_min>
 800201c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002028:	1acb      	subs	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4619      	mov	r1, r3
 8002030:	69f8      	ldr	r0, [r7, #28]
 8002032:	f00b fe41 	bl	800dcb8 <memcpy>

                data += diff;
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	4413      	add	r3, r2
 800203c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800203e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4413      	add	r3, r2
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800204e:	e080      	b.n	8002152 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	4619      	mov	r1, r3
 800205a:	69b8      	ldr	r0, [r7, #24]
 800205c:	f7fe febb 	bl	8000dd6 <lfs_min>
 8002060:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f113 0f02 	cmn.w	r3, #2
 800206a:	d13a      	bne.n	80020e2 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8002076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002078:	429a      	cmp	r2, r3
 800207a:	d232      	bcs.n	80020e2 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002082:	429a      	cmp	r2, r3
 8002084:	d324      	bcc.n	80020d0 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6859      	ldr	r1, [r3, #4]
 800208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002090:	1acb      	subs	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	4619      	mov	r1, r3
 8002096:	69b8      	ldr	r0, [r7, #24]
 8002098:	f7fe fe9d 	bl	8000dd6 <lfs_min>
 800209c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020a8:	1acb      	subs	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4619      	mov	r1, r3
 80020b0:	69f8      	ldr	r0, [r7, #28]
 80020b2:	f00b fe01 	bl	800dcb8 <memcpy>

                data += diff;
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	4413      	add	r3, r2
 80020bc:	61fb      	str	r3, [r7, #28]
                off += diff;
 80020be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4413      	add	r3, r2
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80020c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80020ce:	e040      	b.n	8002152 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	4619      	mov	r1, r3
 80020da:	69b8      	ldr	r0, [r7, #24]
 80020dc:	f7fe fe7b 	bl	8000dd6 <lfs_min>
 80020e0:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f06f 0201 	mvn.w	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	4619      	mov	r1, r3
 80020f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020f4:	f7fe fe7e 	bl	8000df4 <lfs_aligndown>
 80020f8:	4602      	mov	r2, r0
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80020fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	441a      	add	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	4619      	mov	r1, r3
 800210c:	4610      	mov	r0, r2
 800210e:	f7fe fe85 	bl	8000e1c <lfs_alignup>
 8002112:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	4619      	mov	r1, r3
 800211c:	4610      	mov	r0, r2
 800211e:	f7fe fe5a 	bl	8000dd6 <lfs_min>
 8002122:	4602      	mov	r2, r0
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	6889      	ldr	r1, [r1, #8]
 8002134:	9102      	str	r1, [sp, #8]
 8002136:	9201      	str	r2, [sp, #4]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7ff fe33 	bl	8001dac <lfs_dir_getslice>
 8002146:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	da01      	bge.n	8002152 <lfs_dir_getread+0x1a4>
            return err;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	e004      	b.n	800215c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8002152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f af3f 	bne.w	8001fd8 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <lfs_dir_traverse_filter+0x1e>
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <lfs_dir_traverse_filter+0xac>)
 8002180:	e000      	b.n	8002184 <lfs_dir_traverse_filter+0x20>
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002184:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	405a      	eors	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d014      	beq.n	80021c0 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fad6 	bl	800174c <lfs_tag_isdelete>
 80021a0:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4a19      	ldr	r2, [pc, #100]	; (8002210 <lfs_dir_traverse_filter+0xac>)
 80021aa:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	6819      	ldr	r1, [r3, #0]
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <lfs_dir_traverse_filter+0xb4>)
 80021b2:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80021b4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80021b8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d104      	bne.n	80021ca <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
        return true;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e01e      	b.n	8002208 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80021ca:	68b8      	ldr	r0, [r7, #8]
 80021cc:	f7ff fad0 	bl	8001770 <lfs_tag_type1>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d6:	d116      	bne.n	8002206 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 80021d8:	68b8      	ldr	r0, [r7, #8]
 80021da:	f7ff fb00 	bl	80017de <lfs_tag_id>
 80021de:	4603      	mov	r3, r0
 80021e0:	461c      	mov	r4, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff faf9 	bl	80017de <lfs_tag_id>
 80021ec:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80021ee:	429c      	cmp	r4, r3
 80021f0:	d809      	bhi.n	8002206 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80021f2:	68b8      	ldr	r0, [r7, #8]
 80021f4:	f7ff fae6 	bl	80017c4 <lfs_tag_splice>
 80021f8:	4603      	mov	r3, r0
 80021fa:	029a      	lsls	r2, r3, #10
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	441a      	add	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	601a      	str	r2, [r3, #0]
    }

    return false;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd90      	pop	{r4, r7, pc}
 8002210:	7ffffc00 	.word	0x7ffffc00
 8002214:	700ffc00 	.word	0x700ffc00
 8002218:	000ffc00 	.word	0x000ffc00

0800221c <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b0c1      	sub	sp, #260	; 0x104
 8002220:	af04      	add	r7, sp, #16
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8002230:	6838      	ldr	r0, [r7, #0]
 8002232:	f7ff faef 	bl	8001814 <lfs_tag_dsize>
 8002236:	4602      	mov	r2, r0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	441a      	add	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d237      	bcs.n	80022b4 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8002244:	6838      	ldr	r0, [r7, #0]
 8002246:	f7ff fae5 	bl	8001814 <lfs_tag_dsize>
 800224a:	4602      	mov	r2, r0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8002252:	68f9      	ldr	r1, [r7, #12]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2204      	movs	r2, #4
 800225a:	9203      	str	r2, [sp, #12]
 800225c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002260:	9202      	str	r2, [sp, #8]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	9201      	str	r2, [sp, #4]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2304      	movs	r3, #4
 800226a:	460a      	mov	r2, r1
 800226c:	2100      	movs	r1, #0
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7fe fe84 	bl	8000f7c <lfs_bd_read>
 8002274:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8002278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <lfs_dir_traverse+0x6a>
                    return err;
 8002280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002284:	e3cf      	b.n	8002a26 <lfs_dir_traverse+0x80a>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8002286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fe25 	bl	8000ed8 <lfs_frombe32>
 800228e:	4602      	mov	r2, r0
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4053      	eors	r3, r2
 8002294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002298:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 80022a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 80022ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	e01b      	b.n	80022ec <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 80022b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	dd13      	ble.n	80022e4 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 80022bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 80022c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 80022ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80022d2:	3308      	adds	r3, #8
 80022d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 80022d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80022dc:	3b01      	subs	r3, #1
 80022de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80022e2:	e003      	b.n	80022ec <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 80022ea:	e2bc      	b.n	8002866 <lfs_dir_traverse+0x64a>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 80022ec:	4b85      	ldr	r3, [pc, #532]	; (8002504 <lfs_dir_traverse+0x2e8>)
 80022ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 80022f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022f8:	405a      	eors	r2, r3
 80022fa:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80022fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002302:	400b      	ands	r3, r1
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 82a0 	bne.w	800284c <lfs_dir_traverse+0x630>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800230c:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002310:	f7ff fa65 	bl	80017de <lfs_tag_id>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80fe 	beq.w	8002518 <lfs_dir_traverse+0x2fc>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800231c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002320:	2b02      	cmp	r3, #2
 8002322:	d906      	bls.n	8002332 <lfs_dir_traverse+0x116>
 8002324:	4b78      	ldr	r3, [pc, #480]	; (8002508 <lfs_dir_traverse+0x2ec>)
 8002326:	4a79      	ldr	r2, [pc, #484]	; (800250c <lfs_dir_traverse+0x2f0>)
 8002328:	f44f 7154 	mov.w	r1, #848	; 0x350
 800232c:	4878      	ldr	r0, [pc, #480]	; (8002510 <lfs_dir_traverse+0x2f4>)
 800232e:	f00b fc4b 	bl	800dbc8 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8002332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002334:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002344:	4413      	add	r3, r2
 8002346:	3b98      	subs	r3, #152	; 0x98
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800235c:	4413      	add	r3, r2
 800235e:	3b94      	subs	r3, #148	; 0x94
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002368:	4613      	mov	r3, r2
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002374:	4413      	add	r3, r2
 8002376:	3b90      	subs	r3, #144	; 0x90
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800238c:	4413      	add	r3, r2
 800238e:	3b8c      	subs	r3, #140	; 0x8c
 8002390:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023a6:	4413      	add	r3, r2
 80023a8:	3b88      	subs	r3, #136	; 0x88
 80023aa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023c0:	4413      	add	r3, r2
 80023c2:	3b84      	subs	r3, #132	; 0x84
 80023c4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023da:	4413      	add	r3, r2
 80023dc:	3b80      	subs	r3, #128	; 0x80
 80023de:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023e8:	4613      	mov	r3, r2
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023f4:	4413      	add	r3, r2
 80023f6:	3b7c      	subs	r3, #124	; 0x7c
 80023f8:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80023fc:	801a      	strh	r2, [r3, #0]
 80023fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800240e:	4413      	add	r3, r2
 8002410:	3b7a      	subs	r3, #122	; 0x7a
 8002412:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002416:	801a      	strh	r2, [r3, #0]
 8002418:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002428:	4413      	add	r3, r2
 800242a:	3b78      	subs	r3, #120	; 0x78
 800242c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002430:	801a      	strh	r2, [r3, #0]
 8002432:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002442:	4413      	add	r3, r2
 8002444:	3b74      	subs	r3, #116	; 0x74
 8002446:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800245c:	4413      	add	r3, r2
 800245e:	3b70      	subs	r3, #112	; 0x70
 8002460:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800246a:	4613      	mov	r3, r2
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002476:	4413      	add	r3, r2
 8002478:	3b6c      	subs	r3, #108	; 0x6c
 800247a:	6019      	str	r1, [r3, #0]
 800247c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800248c:	4413      	add	r3, r2
 800248e:	3b68      	subs	r3, #104	; 0x68
 8002490:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80024a6:	4413      	add	r3, r2
 80024a8:	3b68      	subs	r3, #104	; 0x68
 80024aa:	3304      	adds	r3, #4
 80024ac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80024b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024b4:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80024b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80024bc:	3301      	adds	r3, #1
 80024be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <lfs_dir_traverse+0x2f8>)
 80024e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 80024e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	3328      	adds	r3, #40	; 0x28
 80024fa:	440b      	add	r3, r1
 80024fc:	3304      	adds	r3, #4
 80024fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002502:	e695      	b.n	8002230 <lfs_dir_traverse+0x14>
 8002504:	7ff00000 	.word	0x7ff00000
 8002508:	0800f1a8 	.word	0x0800f1a8
 800250c:	0800f6c0 	.word	0x0800f6c0
 8002510:	0800f0dc 	.word	0x0800f0dc
 8002514:	08002165 	.word	0x08002165
                continue;
            }
        }

popped:
 8002518:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800251a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800251e:	f7ff f95e 	bl	80017de <lfs_tag_id>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <lfs_dir_traverse+0x338>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8002528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f957 	bl	80017de <lfs_tag_id>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8002534:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8002538:	4293      	cmp	r3, r2
 800253a:	f200 8189 	bhi.w	8002850 <lfs_dir_traverse+0x634>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800253e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff f94c 	bl	80017de <lfs_tag_id>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800254e:	4293      	cmp	r3, r2
 8002550:	f240 817e 	bls.w	8002850 <lfs_dir_traverse+0x634>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f919 	bl	800178e <lfs_tag_type3>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	f43f ae66 	beq.w	8002230 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f911 	bl	800178e <lfs_tag_type3>
 800256c:	4603      	mov	r3, r0
 800256e:	461a      	mov	r2, r3
 8002570:	f240 1301 	movw	r3, #257	; 0x101
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 80ed 	bne.w	8002754 <lfs_dir_traverse+0x538>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800257a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800257e:	4ab7      	ldr	r2, [pc, #732]	; (800285c <lfs_dir_traverse+0x640>)
 8002580:	4293      	cmp	r3, r2
 8002582:	f000 8167 	beq.w	8002854 <lfs_dir_traverse+0x638>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8002586:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002596:	4413      	add	r3, r2
 8002598:	3b98      	subs	r3, #152	; 0x98
 800259a:	4618      	mov	r0, r3
 800259c:	233c      	movs	r3, #60	; 0x3c
 800259e:	461a      	mov	r2, r3
 80025a0:	2100      	movs	r1, #0
 80025a2:	f00b fb97 	bl	800dcd4 <memset>
 80025a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80025aa:	4613      	mov	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025b6:	4413      	add	r3, r2
 80025b8:	3b98      	subs	r3, #152	; 0x98
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80025c2:	4613      	mov	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025ce:	4413      	add	r3, r2
 80025d0:	3b94      	subs	r3, #148	; 0x94
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80025da:	4613      	mov	r3, r2
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025e6:	4413      	add	r3, r2
 80025e8:	3b90      	subs	r3, #144	; 0x90
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025fe:	4413      	add	r3, r2
 8002600:	3b8c      	subs	r3, #140	; 0x8c
 8002602:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002618:	4413      	add	r3, r2
 800261a:	3b88      	subs	r3, #136	; 0x88
 800261c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002632:	4413      	add	r3, r2
 8002634:	3b84      	subs	r3, #132	; 0x84
 8002636:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800264c:	4413      	add	r3, r2
 800264e:	3b80      	subs	r3, #128	; 0x80
 8002650:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002666:	4413      	add	r3, r2
 8002668:	3b7c      	subs	r3, #124	; 0x7c
 800266a:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800266e:	801a      	strh	r2, [r3, #0]
 8002670:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002680:	4413      	add	r3, r2
 8002682:	3b7a      	subs	r3, #122	; 0x7a
 8002684:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002688:	801a      	strh	r2, [r3, #0]
 800268a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800269a:	4413      	add	r3, r2
 800269c:	3b78      	subs	r3, #120	; 0x78
 800269e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80026a2:	801a      	strh	r2, [r3, #0]
 80026a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80026b4:	4413      	add	r3, r2
 80026b6:	3b74      	subs	r3, #116	; 0x74
 80026b8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80026c2:	4613      	mov	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80026ce:	4413      	add	r3, r2
 80026d0:	3b70      	subs	r3, #112	; 0x70
 80026d2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80026d6:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80026d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026dc:	3301      	adds	r3, #1
 80026de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80026e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff f889 	bl	80017fc <lfs_tag_size>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80026f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff f873 	bl	80017de <lfs_tag_id>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	60bb      	str	r3, [r7, #8]
            off = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
 800270c:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800271a:	4b51      	ldr	r3, [pc, #324]	; (8002860 <lfs_dir_traverse+0x644>)
 800271c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002720:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002724:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8002728:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800272c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8002730:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002734:	3301      	adds	r3, #1
 8002736:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 800273a:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 800273e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	b29a      	uxth	r2, r3
 8002746:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800274a:	4413      	add	r3, r2
 800274c:	b29b      	uxth	r3, r3
 800274e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8002752:	e56d      	b.n	8002230 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff f819 	bl	800178e <lfs_tag_type3>
 800275c:	4603      	mov	r3, r0
 800275e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8002762:	d159      	bne.n	8002818 <lfs_dir_traverse+0x5fc>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800276a:	e04b      	b.n	8002804 <lfs_dir_traverse+0x5e8>
                const struct lfs_attr *a = buffer;
 800276c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002770:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002774:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	461a      	mov	r2, r3
 8002782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800278e:	051c      	lsls	r4, r3, #20
 8002790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f823 	bl	80017de <lfs_tag_id>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80027a0:	4413      	add	r3, r2
 80027a2:	029b      	lsls	r3, r3, #10
 80027a4:	ea44 0103 	orr.w	r1, r4, r3
 80027a8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	461a      	mov	r2, r3
 80027b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ba:	4413      	add	r3, r2
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80027c0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	461a      	mov	r2, r3
 80027ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027d2:	4413      	add	r3, r2
 80027d4:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80027d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027da:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80027de:	4798      	blx	r3
 80027e0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80027e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da02      	bge.n	80027f2 <lfs_dir_traverse+0x5d6>
                    return res;
 80027ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027f0:	e119      	b.n	8002a26 <lfs_dir_traverse+0x80a>
                }

                if (res) {
 80027f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d12e      	bne.n	8002858 <lfs_dir_traverse+0x63c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80027fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027fe:	3301      	adds	r3, #1
 8002800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fff8 	bl	80017fc <lfs_tag_size>
 800280c:	4602      	mov	r2, r0
 800280e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002812:	4293      	cmp	r3, r2
 8002814:	d3aa      	bcc.n	800276c <lfs_dir_traverse+0x550>
 8002816:	e50b      	b.n	8002230 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8002818:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800281c:	029a      	lsls	r2, r3, #10
 800281e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002820:	18d1      	adds	r1, r2, r3
 8002822:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002826:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800282a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800282e:	4798      	blx	r3
 8002830:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8002834:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002838:	2b00      	cmp	r3, #0
 800283a:	da02      	bge.n	8002842 <lfs_dir_traverse+0x626>
                return res;
 800283c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002840:	e0f1      	b.n	8002a26 <lfs_dir_traverse+0x80a>
            }

            if (res) {
 8002842:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10c      	bne.n	8002864 <lfs_dir_traverse+0x648>
 800284a:	e4f1      	b.n	8002230 <lfs_dir_traverse+0x14>
                continue;
 800284c:	bf00      	nop
 800284e:	e4ef      	b.n	8002230 <lfs_dir_traverse+0x14>
            continue;
 8002850:	bf00      	nop
 8002852:	e4ed      	b.n	8002230 <lfs_dir_traverse+0x14>
                continue;
 8002854:	bf00      	nop
 8002856:	e4eb      	b.n	8002230 <lfs_dir_traverse+0x14>
                    break;
 8002858:	bf00      	nop
        {
 800285a:	e4e9      	b.n	8002230 <lfs_dir_traverse+0x14>
 800285c:	08002165 	.word	0x08002165
 8002860:	600ffc00 	.word	0x600ffc00
                break;
 8002864:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8002866:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80d9 	beq.w	8002a22 <lfs_dir_traverse+0x806>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002870:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002882:	4413      	add	r3, r2
 8002884:	3b98      	subs	r3, #152	; 0x98
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800288a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800289c:	4413      	add	r3, r2
 800289e:	3b94      	subs	r3, #148	; 0x94
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80028a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80028b6:	4413      	add	r3, r2
 80028b8:	3b90      	subs	r3, #144	; 0x90
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80028be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80028d0:	4413      	add	r3, r2
 80028d2:	3b8c      	subs	r3, #140	; 0x8c
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80028da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80028ec:	4413      	add	r3, r2
 80028ee:	3b88      	subs	r3, #136	; 0x88
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80028f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002908:	4413      	add	r3, r2
 800290a:	3b84      	subs	r3, #132	; 0x84
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8002912:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002924:	4413      	add	r3, r2
 8002926:	3b80      	subs	r3, #128	; 0x80
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 800292e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002932:	1e5a      	subs	r2, r3, #1
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002940:	4413      	add	r3, r2
 8002942:	3b7c      	subs	r3, #124	; 0x7c
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800294a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800294e:	1e5a      	subs	r2, r3, #1
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800295c:	4413      	add	r3, r2
 800295e:	3b7a      	subs	r3, #122	; 0x7a
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8002966:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800296a:	1e5a      	subs	r2, r3, #1
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002978:	4413      	add	r3, r2
 800297a:	3b78      	subs	r3, #120	; 0x78
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8002982:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002994:	4413      	add	r3, r2
 8002996:	3b74      	subs	r3, #116	; 0x74
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 800299e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80029a2:	1e5a      	subs	r2, r3, #1
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80029b0:	4413      	add	r3, r2
 80029b2:	3b70      	subs	r3, #112	; 0x70
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80029ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80029be:	1e5a      	subs	r2, r3, #1
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80029cc:	4413      	add	r3, r2
 80029ce:	3b6c      	subs	r3, #108	; 0x6c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80029d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80029d8:	1e5a      	subs	r2, r3, #1
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80029e6:	4413      	add	r3, r2
 80029e8:	3b68      	subs	r3, #104	; 0x68
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80029f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80029f4:	1e5a      	subs	r2, r3, #1
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002a02:	4413      	add	r3, r2
 8002a04:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8002a08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a0c:	3204      	adds	r2, #4
 8002a0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a12:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002a16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8002a20:	e57b      	b.n	800251a <lfs_dir_traverse+0x2fe>
    } else {
        return res;
 8002a22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	37f4      	adds	r7, #244	; 0xf4
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	bf00      	nop

08002a30 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b09f      	sub	sp, #124	; 0x7c
 8002a34:	af04      	add	r7, sp, #16
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d207      	bcs.n	8002a62 <lfs_dir_fetchmatch+0x32>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 8002a62:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002a66:	e33a      	b.n	80030de <lfs_dir_fetchmatch+0x6ae>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002a68:	2300      	movs	r3, #0
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8002a74:	2300      	movs	r3, #0
 8002a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a78:	e056      	b.n	8002b28 <lfs_dir_fetchmatch+0xf8>
        int err = lfs_bd_read(lfs,
 8002a7a:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8002a84:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002a86:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002a8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a8c:	0092      	lsls	r2, r2, #2
 8002a8e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8002a90:	2104      	movs	r1, #4
 8002a92:	9103      	str	r1, [sp, #12]
 8002a94:	9202      	str	r2, [sp, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	9201      	str	r2, [sp, #4]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f7fe fa6a 	bl	8000f7c <lfs_bd_read>
 8002aa8:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8002aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe f9f7 	bl	8000eac <lfs_fromle32>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002ac8:	440b      	add	r3, r1
 8002aca:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <lfs_dir_fetchmatch+0xb0>
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002ada:	d001      	beq.n	8002ae0 <lfs_dir_fetchmatch+0xb0>
            return err;
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	e2fe      	b.n	80030de <lfs_dir_fetchmatch+0x6ae>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002ae6:	d01c      	beq.n	8002b22 <lfs_dir_fetchmatch+0xf2>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002af0:	4413      	add	r3, r2
 8002af2:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af8:	3301      	adds	r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	bfb8      	it	lt
 8002b02:	425b      	neglt	r3, r3
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f7fe f9bd 	bl	8000e92 <lfs_scmp>
 8002b18:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	dd01      	ble.n	8002b22 <lfs_dir_fetchmatch+0xf2>
            r = i;
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b20:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8002b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b24:	3301      	adds	r3, #1
 8002b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	dda5      	ble.n	8002a7a <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	bfb8      	it	lt
 8002b38:	425b      	neglt	r3, r3
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8002b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b48:	3301      	adds	r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	bfb8      	it	lt
 8002b52:	425b      	neglt	r3, r3
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	bfb8      	it	lt
 8002b6a:	425b      	neglt	r3, r3
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002b72:	4413      	add	r3, r2
 8002b74:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002b82:	2300      	movs	r3, #0
 8002b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b86:	e2a4      	b.n	80030d2 <lfs_dir_fetchmatch+0x6a2>
        lfs_off_t off = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b90:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002b98:	4aad      	ldr	r2, [pc, #692]	; (8002e50 <lfs_dir_fetchmatch+0x420>)
 8002b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ba2:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8002bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bae:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe f983 	bl	8000ec0 <lfs_tole32>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f004 f94e 	bl	8006e6c <lfs_crc>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe f967 	bl	8000eac <lfs_fromle32>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002be4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002be6:	f7fe fe15 	bl	8001814 <lfs_tag_dsize>
 8002bea:	4602      	mov	r2, r0
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	4413      	add	r3, r2
 8002bf0:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8002bf2:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002bf8:	69d8      	ldr	r0, [r3, #28]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	9203      	str	r2, [sp, #12]
 8002c02:	f107 0220 	add.w	r2, r7, #32
 8002c06:	9202      	str	r2, [sp, #8]
 8002c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c0a:	9201      	str	r2, [sp, #4]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	4603      	mov	r3, r0
 8002c10:	460a      	mov	r2, r1
 8002c12:	2100      	movs	r1, #0
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7fe f9b1 	bl	8000f7c <lfs_bd_read>
 8002c1a:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <lfs_dir_fetchmatch+0x206>
                if (err == LFS_ERR_CORRUPT) {
 8002c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c24:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c28:	d103      	bne.n	8002c32 <lfs_dir_fetchmatch+0x202>
                    // can't continue?
                    dir->erased = false;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	759a      	strb	r2, [r3, #22]
                    break;
 8002c30:	e1d6      	b.n	8002fe0 <lfs_dir_fetchmatch+0x5b0>
                }
                return err;
 8002c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c34:	e253      	b.n	80030de <lfs_dir_fetchmatch+0x6ae>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f107 0120 	add.w	r1, r7, #32
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 f914 	bl	8006e6c <lfs_crc>
 8002c44:	4603      	mov	r3, r0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe f944 	bl	8000ed8 <lfs_frombe32>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c54:	4053      	eors	r3, r2
 8002c56:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fd69 	bl	8001732 <lfs_tag_isvalid>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f083 0301 	eor.w	r3, r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01b      	beq.n	8002ca4 <lfs_dir_fetchmatch+0x274>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8002c6c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002c6e:	f7fe fd7f 	bl	8001770 <lfs_tag_type1>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002c78:	d10d      	bne.n	8002c96 <lfs_dir_fetchmatch+0x266>
                        dir->off % lfs->cfg->prog_size == 0);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c82:	6992      	ldr	r2, [r2, #24]
 8002c84:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c88:	fb02 f201 	mul.w	r2, r2, r1
 8002c8c:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <lfs_dir_fetchmatch+0x266>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <lfs_dir_fetchmatch+0x268>
 8002c96:	2300      	movs	r3, #0
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	759a      	strb	r2, [r3, #22]
                break;
 8002ca2:	e19d      	b.n	8002fe0 <lfs_dir_fetchmatch+0x5b0>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fdb4 	bl	8001814 <lfs_tag_dsize>
 8002cac:	4602      	mov	r2, r0
 8002cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb0:	441a      	add	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d903      	bls.n	8002cc4 <lfs_dir_fetchmatch+0x294>
                dir->erased = false;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	759a      	strb	r2, [r3, #22]
                break;
 8002cc2:	e18d      	b.n	8002fe0 <lfs_dir_fetchmatch+0x5b0>
            }

            ptag = tag;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fd50 	bl	8001770 <lfs_tag_type1>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002cd6:	d164      	bne.n	8002da2 <lfs_dir_fetchmatch+0x372>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8002cd8:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002cde:	69dc      	ldr	r4, [r3, #28]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ce6:	3204      	adds	r2, #4
 8002ce8:	2104      	movs	r1, #4
 8002cea:	9103      	str	r1, [sp, #12]
 8002cec:	f107 011c 	add.w	r1, r7, #28
 8002cf0:	9102      	str	r1, [sp, #8]
 8002cf2:	9201      	str	r2, [sp, #4]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7fe f93d 	bl	8000f7c <lfs_bd_read>
 8002d02:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8002d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <lfs_dir_fetchmatch+0x2ee>
                    if (err == LFS_ERR_CORRUPT) {
 8002d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002d10:	d103      	bne.n	8002d1a <lfs_dir_fetchmatch+0x2ea>
                        dir->erased = false;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2200      	movs	r2, #0
 8002d16:	759a      	strb	r2, [r3, #22]
                        break;
 8002d18:	e162      	b.n	8002fe0 <lfs_dir_fetchmatch+0x5b0>
                    }
                    return err;
 8002d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8002d1c:	e1df      	b.n	80030de <lfs_dir_fetchmatch+0x6ae>
                }
                dcrc = lfs_fromle32(dcrc);
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe f8c3 	bl	8000eac <lfs_fromle32>
 8002d26:	4603      	mov	r3, r0
 8002d28:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d003      	beq.n	8002d3a <lfs_dir_fetchmatch+0x30a>
                    dir->erased = false;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2200      	movs	r2, #0
 8002d36:	759a      	strb	r2, [r3, #22]
                    break;
 8002d38:	e152      	b.n	8002fe0 <lfs_dir_fetchmatch+0x5b0>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe fd35 	bl	80017ac <lfs_tag_chunk>
 8002d42:	4603      	mov	r3, r0
 8002d44:	07db      	lsls	r3, r3, #31
 8002d46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d48:	4053      	eors	r3, r2
 8002d4a:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002d54:	2204      	movs	r2, #4
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 f888 	bl	8006e6c <lfs_crc>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d64:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fd53 	bl	8001814 <lfs_tag_dsize>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d72:	441a      	add	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d7c:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002d84:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002d98:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002da0:	e720      	b.n	8002be4 <lfs_dir_fetchmatch+0x1b4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8002da2:	2304      	movs	r3, #4
 8002da4:	647b      	str	r3, [r7, #68]	; 0x44
 8002da6:	e02f      	b.n	8002e08 <lfs_dir_fetchmatch+0x3d8>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8002da8:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002dae:	69dc      	ldr	r4, [r3, #28]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002db8:	440a      	add	r2, r1
 8002dba:	2101      	movs	r1, #1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	f107 011b 	add.w	r1, r7, #27
 8002dc2:	9102      	str	r1, [sp, #8]
 8002dc4:	9201      	str	r2, [sp, #4]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4623      	mov	r3, r4
 8002dca:	4602      	mov	r2, r0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7fe f8d4 	bl	8000f7c <lfs_bd_read>
 8002dd4:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <lfs_dir_fetchmatch+0x3c0>
                    if (err == LFS_ERR_CORRUPT) {
 8002ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dde:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002de2:	d103      	bne.n	8002dec <lfs_dir_fetchmatch+0x3bc>
                        dir->erased = false;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2200      	movs	r2, #0
 8002de8:	759a      	strb	r2, [r3, #22]
 8002dea:	e015      	b.n	8002e18 <lfs_dir_fetchmatch+0x3e8>
                        break;
                    }
                    return err;
 8002dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8002dee:	e176      	b.n	80030de <lfs_dir_fetchmatch+0x6ae>
                }

                crc = lfs_crc(crc, &dat, 1);
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f107 011b 	add.w	r1, r7, #27
 8002df6:	2201      	movs	r2, #1
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f004 f837 	bl	8006e6c <lfs_crc>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8002e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e04:	3301      	adds	r3, #1
 8002e06:	647b      	str	r3, [r7, #68]	; 0x44
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fd02 	bl	8001814 <lfs_tag_dsize>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d3c7      	bcc.n	8002da8 <lfs_dir_fetchmatch+0x378>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fca8 	bl	8001770 <lfs_tag_type1>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d116      	bne.n	8002e54 <lfs_dir_fetchmatch+0x424>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe fcd8 	bl	80017de <lfs_tag_id>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e36:	4293      	cmp	r3, r2
 8002e38:	f200 8086 	bhi.w	8002f48 <lfs_dir_fetchmatch+0x518>
                    tempcount = lfs_tag_id(tag) + 1;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fccd 	bl	80017de <lfs_tag_id>
 8002e44:	4603      	mov	r3, r0
 8002e46:	3301      	adds	r3, #1
 8002e48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e4c:	e07c      	b.n	8002f48 <lfs_dir_fetchmatch+0x518>
 8002e4e:	bf00      	nop
 8002e50:	0800f1b0 	.word	0x0800f1b0
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fc8a 	bl	8001770 <lfs_tag_type1>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e62:	d134      	bne.n	8002ece <lfs_dir_fetchmatch+0x49e>
                tempcount += lfs_tag_splice(tag);
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fcac 	bl	80017c4 <lfs_tag_splice>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e74:	4413      	add	r3, r2
 8002e76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e7c:	4b9a      	ldr	r3, [pc, #616]	; (80030e8 <lfs_dir_fetchmatch+0x6b8>)
 8002e7e:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002e80:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002e84:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d104      	bne.n	8002e98 <lfs_dir_fetchmatch+0x468>
                    tempbesttag |= 0x80000000;
 8002e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e96:	e057      	b.n	8002f48 <lfs_dir_fetchmatch+0x518>
                } else if (tempbesttag != -1 &&
 8002e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d053      	beq.n	8002f48 <lfs_dir_fetchmatch+0x518>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fc9b 	bl	80017de <lfs_tag_id>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461c      	mov	r4, r3
 8002eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fc95 	bl	80017de <lfs_tag_id>
 8002eb4:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002eb6:	429c      	cmp	r4, r3
 8002eb8:	d846      	bhi.n	8002f48 <lfs_dir_fetchmatch+0x518>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fc81 	bl	80017c4 <lfs_tag_splice>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	029a      	lsls	r2, r3, #10
 8002ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec8:	4413      	add	r3, r2
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ecc:	e03c      	b.n	8002f48 <lfs_dir_fetchmatch+0x518>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe fc4d 	bl	8001770 <lfs_tag_type1>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002edc:	d134      	bne.n	8002f48 <lfs_dir_fetchmatch+0x518>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe fc63 	bl	80017ac <lfs_tag_chunk>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8002ef8:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002efe:	69dc      	ldr	r4, [r3, #28]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f06:	3204      	adds	r2, #4
 8002f08:	2108      	movs	r1, #8
 8002f0a:	9103      	str	r1, [sp, #12]
 8002f0c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002f10:	9102      	str	r1, [sp, #8]
 8002f12:	9201      	str	r2, [sp, #4]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4623      	mov	r3, r4
 8002f18:	4602      	mov	r2, r0
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7fe f82d 	bl	8000f7c <lfs_bd_read>
 8002f22:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <lfs_dir_fetchmatch+0x50e>
                    if (err == LFS_ERR_CORRUPT) {
 8002f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002f30:	d103      	bne.n	8002f3a <lfs_dir_fetchmatch+0x50a>
                        dir->erased = false;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2200      	movs	r2, #0
 8002f36:	759a      	strb	r2, [r3, #22]
                        break;
 8002f38:	e052      	b.n	8002fe0 <lfs_dir_fetchmatch+0x5b0>
                    }
                    return err;
 8002f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3c:	e0cf      	b.n	80030de <lfs_dir_fetchmatch+0x6ae>
                }
                lfs_pair_fromle32(temptail);
 8002f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fbc1 	bl	80016ca <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002f48:	6a3a      	ldr	r2, [r7, #32]
 8002f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f4c:	405a      	eors	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f47f ae46 	bne.w	8002be4 <lfs_dir_fetchmatch+0x1b4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002f58:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002f5e:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8002f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f62:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	f107 0210 	add.w	r2, r7, #16
 8002f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f6e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002f72:	4798      	blx	r3
 8002f74:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8002f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	da09      	bge.n	8002f90 <lfs_dir_fetchmatch+0x560>
                    if (res == LFS_ERR_CORRUPT) {
 8002f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002f82:	d103      	bne.n	8002f8c <lfs_dir_fetchmatch+0x55c>
                        dir->erased = false;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2200      	movs	r2, #0
 8002f88:	759a      	strb	r2, [r3, #22]
 8002f8a:	e029      	b.n	8002fe0 <lfs_dir_fetchmatch+0x5b0>
                        break;
                    }
                    return res;
 8002f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8002f8e:	e0a6      	b.n	80030de <lfs_dir_fetchmatch+0x6ae>
                }

                if (res == LFS_CMP_EQ) {
 8002f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <lfs_dir_fetchmatch+0x56c>
                    // found a match
                    tempbesttag = tag;
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f9a:	e623      	b.n	8002be4 <lfs_dir_fetchmatch+0x1b4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa0:	405a      	eors	r2, r3
 8002fa2:	4b52      	ldr	r3, [pc, #328]	; (80030ec <lfs_dir_fetchmatch+0x6bc>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <lfs_dir_fetchmatch+0x582>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fb0:	e618      	b.n	8002be4 <lfs_dir_fetchmatch+0x1b4>
                } else if (res == LFS_CMP_GT &&
 8002fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	f47f ae15 	bne.w	8002be4 <lfs_dir_fetchmatch+0x1b4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe fc0e 	bl	80017de <lfs_tag_id>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	461c      	mov	r4, r3
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe fc08 	bl	80017de <lfs_tag_id>
 8002fce:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002fd0:	429c      	cmp	r4, r3
 8002fd2:	f63f ae07 	bhi.w	8002be4 <lfs_dir_fetchmatch+0x1b4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fde:	e601      	b.n	8002be4 <lfs_dir_fetchmatch+0x1b4>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d100      	bne.n	8002fea <lfs_dir_fetchmatch+0x5ba>
 8002fe8:	e05d      	b.n	80030a6 <lfs_dir_fetchmatch+0x676>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	333c      	adds	r3, #60	; 0x3c
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fc97 	bl	8001926 <lfs_gstate_hasmovehere>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d028      	beq.n	8003050 <lfs_dir_fetchmatch+0x620>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fbeb 	bl	80017de <lfs_tag_id>
 8003008:	4603      	mov	r3, r0
 800300a:	461c      	mov	r4, r3
 800300c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fbe5 	bl	80017de <lfs_tag_id>
 8003014:	4603      	mov	r3, r0
 8003016:	429c      	cmp	r4, r3
 8003018:	d104      	bne.n	8003024 <lfs_dir_fetchmatch+0x5f4>
                    besttag |= 0x80000000;
 800301a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800301c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003020:	667b      	str	r3, [r7, #100]	; 0x64
 8003022:	e015      	b.n	8003050 <lfs_dir_fetchmatch+0x620>
                } else if (besttag != -1 &&
 8003024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d011      	beq.n	8003050 <lfs_dir_fetchmatch+0x620>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fbd4 	bl	80017de <lfs_tag_id>
 8003036:	4603      	mov	r3, r0
 8003038:	461c      	mov	r4, r3
 800303a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe fbce 	bl	80017de <lfs_tag_id>
 8003042:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8003044:	429c      	cmp	r4, r3
 8003046:	d203      	bcs.n	8003050 <lfs_dir_fetchmatch+0x620>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8003048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800304a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800304e:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8003050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00f      	beq.n	8003076 <lfs_dir_fetchmatch+0x646>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8003056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe fbc0 	bl	80017de <lfs_tag_id>
 800305e:	4603      	mov	r3, r0
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	8a9b      	ldrh	r3, [r3, #20]
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f7fd feb4 	bl	8000dd6 <lfs_min>
 800306e:	4603      	mov	r3, r0
 8003070:	b29a      	uxth	r2, r3
 8003072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003074:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8003076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe fb5a 	bl	8001732 <lfs_tag_isvalid>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <lfs_dir_fetchmatch+0x658>
                return besttag;
 8003084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003086:	e02a      	b.n	80030de <lfs_dir_fetchmatch+0x6ae>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8003088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fba7 	bl	80017de <lfs_tag_id>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	8a9b      	ldrh	r3, [r3, #20]
 8003098:	429a      	cmp	r2, r3
 800309a:	d202      	bcs.n	80030a2 <lfs_dir_fetchmatch+0x672>
                return LFS_ERR_NOENT;
 800309c:	f06f 0301 	mvn.w	r3, #1
 80030a0:	e01d      	b.n	80030de <lfs_dir_fetchmatch+0x6ae>
            } else {
                return 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e01b      	b.n	80030de <lfs_dir_fetchmatch+0x6ae>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe fa8b 	bl	80015c4 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 80030ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b0:	3301      	adds	r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	bfb8      	it	lt
 80030ba:	425b      	neglt	r3, r3
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80030c2:	4413      	add	r3, r2
 80030c4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 80030cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ce:	3301      	adds	r3, #1
 80030d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80030d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f77f ad57 	ble.w	8002b88 <lfs_dir_fetchmatch+0x158>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 80030da:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 80030de:	4618      	mov	r0, r3
 80030e0:	376c      	adds	r7, #108	; 0x6c
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	000ffc00 	.word	0x000ffc00
 80030ec:	7ffffc00 	.word	0x7ffffc00

080030f0 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af04      	add	r7, sp, #16
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80030fc:	2300      	movs	r3, #0
 80030fe:	9303      	str	r3, [sp, #12]
 8003100:	2300      	movs	r3, #0
 8003102:	9302      	str	r3, [sp, #8]
 8003104:	2300      	movs	r3, #0
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff fc8a 	bl	8002a30 <lfs_dir_fetchmatch>
 800311c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <lfs_dir_getgstate+0x5c>)
 800313c:	4a12      	ldr	r2, [pc, #72]	; (8003188 <lfs_dir_getgstate+0x60>)
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f7fe ff19 	bl	8001f78 <lfs_dir_get>
 8003146:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	da05      	bge.n	800315a <lfs_dir_getgstate+0x32>
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f113 0f02 	cmn.w	r3, #2
 8003154:	d001      	beq.n	800315a <lfs_dir_getgstate+0x32>
        return res;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	e00f      	b.n	800317a <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f113 0f02 	cmn.w	r3, #2
 8003160:	d00a      	beq.n	8003178 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8003162:	f107 0310 	add.w	r3, r7, #16
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fbfd 	bl	8001966 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800316c:	f107 0310 	add.w	r3, r7, #16
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fe fb62 	bl	800183c <lfs_gstate_xor>
    }

    return 0;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	7ff0000c 	.word	0x7ff0000c
 8003188:	7ff00000 	.word	0x7ff00000

0800318c <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b08f      	sub	sp, #60	; 0x3c
 8003190:	af04      	add	r7, sp, #16
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	689c      	ldr	r4, [r3, #8]
 80031aa:	68b8      	ldr	r0, [r7, #8]
 80031ac:	f7fe fb26 	bl	80017fc <lfs_tag_size>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4619      	mov	r1, r3
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7fd fe0e 	bl	8000dd6 <lfs_min>
 80031ba:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 80031bc:	6a3c      	ldr	r4, [r7, #32]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	6852      	ldr	r2, [r2, #4]
 80031c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c8:	6849      	ldr	r1, [r1, #4]
 80031ca:	69b8      	ldr	r0, [r7, #24]
 80031cc:	9003      	str	r0, [sp, #12]
 80031ce:	9102      	str	r1, [sp, #8]
 80031d0:	9201      	str	r2, [sp, #4]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4622      	mov	r2, r4
 80031d8:	2100      	movs	r1, #0
 80031da:	6a38      	ldr	r0, [r7, #32]
 80031dc:	f7fe f812 	bl	8001204 <lfs_bd_cmp>
 80031e0:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <lfs_dir_find_match+0x60>
        return res;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	e014      	b.n	8003216 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	689c      	ldr	r4, [r3, #8]
 80031f0:	68b8      	ldr	r0, [r7, #8]
 80031f2:	f7fe fb03 	bl	80017fc <lfs_tag_size>
 80031f6:	4603      	mov	r3, r0
 80031f8:	429c      	cmp	r4, r3
 80031fa:	d00b      	beq.n	8003214 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	689c      	ldr	r4, [r3, #8]
 8003200:	68b8      	ldr	r0, [r7, #8]
 8003202:	f7fe fafb 	bl	80017fc <lfs_tag_size>
 8003206:	4603      	mov	r3, r0
 8003208:	429c      	cmp	r4, r3
 800320a:	d201      	bcs.n	8003210 <lfs_dir_find_match+0x84>
 800320c:	2301      	movs	r3, #1
 800320e:	e002      	b.n	8003216 <lfs_dir_find_match+0x8a>
 8003210:	2302      	movs	r3, #2
 8003212:	e000      	b.n	8003216 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	372c      	adds	r7, #44	; 0x2c
 800321a:	46bd      	mov	sp, r7
 800321c:	bd90      	pop	{r4, r7, pc}
	...

08003220 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b093      	sub	sp, #76	; 0x4c
 8003224:	af04      	add	r7, sp, #16
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003240:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8003242:	4b6e      	ldr	r3, [pc, #440]	; (80033fc <lfs_dir_find+0x1dc>)
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a1a      	ldr	r2, [r3, #32]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8003256:	496a      	ldr	r1, [pc, #424]	; (8003400 <lfs_dir_find+0x1e0>)
 8003258:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800325a:	f00b f905 	bl	800e468 <strspn>
 800325e:	4602      	mov	r2, r0
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	4413      	add	r3, r2
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8003266:	4966      	ldr	r1, [pc, #408]	; (8003400 <lfs_dir_find+0x1e0>)
 8003268:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800326a:	f00b f8ec 	bl	800e446 <strcspn>
 800326e:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <lfs_dir_find+0x62>
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	4b62      	ldr	r3, [pc, #392]	; (8003404 <lfs_dir_find+0x1e4>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d00a      	beq.n	8003298 <lfs_dir_find+0x78>
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	2b02      	cmp	r3, #2
 8003286:	d10c      	bne.n	80032a2 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8003288:	2202      	movs	r2, #2
 800328a:	495f      	ldr	r1, [pc, #380]	; (8003408 <lfs_dir_find+0x1e8>)
 800328c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800328e:	f00a fd05 	bl	800dc9c <memcmp>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <lfs_dir_find+0x82>
            name += namelen;
 8003298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	4413      	add	r3, r2
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 80032a0:	e7d9      	b.n	8003256 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 80032a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	4413      	add	r3, r2
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 80032aa:	2301      	movs	r3, #1
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 80032ae:	4954      	ldr	r1, [pc, #336]	; (8003400 <lfs_dir_find+0x1e0>)
 80032b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032b2:	f00b f8d9 	bl	800e468 <strspn>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	4413      	add	r3, r2
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 80032be:	4950      	ldr	r1, [pc, #320]	; (8003400 <lfs_dir_find+0x1e0>)
 80032c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032c2:	f00b f8c0 	bl	800e446 <strcspn>
 80032c6:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01d      	beq.n	800330a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d112      	bne.n	80032fa <lfs_dir_find+0xda>
 80032d4:	2202      	movs	r2, #2
 80032d6:	494c      	ldr	r1, [pc, #304]	; (8003408 <lfs_dir_find+0x1e8>)
 80032d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032da:	f00a fcdf 	bl	800dc9c <memcmp>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <lfs_dir_find+0xda>
                depth -= 1;
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 80032f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	4413      	add	r3, r2
 80032f6:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 80032f8:	e7ad      	b.n	8003256 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	3301      	adds	r3, #1
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8003300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	4413      	add	r3, r2
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8003308:	e7d1      	b.n	80032ae <lfs_dir_find+0x8e>
                break;
 800330a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <lfs_dir_find+0xf8>
            return tag;
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	e06c      	b.n	80033f2 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800331c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe fa34 	bl	800178e <lfs_tag_type3>
 8003326:	4603      	mov	r3, r0
 8003328:	2b02      	cmp	r3, #2
 800332a:	d002      	beq.n	8003332 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800332c:	f06f 0313 	mvn.w	r3, #19
 8003330:	e05f      	b.n	80033f2 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe fa52 	bl	80017de <lfs_tag_id>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003342:	429a      	cmp	r2, r3
 8003344:	d01c      	beq.n	8003380 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe fa48 	bl	80017de <lfs_tag_id>
 800334e:	4603      	mov	r3, r0
 8003350:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003356:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800335e:	9200      	str	r2, [sp, #0]
 8003360:	4a2a      	ldr	r2, [pc, #168]	; (800340c <lfs_dir_find+0x1ec>)
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7fe fe07 	bl	8001f78 <lfs_dir_get>
 800336a:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b00      	cmp	r3, #0
 8003370:	da01      	bge.n	8003376 <lfs_dir_find+0x156>
                return res;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	e03d      	b.n	80033f2 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3318      	adds	r3, #24
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe f9a5 	bl	80016ca <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8003386:	212f      	movs	r1, #47	; 0x2f
 8003388:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800338a:	f00b f84f 	bl	800e42c <strchr>
 800338e:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <lfs_dir_find+0x178>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	e000      	b.n	800339a <lfs_dir_find+0x17a>
 8003398:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	613a      	str	r2, [r7, #16]
 800339e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a0:	617a      	str	r2, [r7, #20]
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80033a6:	f107 0210 	add.w	r2, r7, #16
 80033aa:	9203      	str	r2, [sp, #12]
 80033ac:	4a18      	ldr	r2, [pc, #96]	; (8003410 <lfs_dir_find+0x1f0>)
 80033ae:	9202      	str	r2, [sp, #8]
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80033ba:	4622      	mov	r2, r4
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7ff fb36 	bl	8002a30 <lfs_dir_fetchmatch>
 80033c4:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da01      	bge.n	80033d0 <lfs_dir_find+0x1b0>
                return tag;
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	e010      	b.n	80033f2 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80033d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	4413      	add	r3, r2
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 80033de:	e73a      	b.n	8003256 <lfs_dir_find+0x36>
            if (!dir->split) {
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	7ddb      	ldrb	r3, [r3, #23]
 80033e4:	f083 0301 	eor.w	r3, r3, #1
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0c8      	beq.n	8003380 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80033ee:	f06f 0301 	mvn.w	r3, #1
    }
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	373c      	adds	r7, #60	; 0x3c
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd90      	pop	{r4, r7, pc}
 80033fa:	bf00      	nop
 80033fc:	002ffc00 	.word	0x002ffc00
 8003400:	0800f1b8 	.word	0x0800f1b8
 8003404:	0800f1bc 	.word	0x0800f1bc
 8003408:	0800f1c0 	.word	0x0800f1c0
 800340c:	700ffc00 	.word	0x700ffc00
 8003410:	0800318d 	.word	0x0800318d

08003414 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b08b      	sub	sp, #44	; 0x2c
 8003418:	af04      	add	r7, sp, #16
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f103 0010 	add.w	r0, r3, #16
 8003428:	68fc      	ldr	r4, [r7, #12]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	6852      	ldr	r2, [r2, #4]
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	9103      	str	r1, [sp, #12]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	9102      	str	r1, [sp, #8]
 800343a:	9201      	str	r2, [sp, #4]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2300      	movs	r3, #0
 8003440:	4622      	mov	r2, r4
 8003442:	4601      	mov	r1, r0
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7fd ffdf 	bl	8001408 <lfs_bd_prog>
 800344a:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <lfs_dir_commitprog+0x42>
        return err;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	e010      	b.n	8003478 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4618      	mov	r0, r3
 8003460:	f003 fd04 	bl	8006e6c <lfs_crc>
 8003464:	4602      	mov	r2, r0
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	441a      	add	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	605a      	str	r2, [r3, #4]
    return 0;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}

08003480 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b08f      	sub	sp, #60	; 0x3c
 8003484:	af04      	add	r7, sp, #16
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe f9c0 	bl	8001814 <lfs_tag_dsize>
 8003494:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	441a      	add	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d902      	bls.n	80034ac <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80034a6:	f06f 031b 	mvn.w	r3, #27
 80034aa:	e065      	b.n	8003578 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4053      	eors	r3, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd fd18 	bl	8000eee <lfs_tobe32>
 80034be:	4603      	mov	r3, r0
 80034c0:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80034c2:	f107 0214 	add.w	r2, r7, #20
 80034c6:	2304      	movs	r3, #4
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff ffa2 	bl	8003414 <lfs_dir_commitprog>
 80034d0:	61f8      	str	r0, [r7, #28]
    if (err) {
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <lfs_dir_commitattr+0x5c>
        return err;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	e04d      	b.n	8003578 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db0c      	blt.n	80034fc <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	3b04      	subs	r3, #4
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f7ff ff92 	bl	8003414 <lfs_dir_commitprog>
 80034f0:	61f8      	str	r0, [r7, #28]
        if (err) {
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d039      	beq.n	800356c <lfs_dir_commitattr+0xec>
            return err;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	e03d      	b.n	8003578 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003500:	2300      	movs	r3, #0
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	e02d      	b.n	8003562 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003506:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8003508:	6a3a      	ldr	r2, [r7, #32]
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800350e:	1f1c      	subs	r4, r3, #4
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	440a      	add	r2, r1
 800351c:	2101      	movs	r1, #1
 800351e:	9103      	str	r1, [sp, #12]
 8003520:	f107 0113 	add.w	r1, r7, #19
 8003524:	9102      	str	r1, [sp, #8]
 8003526:	9201      	str	r2, [sp, #4]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4623      	mov	r3, r4
 800352c:	4602      	mov	r2, r0
 800352e:	2100      	movs	r1, #0
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7fd fd23 	bl	8000f7c <lfs_bd_read>
 8003536:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <lfs_dir_commitattr+0xc2>
                return err;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	e01a      	b.n	8003578 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8003542:	f107 0213 	add.w	r2, r7, #19
 8003546:	2301      	movs	r3, #1
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff62 	bl	8003414 <lfs_dir_commitprog>
 8003550:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <lfs_dir_commitattr+0xdc>
                return err;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	e00d      	b.n	8003578 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	3301      	adds	r3, #1
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	3b04      	subs	r3, #4
 8003566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003568:	429a      	cmp	r2, r3
 800356a:	d3cc      	bcc.n	8003506 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	609a      	str	r2, [r3, #8]
    return 0;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	372c      	adds	r7, #44	; 0x2c
 800357c:	46bd      	mov	sp, r7
 800357e:	bd90      	pop	{r4, r7, pc}

08003580 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b097      	sub	sp, #92	; 0x5c
 8003584:	af04      	add	r7, sp, #16
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f7fd fc3e 	bl	8000e1c <lfs_alignup>
 80035a0:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80035aa:	e0a6      	b.n	80036fa <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 80035b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fc09 	bl	8000dd6 <lfs_min>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	4413      	add	r3, r2
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 80035cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d206      	bcs.n	80035e2 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	3b08      	subs	r3, #8
 80035d8:	4619      	mov	r1, r3
 80035da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80035dc:	f7fd fbfb 	bl	8000dd6 <lfs_min>
 80035e0:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2204      	movs	r2, #4
 80035f0:	9203      	str	r2, [sp, #12]
 80035f2:	f107 0214 	add.w	r2, r7, #20
 80035f6:	9202      	str	r2, [sp, #8]
 80035f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035fa:	9201      	str	r2, [sp, #4]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2304      	movs	r3, #4
 8003600:	460a      	mov	r2, r1
 8003602:	2100      	movs	r1, #0
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7fd fcb9 	bl	8000f7c <lfs_bd_read>
 800360a:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <lfs_dir_commitcrc+0x9e>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003618:	d001      	beq.n	800361e <lfs_dir_commitcrc+0x9e>
            return err;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	e0e8      	b.n	80037f0 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	4618      	mov	r0, r3
 8003622:	f7fd fc59 	bl	8000ed8 <lfs_frombe32>
 8003626:	4603      	mov	r3, r0
 8003628:	43db      	mvns	r3, r3
 800362a:	0fdb      	lsrs	r3, r3, #31
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8003636:	7efb      	ldrb	r3, [r7, #27]
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	051a      	lsls	r2, r3, #20
 800363e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	1acb      	subs	r3, r1, r3
 8003644:	4313      	orrs	r3, r2
 8003646:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800364a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800364e:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	4053      	eors	r3, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd fc48 	bl	8000eee <lfs_tobe32>
 800365e:	4603      	mov	r3, r0
 8003660:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f107 010c 	add.w	r1, r7, #12
 800366a:	2204      	movs	r2, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f003 fbfd 	bl	8006e6c <lfs_crc>
 8003672:	4602      	mov	r2, r0
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd fc1f 	bl	8000ec0 <lfs_tole32>
 8003682:	4603      	mov	r3, r0
 8003684:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f103 0010 	add.w	r0, r3, #16
 800368c:	687c      	ldr	r4, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	6852      	ldr	r2, [r2, #4]
 8003696:	2108      	movs	r1, #8
 8003698:	9103      	str	r1, [sp, #12]
 800369a:	f107 010c 	add.w	r1, r7, #12
 800369e:	9102      	str	r1, [sp, #8]
 80036a0:	9201      	str	r2, [sp, #4]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2300      	movs	r3, #0
 80036a6:	4622      	mov	r2, r4
 80036a8:	4601      	mov	r1, r0
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd feac 	bl	8001408 <lfs_bd_prog>
 80036b0:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <lfs_dir_commitcrc+0x13c>
            return err;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	e099      	b.n	80037f0 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80036bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe f892 	bl	80017fc <lfs_tag_size>
 80036d8:	4603      	mov	r3, r0
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	441a      	add	r2, r3
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80036e6:	7efb      	ldrb	r3, [r7, #27]
 80036e8:	07da      	lsls	r2, r3, #31
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	405a      	eors	r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295
 80036f8:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003700:	429a      	cmp	r2, r3
 8003702:	f63f af53 	bhi.w	80035ac <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f103 0110 	add.w	r1, r3, #16
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	2300      	movs	r3, #0
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fd fe45 	bl	80013a0 <lfs_bd_sync>
 8003716:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <lfs_dir_commitcrc+0x1a2>
        return err;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	e066      	b.n	80037f0 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8003728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800372c:	e05b      	b.n	80037e6 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003738:	e030      	b.n	800379c <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800373a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800373c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373e:	429a      	cmp	r2, r3
 8003740:	d106      	bne.n	8003750 <lfs_dir_commitcrc+0x1d0>
 8003742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003746:	429a      	cmp	r2, r3
 8003748:	d002      	beq.n	8003750 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800374a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800374e:	e04f      	b.n	80037f0 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003750:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8003752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003758:	1d18      	adds	r0, r3, #4
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	9203      	str	r2, [sp, #12]
 8003762:	f107 020b 	add.w	r2, r7, #11
 8003766:	9202      	str	r2, [sp, #8]
 8003768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376a:	9201      	str	r2, [sp, #4]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	4603      	mov	r3, r0
 8003770:	460a      	mov	r2, r1
 8003772:	2100      	movs	r1, #0
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fd fc01 	bl	8000f7c <lfs_bd_read>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <lfs_dir_commitcrc+0x206>
                return err;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	e034      	b.n	80037f0 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8003786:	f107 030b 	add.w	r3, r7, #11
 800378a:	2201      	movs	r2, #1
 800378c:	4619      	mov	r1, r3
 800378e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003790:	f003 fb6c 	bl	8006e6c <lfs_crc>
 8003794:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	3301      	adds	r3, #1
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379e:	3304      	adds	r3, #4
 80037a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d3c9      	bcc.n	800373a <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 80037ac:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80037b0:	e01e      	b.n	80037f0 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 80037b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd fb0a 	bl	8000dd6 <lfs_min>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	4413      	add	r3, r2
 80037c8:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 80037ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d206      	bcs.n	80037e0 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	3b08      	subs	r3, #8
 80037d6:	4619      	mov	r1, r3
 80037d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037da:	f7fd fafc 	bl	8000dd6 <lfs_min>
 80037de:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	3304      	adds	r3, #4
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80037e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d39f      	bcc.n	800372e <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	374c      	adds	r7, #76	; 0x4c
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd90      	pop	{r4, r7, pc}

080037f8 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af04      	add	r7, sp, #16
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e016      	b.n	8003836 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3301      	adds	r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	bfb8      	it	lt
 8003814:	425b      	neglt	r3, r3
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	4413      	add	r3, r2
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe fa24 	bl	8001c6c <lfs_alloc>
 8003824:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <lfs_dir_alloc+0x38>
            return err;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	e058      	b.n	80038e2 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3301      	adds	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b01      	cmp	r3, #1
 800383a:	dde5      	ble.n	8003808 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800384c:	2004      	movs	r0, #4
 800384e:	9003      	str	r0, [sp, #12]
 8003850:	9202      	str	r2, [sp, #8]
 8003852:	2200      	movs	r2, #0
 8003854:	9201      	str	r2, [sp, #4]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2304      	movs	r3, #4
 800385a:	460a      	mov	r2, r1
 800385c:	2100      	movs	r1, #0
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd fb8c 	bl	8000f7c <lfs_bd_read>
 8003864:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd fb1e 	bl	8000eac <lfs_fromle32>
 8003870:	4602      	mov	r2, r0
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <lfs_dir_alloc+0x90>
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003882:	d001      	beq.n	8003888 <lfs_dir_alloc+0x90>
        return err;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	e02c      	b.n	80038e2 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	dd0e      	ble.n	80038b0 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	3301      	adds	r3, #1
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7fd fab9 	bl	8000e1c <lfs_alignup>
 80038aa:	4602      	mov	r2, r0
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2204      	movs	r2, #4
 80038b4:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2200      	movs	r2, #0
 80038c2:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ca:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	f04f 32ff 	mov.w	r2, #4294967295
 80038d2:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2200      	movs	r2, #0
 80038d8:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b092      	sub	sp, #72	; 0x48
 80038ee:	af04      	add	r7, sp, #16
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80038f8:	f107 0310 	add.w	r3, r7, #16
 80038fc:	4619      	mov	r1, r3
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff ff7a 	bl	80037f8 <lfs_dir_alloc>
 8003904:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <lfs_dir_split+0x26>
        return err;
 800390c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390e:	e03c      	b.n	800398a <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	7ddb      	ldrb	r3, [r3, #23]
 8003914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003924:	f107 0110 	add.w	r1, r7, #16
 8003928:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800392c:	9302      	str	r3, [sp, #8]
 800392e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f879 	bl	8003a34 <lfs_dir_compact>
 8003942:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	2b00      	cmp	r3, #0
 8003948:	da01      	bge.n	800394e <lfs_dir_split+0x64>
        return res;
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	e01d      	b.n	800398a <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2201      	movs	r2, #1
 800395e:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3320      	adds	r3, #32
 8003966:	4619      	mov	r1, r3
 8003968:	4610      	mov	r0, r2
 800396a:	f7fd fe59 	bl	8001620 <lfs_pair_cmp>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <lfs_dir_split+0x9e>
 8003974:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3738      	adds	r7, #56	; 0x38
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80039a2:	68b8      	ldr	r0, [r7, #8]
 80039a4:	f7fd ff36 	bl	8001814 <lfs_tag_dsize>
 80039a8:	4602      	mov	r2, r0
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	441a      	add	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	601a      	str	r2, [r3, #0]
    return 0;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	6859      	ldr	r1, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	f7ff fd51 	bl	8003480 <lfs_dir_commitattr>
 80039de:	4603      	mov	r3, r0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	dd11      	ble.n	8003a20 <lfs_dir_needsrelocation+0x38>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	3301      	adds	r3, #1
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a08:	3201      	adds	r2, #1
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a12:	fb02 f201 	mul.w	r2, r2, r1
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <lfs_dir_needsrelocation+0x38>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <lfs_dir_needsrelocation+0x3a>
 8003a20:	2300      	movs	r3, #0
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
	...

08003a34 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b0a4      	sub	sp, #144	; 0x90
 8003a38:	af0a      	add	r7, sp, #40	; 0x28
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7ff ffcc 	bl	80039e8 <lfs_dir_needsrelocation>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003a60:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <lfs_dir_compact+0x52>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	657a      	str	r2, [r7, #84]	; 0x54
 8003a6e:	2201      	movs	r2, #1
 8003a70:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a72:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd fdd1 	bl	8001620 <lfs_pair_cmp>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f040 8155 	bne.w	8003d30 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <lfs_dir_compact+0x80>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab0:	3b08      	subs	r3, #8
 8003ab2:	e003      	b.n	8003abc <lfs_dir_compact+0x88>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003abc:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7fd fd4b 	bl	8001560 <lfs_bd_erase>
 8003aca:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d006      	beq.n	8003ae0 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003ad8:	f000 812c 	beq.w	8003d34 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ade:	e16c      	b.n	8003dba <lfs_dir_compact+0x386>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd f9eb 	bl	8000ec0 <lfs_tole32>
 8003aea:	4602      	mov	r2, r0
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003af6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003afa:	2304      	movs	r3, #4
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff fc89 	bl	8003414 <lfs_dir_commitprog>
 8003b02:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd f9cf 	bl	8000eac <lfs_fromle32>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	609a      	str	r2, [r3, #8]
            if (err) {
 8003b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8003b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003b20:	f000 810a 	beq.w	8003d38 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b26:	e148      	b.n	8003dba <lfs_dir_compact+0x386>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003b28:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003b2c:	425b      	negs	r3, r3
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	637a      	str	r2, [r7, #52]	; 0x34
 8003b36:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b3a:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8003b3c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b40:	9208      	str	r2, [sp, #32]
 8003b42:	4aa0      	ldr	r2, [pc, #640]	; (8003dc4 <lfs_dir_compact+0x390>)
 8003b44:	9207      	str	r2, [sp, #28]
 8003b46:	9306      	str	r3, [sp, #24]
 8003b48:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003b4c:	9305      	str	r3, [sp, #20]
 8003b4e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003b52:	9304      	str	r3, [sp, #16]
 8003b54:	2300      	movs	r3, #0
 8003b56:	9303      	str	r3, [sp, #12]
 8003b58:	4b9b      	ldr	r3, [pc, #620]	; (8003dc8 <lfs_dir_compact+0x394>)
 8003b5a:	9302      	str	r3, [sp, #8]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	2200      	movs	r2, #0
 8003b6a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7fe fb55 	bl	800221c <lfs_dir_traverse>
 8003b72:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8003b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8003b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b7c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003b80:	f000 80dc 	beq.w	8003d3c <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8003b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b86:	e118      	b.n	8003dba <lfs_dir_compact+0x386>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd fd2d 	bl	80015ec <lfs_pair_isnull>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f083 0301 	eor.w	r3, r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d022      	beq.n	8003be4 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3318      	adds	r3, #24
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fdab 	bl	80016fe <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	7ddb      	ldrb	r3, [r3, #23]
 8003bac:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003bb0:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003bb2:	4a86      	ldr	r2, [pc, #536]	; (8003dcc <lfs_dir_compact+0x398>)
 8003bb4:	431a      	orrs	r2, r3
                        dir->tail);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003bba:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff fc5e 	bl	8003480 <lfs_dir_commitattr>
 8003bc4:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	3318      	adds	r3, #24
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd fd7d 	bl	80016ca <lfs_pair_fromle32>
                if (err) {
 8003bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003bdc:	f000 80b0 	beq.w	8003d40 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be2:	e0ea      	b.n	8003dba <lfs_dir_compact+0x386>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003bf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003bf4:	f083 0301 	eor.w	r3, r3, #1
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d011      	beq.n	8003c22 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd fe16 	bl	800183c <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fd fe0d 	bl	800183c <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd fe04 	bl	800183c <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c44:	461a      	mov	r2, r3
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff fa6d 	bl	8003128 <lfs_dir_getgstate>
 8003c4e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <lfs_dir_compact+0x226>
                return err;
 8003c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c58:	e0af      	b.n	8003dba <lfs_dir_compact+0x386>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fd fe10 	bl	8001884 <lfs_gstate_iszero>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f083 0301 	eor.w	r3, r3, #1
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d016      	beq.n	8003c9e <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8003c70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fe96 	bl	80019a6 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c7e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003c82:	4a53      	ldr	r2, [pc, #332]	; (8003dd0 <lfs_dir_compact+0x39c>)
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f7ff fbfb 	bl	8003480 <lfs_dir_commitattr>
 8003c8a:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8003c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c94:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003c98:	d054      	beq.n	8003d44 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8003c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c9c:	e08d      	b.n	8003dba <lfs_dir_compact+0x386>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8003c9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff fc6b 	bl	8003580 <lfs_dir_commitcrc>
 8003caa:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8003cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003cb8:	d046      	beq.n	8003d48 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cbc:	e07d      	b.n	8003dba <lfs_dir_compact+0x386>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003cc4:	6992      	ldr	r2, [r2, #24]
 8003cc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cca:	fb02 f201 	mul.w	r2, r2, r1
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d006      	beq.n	8003ce2 <lfs_dir_compact+0x2ae>
 8003cd4:	4b3f      	ldr	r3, [pc, #252]	; (8003dd4 <lfs_dir_compact+0x3a0>)
 8003cd6:	4a40      	ldr	r2, [pc, #256]	; (8003dd8 <lfs_dir_compact+0x3a4>)
 8003cd8:	f240 714a 	movw	r1, #1866	; 0x74a
 8003cdc:	483f      	ldr	r0, [pc, #252]	; (8003ddc <lfs_dir_compact+0x3a8>)
 8003cde:	f009 ff73 	bl	800dbc8 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fd fc6d 	bl	80015c4 <lfs_pair_swap>
            dir->count = end - begin;
 8003cea:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003cee:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003d00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3348      	adds	r3, #72	; 0x48
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	605a      	str	r2, [r3, #4]
 8003d10:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d16:	f083 0301 	eor.w	r3, r3, #1
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d049      	beq.n	8003db4 <lfs_dir_compact+0x380>
                lfs->gdisk = lfs->gstate;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	333c      	adds	r3, #60	; 0x3c
 8003d26:	3230      	adds	r2, #48	; 0x30
 8003d28:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003d2e:	e041      	b.n	8003db4 <lfs_dir_compact+0x380>
        goto relocate;
 8003d30:	bf00      	nop
 8003d32:	e00a      	b.n	8003d4a <lfs_dir_compact+0x316>
                    goto relocate;
 8003d34:	bf00      	nop
 8003d36:	e008      	b.n	8003d4a <lfs_dir_compact+0x316>
                    goto relocate;
 8003d38:	bf00      	nop
 8003d3a:	e006      	b.n	8003d4a <lfs_dir_compact+0x316>
                    goto relocate;
 8003d3c:	bf00      	nop
 8003d3e:	e004      	b.n	8003d4a <lfs_dir_compact+0x316>
                        goto relocate;
 8003d40:	bf00      	nop
 8003d42:	e002      	b.n	8003d4a <lfs_dir_compact+0x316>
                        goto relocate;
 8003d44:	bf00      	nop
 8003d46:	e000      	b.n	8003d4a <lfs_dir_compact+0x316>
                    goto relocate;
 8003d48:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3310      	adds	r3, #16
 8003d54:	4619      	mov	r1, r3
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7fd f8ec 	bl	8000f34 <lfs_cache_drop>
        if (!tired) {
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	617a      	str	r2, [r7, #20]
 8003d62:	2201      	movs	r2, #1
 8003d64:	61ba      	str	r2, [r7, #24]
 8003d66:	f107 0214 	add.w	r2, r7, #20
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fd fc57 	bl	8001620 <lfs_pair_cmp>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <lfs_dir_compact+0x34a>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003d78:	f06f 031b 	mvn.w	r3, #27
 8003d7c:	e01d      	b.n	8003dba <lfs_dir_compact+0x386>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4619      	mov	r1, r3
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7fd ff71 	bl	8001c6c <lfs_alloc>
 8003d8a:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <lfs_dir_compact+0x378>
 8003d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d94:	f113 0f1c 	cmn.w	r3, #28
 8003d98:	d106      	bne.n	8003da8 <lfs_dir_compact+0x374>
 8003d9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003d9e:	f083 0301 	eor.w	r3, r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <lfs_dir_compact+0x378>
            return err;
 8003da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003daa:	e006      	b.n	8003dba <lfs_dir_compact+0x386>
        }

        tired = false;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8003db2:	e668      	b.n	8003a86 <lfs_dir_compact+0x52>
        break;
 8003db4:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003db6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3768      	adds	r7, #104	; 0x68
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	080039bf 	.word	0x080039bf
 8003dc8:	400ffc00 	.word	0x400ffc00
 8003dcc:	000ffc08 	.word	0x000ffc08
 8003dd0:	7ffffc0c 	.word	0x7ffffc0c
 8003dd4:	0800f1c4 	.word	0x0800f1c4
 8003dd8:	0800f6d4 	.word	0x0800f6d4
 8003ddc:	0800f0dc 	.word	0x0800f0dc

08003de0 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b097      	sub	sp, #92	; 0x5c
 8003de4:	af0a      	add	r7, sp, #40	; 0x28
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003dee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003df4:	e058      	b.n	8003ea8 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e00:	b292      	uxth	r2, r2
 8003e02:	4252      	negs	r2, r2
 8003e04:	b292      	uxth	r2, r2
 8003e06:	b212      	sxth	r2, r2
 8003e08:	f107 0118 	add.w	r1, r7, #24
 8003e0c:	9108      	str	r1, [sp, #32]
 8003e0e:	4969      	ldr	r1, [pc, #420]	; (8003fb4 <lfs_dir_splittingcompact+0x1d4>)
 8003e10:	9107      	str	r1, [sp, #28]
 8003e12:	9206      	str	r2, [sp, #24]
 8003e14:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003e18:	9205      	str	r2, [sp, #20]
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9303      	str	r3, [sp, #12]
 8003e20:	4b65      	ldr	r3, [pc, #404]	; (8003fb8 <lfs_dir_splittingcompact+0x1d8>)
 8003e22:	9302      	str	r3, [sp, #8]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e30:	2200      	movs	r2, #0
 8003e32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7fe f9f1 	bl	800221c <lfs_dir_traverse>
 8003e3a:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <lfs_dir_splittingcompact+0x66>
                return err;
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	e0b2      	b.n	8003fac <lfs_dir_splittingcompact+0x1cc>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8003e46:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2bfe      	cmp	r3, #254	; 0xfe
 8003e50:	d822      	bhi.n	8003e98 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	e003      	b.n	8003e78 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e74:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003e76:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003e7c:	6992      	ldr	r2, [r2, #24]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fc ffcb 	bl	8000e1c <lfs_alignup>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f7fc ffa3 	bl	8000dd6 <lfs_min>
 8003e90:	4602      	mov	r2, r0
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d20e      	bcs.n	8003eb6 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003e98:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea4:	4413      	add	r3, r2
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003ea8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d8a0      	bhi.n	8003df6 <lfs_dir_splittingcompact+0x16>
 8003eb4:	e000      	b.n	8003eb8 <lfs_dir_splittingcompact+0xd8>
                break;
 8003eb6:	bf00      	nop
        }

        if (split == begin) {
 8003eb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d01e      	beq.n	8003f00 <lfs_dir_splittingcompact+0x120>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003eca:	9202      	str	r2, [sp, #8]
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff fd06 	bl	80038ea <lfs_dir_split>
 8003ede:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <lfs_dir_splittingcompact+0x112>
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	f113 0f1c 	cmn.w	r3, #28
 8003eec:	d001      	beq.n	8003ef2 <lfs_dir_splittingcompact+0x112>
            return err;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	e05c      	b.n	8003fac <lfs_dir_splittingcompact+0x1cc>
        }

        if (err) {
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d105      	bne.n	8003f04 <lfs_dir_splittingcompact+0x124>
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
                    dir->pair[0], dir->pair[1]);
            break;
        } else {
            end = split;
 8003ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003efe:	e776      	b.n	8003dee <lfs_dir_splittingcompact+0xe>
            break;
 8003f00:	bf00      	nop
 8003f02:	e000      	b.n	8003f06 <lfs_dir_splittingcompact+0x126>
            break;
 8003f04:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff fd6d 	bl	80039e8 <lfs_dir_needsrelocation>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d03c      	beq.n	8003f8e <lfs_dir_splittingcompact+0x1ae>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	613a      	str	r2, [r7, #16]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	617a      	str	r2, [r7, #20]
 8003f1e:	f107 0210 	add.w	r2, r7, #16
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fd fb7b 	bl	8001620 <lfs_pair_cmp>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d12e      	bne.n	8003f8e <lfs_dir_splittingcompact+0x1ae>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f002 fec5 	bl	8006cc0 <lfs_fs_rawsize>
 8003f36:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da01      	bge.n	8003f42 <lfs_dir_splittingcompact+0x162>
            return size;
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	e034      	b.n	8003fac <lfs_dir_splittingcompact+0x1cc>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	085a      	lsrs	r2, r3, #1
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d91e      	bls.n	8003f8e <lfs_dir_splittingcompact+0x1ae>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003f50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f54:	9302      	str	r3, [sp, #8]
 8003f56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fcbf 	bl	80038ea <lfs_dir_split>
 8003f6c:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <lfs_dir_splittingcompact+0x1a0>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f113 0f1c 	cmn.w	r3, #28
 8003f7a:	d001      	beq.n	8003f80 <lfs_dir_splittingcompact+0x1a0>
                return err;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	e015      	b.n	8003fac <lfs_dir_splittingcompact+0x1cc>
            }

            if (err) {
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <lfs_dir_splittingcompact+0x1ae>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
            } else {
                end = begin;
 8003f86:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003f8e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f92:	9302      	str	r3, [sp, #8]
 8003f94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff fd45 	bl	8003a34 <lfs_dir_compact>
 8003faa:	4603      	mov	r3, r0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3734      	adds	r7, #52	; 0x34
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd90      	pop	{r4, r7, pc}
 8003fb4:	08003993 	.word	0x08003993
 8003fb8:	400ffc00 	.word	0x400ffc00

08003fbc <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003fbc:	b5b0      	push	{r4, r5, r7, lr}
 8003fbe:	b0a6      	sub	sp, #152	; 0x98
 8003fc0:	af0a      	add	r7, sp, #40	; 0x28
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	667b      	str	r3, [r7, #100]	; 0x64
 8003fd8:	e06d      	b.n	80040b6 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003fda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fd fbd2 	bl	800178e <lfs_tag_type3>
 8003fea:	4603      	mov	r3, r0
 8003fec:	461a      	mov	r2, r3
 8003fee:	f240 4301 	movw	r3, #1025	; 0x401
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d106      	bne.n	8004004 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	8a9b      	ldrh	r3, [r3, #20]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	829a      	strh	r2, [r3, #20]
 8004002:	e055      	b.n	80040b0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8004004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	4413      	add	r3, r2
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd fbbd 	bl	800178e <lfs_tag_type3>
 8004014:	4603      	mov	r3, r0
 8004016:	461a      	mov	r2, r3
 8004018:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800401c:	429a      	cmp	r2, r3
 800401e:	d114      	bne.n	800404a <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	8a9b      	ldrh	r3, [r3, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <lfs_dir_relocatingcommit+0x7a>
 8004028:	4ba4      	ldr	r3, [pc, #656]	; (80042bc <lfs_dir_relocatingcommit+0x300>)
 800402a:	4aa5      	ldr	r2, [pc, #660]	; (80042c0 <lfs_dir_relocatingcommit+0x304>)
 800402c:	f240 71e1 	movw	r1, #2017	; 0x7e1
 8004030:	48a4      	ldr	r0, [pc, #656]	; (80042c4 <lfs_dir_relocatingcommit+0x308>)
 8004032:	f009 fdc9 	bl	800dbc8 <__assert_func>
            dir->count -= 1;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	8a9b      	ldrh	r3, [r3, #20]
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8004048:	e032      	b.n	80040b0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800404a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	4413      	add	r3, r2
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fd fb8b 	bl	8001770 <lfs_tag_type1>
 800405a:	4603      	mov	r3, r0
 800405c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004060:	d126      	bne.n	80040b0 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8004062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	4413      	add	r3, r2
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8004072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	4413      	add	r3, r2
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8004082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	4413      	add	r3, r2
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7fd fb8d 	bl	80017ac <lfs_tag_chunk>
 8004092:	4603      	mov	r3, r0
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3318      	adds	r3, #24
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fd fb0d 	bl	80016ca <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80040b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040b2:	3301      	adds	r3, #1
 80040b4:	667b      	str	r3, [r7, #100]	; 0x64
 80040b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040bc:	429a      	cmp	r2, r3
 80040be:	db8c      	blt.n	8003fda <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80040c0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d02b      	beq.n	8004120 <lfs_dir_relocatingcommit+0x164>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	8a9b      	ldrh	r3, [r3, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d127      	bne.n	8004120 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80040d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d106      	bne.n	80040e6 <lfs_dir_relocatingcommit+0x12a>
 80040d8:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <lfs_dir_relocatingcommit+0x30c>)
 80040da:	4a79      	ldr	r2, [pc, #484]	; (80042c0 <lfs_dir_relocatingcommit+0x304>)
 80040dc:	f240 71ee 	movw	r1, #2030	; 0x7ee
 80040e0:	4878      	ldr	r0, [pc, #480]	; (80042c4 <lfs_dir_relocatingcommit+0x308>)
 80040e2:	f009 fd71 	bl	800dbc8 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80040ec:	4619      	mov	r1, r3
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f002 faae 	bl	8006650 <lfs_fs_pred>
 80040f4:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 80040f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <lfs_dir_relocatingcommit+0x14c>
 80040fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fe:	f113 0f02 	cmn.w	r3, #2
 8004102:	d001      	beq.n	8004108 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8004104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004106:	e203      	b.n	8004510 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8004108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800410a:	f113 0f02 	cmn.w	r3, #2
 800410e:	d007      	beq.n	8004120 <lfs_dir_relocatingcommit+0x164>
 8004110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004114:	7ddb      	ldrb	r3, [r3, #23]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800411a:	2302      	movs	r3, #2
 800411c:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 800411e:	e121      	b.n	8004364 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	7d9b      	ldrb	r3, [r3, #22]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80fb 	beq.w	8004320 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800412e:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004134:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800413a:	63bb      	str	r3, [r7, #56]	; 0x38
 800413c:	f04f 33ff 	mov.w	r3, #4294967295
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004146:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800414e:	2b00      	cmp	r3, #0
 8004150:	d004      	beq.n	800415c <lfs_dir_relocatingcommit+0x1a0>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004158:	3b08      	subs	r3, #8
 800415a:	e003      	b.n	8004164 <lfs_dir_relocatingcommit+0x1a8>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3318      	adds	r3, #24
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd fac7 	bl	80016fe <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
 800417c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004180:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8004182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004186:	9308      	str	r3, [sp, #32]
 8004188:	4b50      	ldr	r3, [pc, #320]	; (80042cc <lfs_dir_relocatingcommit+0x310>)
 800418a:	9307      	str	r3, [sp, #28]
 800418c:	2300      	movs	r3, #0
 800418e:	9306      	str	r3, [sp, #24]
 8004190:	2300      	movs	r3, #0
 8004192:	9305      	str	r3, [sp, #20]
 8004194:	2300      	movs	r3, #0
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	2300      	movs	r3, #0
 800419a:	9303      	str	r3, [sp, #12]
 800419c:	2300      	movs	r3, #0
 800419e:	9302      	str	r3, [sp, #8]
 80041a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	460b      	mov	r3, r1
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7fe f834 	bl	800221c <lfs_dir_traverse>
 80041b4:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3318      	adds	r3, #24
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd fa85 	bl	80016ca <lfs_pair_fromle32>
        if (err) {
 80041c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80041c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c8:	f113 0f1c 	cmn.w	r3, #28
 80041cc:	f000 80aa 	beq.w	8004324 <lfs_dir_relocatingcommit+0x368>
 80041d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80041d6:	f000 80a5 	beq.w	8004324 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80041da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041dc:	e198      	b.n	8004510 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80041de:	f107 031c 	add.w	r3, r7, #28
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041f0:	f107 031c 	add.w	r3, r7, #28
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fd fb20 	bl	800183c <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004202:	f107 031c 	add.w	r3, r7, #28
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f7fd fb17 	bl	800183c <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004214:	f107 031c 	add.w	r3, r7, #28
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd fb0e 	bl	800183c <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 800422c:	f107 031c 	add.w	r3, r7, #28
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd fb27 	bl	8001884 <lfs_gstate_iszero>
 8004236:	4603      	mov	r3, r0
 8004238:	f083 0301 	eor.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d027      	beq.n	8004292 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8004242:	f107 031c 	add.w	r3, r7, #28
 8004246:	461a      	mov	r2, r3
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7fe ff6c 	bl	8003128 <lfs_dir_getgstate>
 8004250:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8004252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8004258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800425a:	e159      	b.n	8004510 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 800425c:	f107 031c 	add.w	r3, r7, #28
 8004260:	4618      	mov	r0, r3
 8004262:	f7fd fba0 	bl	80019a6 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8004266:	f107 031c 	add.w	r3, r7, #28
 800426a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800426e:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <lfs_dir_relocatingcommit+0x314>)
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7ff f905 	bl	8003480 <lfs_dir_commitattr>
 8004276:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8004278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800427e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004280:	f113 0f1c 	cmn.w	r3, #28
 8004284:	d050      	beq.n	8004328 <lfs_dir_relocatingcommit+0x36c>
 8004286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004288:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800428c:	d04c      	beq.n	8004328 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800428e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004290:	e13e      	b.n	8004510 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8004292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff f971 	bl	8003580 <lfs_dir_commitcrc>
 800429e:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 80042a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d016      	beq.n	80042d4 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80042a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a8:	f113 0f1c 	cmn.w	r3, #28
 80042ac:	d03e      	beq.n	800432c <lfs_dir_relocatingcommit+0x370>
 80042ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80042b4:	d03a      	beq.n	800432c <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80042b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b8:	e12a      	b.n	8004510 <lfs_dir_relocatingcommit+0x554>
 80042ba:	bf00      	nop
 80042bc:	0800f1ec 	.word	0x0800f1ec
 80042c0:	0800f6e4 	.word	0x0800f6e4
 80042c4:	0800f0dc 	.word	0x0800f0dc
 80042c8:	0800f1fc 	.word	0x0800f1fc
 80042cc:	080039bf 	.word	0x080039bf
 80042d0:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80042d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042da:	6992      	ldr	r2, [r2, #24]
 80042dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80042e0:	fb02 f201 	mul.w	r2, r2, r1
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d006      	beq.n	80042f8 <lfs_dir_relocatingcommit+0x33c>
 80042ea:	4b8b      	ldr	r3, [pc, #556]	; (8004518 <lfs_dir_relocatingcommit+0x55c>)
 80042ec:	4a8b      	ldr	r2, [pc, #556]	; (800451c <lfs_dir_relocatingcommit+0x560>)
 80042ee:	f640 0138 	movw	r1, #2104	; 0x838
 80042f2:	488b      	ldr	r0, [pc, #556]	; (8004520 <lfs_dir_relocatingcommit+0x564>)
 80042f4:	f009 fc68 	bl	800dbc8 <__assert_func>
        dir->off = commit.off;
 80042f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80042fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	333c      	adds	r3, #60	; 0x3c
 800430a:	3230      	adds	r2, #48	; 0x30
 800430c:	ca07      	ldmia	r2, {r0, r1, r2}
 800430e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3348      	adds	r3, #72	; 0x48
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	e021      	b.n	8004364 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8004320:	bf00      	nop
 8004322:	e004      	b.n	800432e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004324:	bf00      	nop
 8004326:	e002      	b.n	800432e <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800432c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3310      	adds	r3, #16
 8004332:	4619      	mov	r1, r3
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7fc fdfd 	bl	8000f34 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	8a9b      	ldrh	r3, [r3, #20]
 800433e:	9302      	str	r3, [sp, #8]
 8004340:	2300      	movs	r3, #0
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff fd45 	bl	8003de0 <lfs_dir_splittingcompact>
 8004356:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8004358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435a:	2b00      	cmp	r3, #0
 800435c:	da01      	bge.n	8004362 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800435e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004360:	e0d6      	b.n	8004510 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8004362:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	64bb      	str	r3, [r7, #72]	; 0x48
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	663b      	str	r3, [r7, #96]	; 0x60
 8004376:	e0c6      	b.n	8004506 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8004378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800437a:	3308      	adds	r3, #8
 800437c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f7fd f94c 	bl	8001620 <lfs_pair_cmp>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 80b8 	bne.w	8004500 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8004390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	f103 0408 	add.w	r4, r3, #8
 8004398:	4615      	mov	r5, r2
 800439a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800439c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800439e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80043a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80043a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a8:	3308      	adds	r3, #8
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	f000 809d 	beq.w	80044ec <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 80043b2:	2300      	movs	r3, #0
 80043b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b6:	e07b      	b.n	80044b0 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80043b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	4413      	add	r3, r2
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fd f9e3 	bl	800178e <lfs_tag_type3>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461a      	mov	r2, r3
 80043cc:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d115      	bne.n	8004400 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80043d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d6:	889c      	ldrh	r4, [r3, #4]
 80043d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	4413      	add	r3, r2
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fd f9fb 	bl	80017de <lfs_tag_id>
 80043e8:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80043ea:	429c      	cmp	r4, r3
 80043ec:	d108      	bne.n	8004400 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80043ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f0:	f04f 32ff 	mov.w	r2, #4294967295
 80043f4:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80043f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	e054      	b.n	80044aa <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	4413      	add	r3, r2
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd f9bf 	bl	800178e <lfs_tag_type3>
 8004410:	4603      	mov	r3, r0
 8004412:	461a      	mov	r2, r3
 8004414:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004418:	429a      	cmp	r2, r3
 800441a:	d11c      	bne.n	8004456 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800441c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800441e:	889c      	ldrh	r4, [r3, #4]
 8004420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	4413      	add	r3, r2
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd f9d7 	bl	80017de <lfs_tag_id>
 8004430:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004432:	429c      	cmp	r4, r3
 8004434:	d90f      	bls.n	8004456 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8004436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004438:	889b      	ldrh	r3, [r3, #4]
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004440:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004444:	799b      	ldrb	r3, [r3, #6]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d12f      	bne.n	80044aa <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 800444a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	1e5a      	subs	r2, r3, #1
 8004450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8004454:	e029      	b.n	80044aa <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	4413      	add	r3, r2
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7fd f994 	bl	800178e <lfs_tag_type3>
 8004466:	4603      	mov	r3, r0
 8004468:	461a      	mov	r2, r3
 800446a:	f240 4301 	movw	r3, #1025	; 0x401
 800446e:	429a      	cmp	r2, r3
 8004470:	d11b      	bne.n	80044aa <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8004472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004474:	889c      	ldrh	r4, [r3, #4]
 8004476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	4413      	add	r3, r2
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7fd f9ac 	bl	80017de <lfs_tag_id>
 8004486:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004488:	429c      	cmp	r4, r3
 800448a:	d30e      	bcc.n	80044aa <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 800448c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800448e:	889b      	ldrh	r3, [r3, #4]
 8004490:	3301      	adds	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004496:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800449a:	799b      	ldrb	r3, [r3, #6]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d104      	bne.n	80044aa <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 80044a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044a8:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 80044aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ac:	3301      	adds	r3, #1
 80044ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044b6:	429a      	cmp	r2, r3
 80044b8:	f6ff af7e 	blt.w	80043b8 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80044bc:	e016      	b.n	80044ec <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 80044be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c0:	889a      	ldrh	r2, [r3, #4]
 80044c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c4:	8b9b      	ldrh	r3, [r3, #28]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044cc:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80044ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d0:	f103 0108 	add.w	r1, r3, #8
 80044d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d6:	3320      	adds	r3, #32
 80044d8:	461a      	mov	r2, r3
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7fe fe08 	bl	80030f0 <lfs_dir_fetch>
 80044e0:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 80044e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <lfs_dir_relocatingcommit+0x530>
                    return err;
 80044e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ea:	e011      	b.n	8004510 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 80044ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ee:	889a      	ldrh	r2, [r3, #4]
 80044f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f2:	8b9b      	ldrh	r3, [r3, #28]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d303      	bcc.n	8004500 <lfs_dir_relocatingcommit+0x544>
 80044f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044fa:	7fdb      	ldrb	r3, [r3, #31]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1de      	bne.n	80044be <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	663b      	str	r3, [r7, #96]	; 0x60
 8004506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004508:	2b00      	cmp	r3, #0
 800450a:	f47f af35 	bne.w	8004378 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 800450e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8004510:	4618      	mov	r0, r3
 8004512:	3770      	adds	r7, #112	; 0x70
 8004514:	46bd      	mov	sp, r7
 8004516:	bdb0      	pop	{r4, r5, r7, pc}
 8004518:	0800f1c4 	.word	0x0800f1c4
 800451c:	0800f6e4 	.word	0x0800f6e4
 8004520:	0800f0dc 	.word	0x0800f0dc

08004524 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004524:	b5b0      	push	{r4, r5, r7, lr}
 8004526:	b0ba      	sub	sp, #232	; 0xe8
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800453a:	e045      	b.n	80045c8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800453c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004540:	3308      	adds	r3, #8
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	d03a      	beq.n	80045be <lfs_dir_orphaningcommit+0x9a>
 8004548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800454c:	3308      	adds	r3, #8
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4611      	mov	r1, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd f864 	bl	8001620 <lfs_pair_cmp>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d12f      	bne.n	80045be <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800455e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004562:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004564:	2b01      	cmp	r3, #1
 8004566:	d12a      	bne.n	80045be <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d023      	beq.n	80045be <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8004576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004582:	429a      	cmp	r2, r3
 8004584:	d91b      	bls.n	80045be <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8004586:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 ff92 	bl	80054b4 <lfs_file_outline>
 8004590:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004594:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 800459c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045a0:	e274      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
            }

            err = lfs_file_flush(lfs, f);
 80045a2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 ffa5 	bl	80054f6 <lfs_file_flush>
 80045ac:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80045b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <lfs_dir_orphaningcommit+0x9a>
                return err;
 80045b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045bc:	e266      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80045be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80045c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1b5      	bne.n	800453c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80045e6:	461d      	mov	r5, r3
 80045e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80045f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80045fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7ff fcd8 	bl	8003fbc <lfs_dir_relocatingcommit>
 800460c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8004610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004614:	2b00      	cmp	r3, #0
 8004616:	da02      	bge.n	800461e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800461c:	e236      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004624:	4611      	mov	r1, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f7fc fffa 	bl	8001620 <lfs_pair_cmp>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	461d      	mov	r5, r3
 8004636:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800463a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800463c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800463e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004642:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800464a:	2b02      	cmp	r3, #2
 800464c:	d14a      	bne.n	80046e4 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3348      	adds	r3, #72	; 0x48
 8004652:	461a      	mov	r2, r3
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7fe fd66 	bl	8003128 <lfs_dir_getgstate>
 800465c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8004660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8004668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800466c:	e20e      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8004674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004676:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3318      	adds	r3, #24
 800467e:	4618      	mov	r0, r3
 8004680:	f7fd f83d 	bl	80016fe <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	7ddb      	ldrb	r3, [r3, #23]
 8004688:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800468c:	051a      	lsls	r2, r3, #20
 800468e:	4bc0      	ldr	r3, [pc, #768]	; (8004990 <lfs_dir_orphaningcommit+0x46c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	667b      	str	r3, [r7, #100]	; 0x64
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	3318      	adds	r3, #24
 8004698:	66bb      	str	r3, [r7, #104]	; 0x68
 800469a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800469e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80046a2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80046a6:	2000      	movs	r0, #0
 80046a8:	9001      	str	r0, [sp, #4]
 80046aa:	2001      	movs	r0, #1
 80046ac:	9000      	str	r0, [sp, #0]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f7ff fc84 	bl	8003fbc <lfs_dir_relocatingcommit>
 80046b4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3318      	adds	r3, #24
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fd f804 	bl	80016ca <lfs_pair_fromle32>
        if (state < 0) {
 80046c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	da02      	bge.n	80046d0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80046ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ce:	e1dd      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
        }

        ldir = pdir;
 80046d0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80046d4:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80046d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80046e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 80046ea:	e1c3      	b.n	8004a74 <lfs_dir_orphaningcommit+0x550>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f103 0220 	add.w	r2, r3, #32
 80046f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fc ff8e 	bl	8001620 <lfs_pair_cmp>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d107      	bne.n	800471a <lfs_dir_orphaningcommit+0x1f6>
            lfs->root[0] = ldir.pair[0];
 800470a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8004712:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004722:	e037      	b.n	8004794 <lfs_dir_orphaningcommit+0x270>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004724:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004728:	f103 0208 	add.w	r2, r3, #8
 800472c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc ff74 	bl	8001620 <lfs_pair_cmp>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <lfs_dir_orphaningcommit+0x22e>
                d->m.pair[0] = ldir.pair[0];
 800473e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004742:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004746:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8004748:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800474c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004750:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8004752:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004756:	799b      	ldrb	r3, [r3, #6]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d116      	bne.n	800478a <lfs_dir_orphaningcommit+0x266>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 800475c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004760:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004764:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f7fc ff58 	bl	8001620 <lfs_pair_cmp>
 8004770:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <lfs_dir_orphaningcommit+0x266>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8004776:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800477a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8004780:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004784:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004788:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800478a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004794:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1c3      	bne.n	8004724 <lfs_dir_orphaningcommit+0x200>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800479c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80047a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80047a4:	4619      	mov	r1, r3
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f001 ffda 	bl	8006760 <lfs_fs_parent>
 80047ac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80047b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	da07      	bge.n	80047c8 <lfs_dir_orphaningcommit+0x2a4>
 80047b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047bc:	f113 0f02 	cmn.w	r3, #2
 80047c0:	d002      	beq.n	80047c8 <lfs_dir_orphaningcommit+0x2a4>
            return tag;
 80047c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047c6:	e161      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80047c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047cc:	f113 0f02 	cmn.w	r3, #2
 80047d0:	bf14      	ite	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	2300      	moveq	r3, #0
 80047d6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 80047da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047de:	f113 0f02 	cmn.w	r3, #2
 80047e2:	f000 808f 	beq.w	8004904 <lfs_dir_orphaningcommit+0x3e0>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80047e6:	2101      	movs	r1, #1
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f002 f80f 	bl	800680c <lfs_fs_preporphans>
 80047ee:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 80047f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <lfs_dir_orphaningcommit+0x2dc>
                return err;
 80047fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047fe:	e145      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004800:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004804:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3330      	adds	r3, #48	; 0x30
 800480c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004810:	4611      	mov	r1, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f7fd f887 	bl	8001926 <lfs_gstate_hasmovehere>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01e      	beq.n	800485c <lfs_dir_orphaningcommit+0x338>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	4618      	mov	r0, r3
 8004824:	f7fc ffdb 	bl	80017de <lfs_tag_id>
 8004828:	4603      	mov	r3, r0
 800482a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800482e:	2200      	movs	r2, #0
 8004830:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f002 f823 	bl	8006880 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 800483a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800483e:	4618      	mov	r0, r3
 8004840:	f7fc ffcd 	bl	80017de <lfs_tag_id>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800484c:	4293      	cmp	r3, r2
 800484e:	d205      	bcs.n	800485c <lfs_dir_orphaningcommit+0x338>
                    tag -= LFS_MKTAG(0, 1, 0);
 8004850:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004854:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004858:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800485c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485e:	657b      	str	r3, [r7, #84]	; 0x54
 8004860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004862:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8004864:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004868:	4618      	mov	r0, r3
 800486a:	f7fc ff48 	bl	80016fe <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 800486e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004872:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <lfs_dir_orphaningcommit+0x366>
 800487a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004884:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004888:	e000      	b.n	800488c <lfs_dir_orphaningcommit+0x368>
 800488a:	2300      	movs	r3, #0
 800488c:	647b      	str	r3, [r7, #68]	; 0x44
 800488e:	2300      	movs	r3, #0
 8004890:	64bb      	str	r3, [r7, #72]	; 0x48
 8004892:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004898:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800489c:	653b      	str	r3, [r7, #80]	; 0x50
 800489e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048a2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80048a6:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80048aa:	2000      	movs	r0, #0
 80048ac:	9001      	str	r0, [sp, #4]
 80048ae:	2002      	movs	r0, #2
 80048b0:	9000      	str	r0, [sp, #0]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fb82 	bl	8003fbc <lfs_dir_relocatingcommit>
 80048b8:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80048bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fc ff02 	bl	80016ca <lfs_pair_fromle32>
            if (state < 0) {
 80048c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	da02      	bge.n	80048d4 <lfs_dir_orphaningcommit+0x3b0>
                return state;
 80048ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d2:	e0db      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
            }

            if (state == LFS_OK_RELOCATED) {
 80048d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d113      	bne.n	8004904 <lfs_dir_orphaningcommit+0x3e0>
                lpair[0] = ppair[0];
 80048dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 80048e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 80048e8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80048ec:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80048f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80048f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004902:	e0b7      	b.n	8004a74 <lfs_dir_orphaningcommit+0x550>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004904:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004908:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800490c:	4619      	mov	r1, r3
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f001 fe9e 	bl	8006650 <lfs_fs_pred>
 8004914:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8004918:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <lfs_dir_orphaningcommit+0x40c>
 8004920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004924:	f113 0f02 	cmn.w	r3, #2
 8004928:	d002      	beq.n	8004930 <lfs_dir_orphaningcommit+0x40c>
            return err;
 800492a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800492e:	e0ad      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004930:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00b      	beq.n	8004950 <lfs_dir_orphaningcommit+0x42c>
 8004938:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800493c:	f113 0f02 	cmn.w	r3, #2
 8004940:	d106      	bne.n	8004950 <lfs_dir_orphaningcommit+0x42c>
 8004942:	4b14      	ldr	r3, [pc, #80]	; (8004994 <lfs_dir_orphaningcommit+0x470>)
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <lfs_dir_orphaningcommit+0x474>)
 8004946:	f640 1112 	movw	r1, #2322	; 0x912
 800494a:	4814      	ldr	r0, [pc, #80]	; (800499c <lfs_dir_orphaningcommit+0x478>)
 800494c:	f009 f93c 	bl	800dbc8 <__assert_func>

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8004950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004954:	f113 0f02 	cmn.w	r3, #2
 8004958:	f000 808c 	beq.w	8004a74 <lfs_dir_orphaningcommit+0x550>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3330      	adds	r3, #48	; 0x30
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc ffab 	bl	80018bc <lfs_gstate_hasorphans>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d019      	beq.n	80049a0 <lfs_dir_orphaningcommit+0x47c>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 800496c:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004970:	425b      	negs	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	b25b      	sxtb	r3, r3
 8004976:	4619      	mov	r1, r3
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f001 ff47 	bl	800680c <lfs_fs_preporphans>
 800497e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8004982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <lfs_dir_orphaningcommit+0x47c>
                    return err;
 800498a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800498e:	e07d      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
 8004990:	000ffc08 	.word	0x000ffc08
 8004994:	0800f204 	.word	0x0800f204
 8004998:	0800f700 	.word	0x0800f700
 800499c:	0800f0dc 	.word	0x0800f0dc
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80049a0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80049a4:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3330      	adds	r3, #48	; 0x30
 80049ac:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fc ffb7 	bl	8001926 <lfs_gstate_hasmovehere>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <lfs_dir_orphaningcommit+0x4b6>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fc ff0b 	bl	80017de <lfs_tag_id>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80049ce:	2200      	movs	r2, #0
 80049d0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f001 ff53 	bl	8006880 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80049da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 80049e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 80049e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fc fe87 	bl	80016fe <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80049f0:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80049f4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <lfs_dir_orphaningcommit+0x4e8>
 80049fc:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004a00:	029b      	lsls	r3, r3, #10
 8004a02:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004a06:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004a0a:	e000      	b.n	8004a0e <lfs_dir_orphaningcommit+0x4ea>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a10:	2300      	movs	r3, #0
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a14:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004a18:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004a1c:	051a      	lsls	r2, r3, #20
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <lfs_dir_orphaningcommit+0x570>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a28:	633b      	str	r3, [r7, #48]	; 0x30
 8004a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a2e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004a32:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004a36:	2000      	movs	r0, #0
 8004a38:	9001      	str	r0, [sp, #4]
 8004a3a:	2002      	movs	r0, #2
 8004a3c:	9000      	str	r0, [sp, #0]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff fabc 	bl	8003fbc <lfs_dir_relocatingcommit>
 8004a44:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004a48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fc fe3c 	bl	80016ca <lfs_pair_fromle32>
            if (state < 0) {
 8004a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da02      	bge.n	8004a60 <lfs_dir_orphaningcommit+0x53c>
                return state;
 8004a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a5e:	e015      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
            }

            ldir = pdir;
 8004a60:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004a64:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8004a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	f43f ae37 	beq.w	80046ec <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004a7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <lfs_dir_orphaningcommit+0x566>
 8004a86:	2303      	movs	r3, #3
 8004a88:	e000      	b.n	8004a8c <lfs_dir_orphaningcommit+0x568>
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	37e0      	adds	r7, #224	; 0xe0
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bdb0      	pop	{r4, r5, r7, pc}
 8004a94:	000ffc08 	.word	0x000ffc08

08004a98 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff fd39 	bl	8004524 <lfs_dir_orphaningcommit>
 8004ab2:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da01      	bge.n	8004abe <lfs_dir_commit+0x26>
        return orphans;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	e00d      	b.n	8004ada <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f001 ff5e 	bl	8006988 <lfs_fs_deorphan>
 8004acc:	6138      	str	r0, [r7, #16]
        if (err) {
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <lfs_dir_commit+0x40>
            return err;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	e000      	b.n	8004ada <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004ae2:	b590      	push	{r4, r7, lr}
 8004ae4:	b087      	sub	sp, #28
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	3b08      	subs	r3, #8
 8004afa:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b04:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <lfs_ctz_index+0x2e>
        return 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e01c      	b.n	8004b4a <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fc f9b0 	bl	8000e7a <lfs_popc>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	1ad2      	subs	r2, r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	1ad4      	subs	r4, r2, r3
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7fc f99e 	bl	8000e7a <lfs_popc>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	1ae2      	subs	r2, r4, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	601a      	str	r2, [r3, #0]
    return i;
 8004b48:	68fb      	ldr	r3, [r7, #12]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd90      	pop	{r4, r7, pc}

08004b52 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004b52:	b590      	push	{r4, r7, lr}
 8004b54:	b08f      	sub	sp, #60	; 0x3c
 8004b56:	af04      	add	r7, sp, #16
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d108      	bne.n	8004b78 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b68:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6c:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
        return 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e053      	b.n	8004c20 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	4619      	mov	r1, r3
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff ffac 	bl	8004ae2 <lfs_ctz_index>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004b8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b92:	4619      	mov	r1, r3
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff ffa4 	bl	8004ae2 <lfs_ctz_index>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004b9e:	e034      	b.n	8004c0a <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fc f949 	bl	8000e40 <lfs_npw2>
 8004bae:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004bb0:	1e5c      	subs	r4, r3, #1
 8004bb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bb4:	f7fc f953 	bl	8000e5e <lfs_ctz>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7fc f90a 	bl	8000dd6 <lfs_min>
 8004bc2:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	0092      	lsls	r2, r2, #2
 8004bca:	2104      	movs	r1, #4
 8004bcc:	9103      	str	r1, [sp, #12]
 8004bce:	4639      	mov	r1, r7
 8004bd0:	9102      	str	r1, [sp, #8]
 8004bd2:	9201      	str	r2, [sp, #4]
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2304      	movs	r3, #4
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7fc f9cd 	bl	8000f7c <lfs_bd_read>
 8004be2:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fc f960 	bl	8000eac <lfs_fromle32>
 8004bec:	4603      	mov	r3, r0
 8004bee:	603b      	str	r3, [r7, #0]
        if (err) {
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <lfs_ctz_find+0xa8>
            return err;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	e012      	b.n	8004c20 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d8c6      	bhi.n	8004ba0 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c16:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1c:	601a      	str	r2, [r3, #0]
    return 0;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	372c      	adds	r7, #44	; 0x2c
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd90      	pop	{r4, r7, pc}

08004c28 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b092      	sub	sp, #72	; 0x48
 8004c2c:	af04      	add	r7, sp, #16
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004c36:	f107 0320 	add.w	r3, r7, #32
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7fd f815 	bl	8001c6c <lfs_alloc>
 8004c42:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <lfs_ctz_extend+0x26>
            return err;
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	e0e0      	b.n	8004e10 <lfs_ctz_extend+0x1e8>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	4619      	mov	r1, r3
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7fc fc84 	bl	8001560 <lfs_bd_erase>
 8004c58:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d006      	beq.n	8004c6e <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004c66:	f000 80cb 	beq.w	8004e00 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	e0d0      	b.n	8004e10 <lfs_ctz_extend+0x1e8>
            }

            if (size == 0) {
 8004c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d107      	bne.n	8004c84 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c78:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
                return 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e0c5      	b.n	8004e10 <lfs_ctz_extend+0x1e8>
            }

            lfs_size_t noff = size - 1;
 8004c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c86:	3b01      	subs	r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004c8a:	f107 031c 	add.w	r3, r7, #28
 8004c8e:	4619      	mov	r1, r3
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff ff26 	bl	8004ae2 <lfs_ctz_index>
 8004c96:	4603      	mov	r3, r0
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d044      	beq.n	8004d36 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004cac:	2300      	movs	r3, #0
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb0:	e035      	b.n	8004d1e <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	2301      	movs	r3, #1
 8004cba:	9303      	str	r3, [sp, #12]
 8004cbc:	f107 0317 	add.w	r3, r7, #23
 8004cc0:	9302      	str	r3, [sp, #8]
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	2100      	movs	r1, #0
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7fc f953 	bl	8000f7c <lfs_bd_read>
 8004cd6:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <lfs_ctz_extend+0xba>
                        return err;
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	e096      	b.n	8004e10 <lfs_ctz_extend+0x1e8>
                    }

                    err = lfs_bd_prog(lfs,
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	9203      	str	r2, [sp, #12]
 8004ce8:	f107 0217 	add.w	r2, r7, #23
 8004cec:	9202      	str	r2, [sp, #8]
 8004cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf0:	9201      	str	r2, [sp, #4]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7fc fb84 	bl	8001408 <lfs_bd_prog>
 8004d00:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004d0e:	d101      	bne.n	8004d14 <lfs_ctz_extend+0xec>
                            goto relocate;
 8004d10:	bf00      	nop
                    goto relocate;
 8004d12:	e075      	b.n	8004e00 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8004d16:	e07b      	b.n	8004e10 <lfs_ctz_extend+0x1e8>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d3c5      	bcc.n	8004cb2 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004d26:	6a3a      	ldr	r2, [r7, #32]
 8004d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d2a:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d30:	601a      	str	r2, [r3, #0]
                return 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e06c      	b.n	8004e10 <lfs_ctz_extend+0x1e8>
            }

            // append block
            index += 1;
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	3301      	adds	r3, #1
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3e:	f7fc f88e 	bl	8000e5e <lfs_ctz>
 8004d42:	4603      	mov	r3, r0
 8004d44:	3301      	adds	r3, #1
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d50:	e049      	b.n	8004de6 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fc f8b3 	bl	8000ec0 <lfs_tole32>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d62:	0092      	lsls	r2, r2, #2
 8004d64:	2104      	movs	r1, #4
 8004d66:	9103      	str	r1, [sp, #12]
 8004d68:	f107 0118 	add.w	r1, r7, #24
 8004d6c:	9102      	str	r1, [sp, #8]
 8004d6e:	9201      	str	r2, [sp, #4]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	2301      	movs	r3, #1
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7fc fb45 	bl	8001408 <lfs_bd_prog>
 8004d7e:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fc f892 	bl	8000eac <lfs_fromle32>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004d98:	d034      	beq.n	8004e04 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	e038      	b.n	8004e10 <lfs_ctz_extend+0x1e8>
                }

                if (i != skips-1) {
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	3b01      	subs	r3, #1
 8004da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d01b      	beq.n	8004de0 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dac:	0092      	lsls	r2, r2, #2
 8004dae:	2104      	movs	r1, #4
 8004db0:	9103      	str	r1, [sp, #12]
 8004db2:	f107 0118 	add.w	r1, r7, #24
 8004db6:	9102      	str	r1, [sp, #8]
 8004db8:	9201      	str	r2, [sp, #4]
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7fc f8da 	bl	8000f7c <lfs_bd_read>
 8004dc8:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fc f86d 	bl	8000eac <lfs_fromle32>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <lfs_ctz_extend+0x1b8>
                        return err;
 8004ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dde:	e017      	b.n	8004e10 <lfs_ctz_extend+0x1e8>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	3301      	adds	r3, #1
 8004de4:	633b      	str	r3, [r7, #48]	; 0x30
 8004de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d3b1      	bcc.n	8004d52 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8004dee:	6a3a      	ldr	r2, [r7, #32]
 8004df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df2:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	009a      	lsls	r2, r3, #2
 8004df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfa:	601a      	str	r2, [r3, #0]
            return 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e007      	b.n	8004e10 <lfs_ctz_extend+0x1e8>
                    goto relocate;
 8004e00:	bf00      	nop
 8004e02:	e000      	b.n	8004e06 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8004e04:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7fc f893 	bl	8000f34 <lfs_cache_drop>
    while (true) {
 8004e0e:	e712      	b.n	8004c36 <lfs_ctz_extend+0xe>
    }
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3738      	adds	r7, #56	; 0x38
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b090      	sub	sp, #64	; 0x40
 8004e1c:	af04      	add	r7, sp, #16
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <lfs_ctz_traverse+0x18>
        return 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e06d      	b.n	8004f0c <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	3b01      	subs	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	f107 031c 	add.w	r3, r7, #28
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff fe50 	bl	8004ae2 <lfs_ctz_index>
 8004e42:	4603      	mov	r3, r0
 8004e44:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8004e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e48:	6839      	ldr	r1, [r7, #0]
 8004e4a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004e4c:	4798      	blx	r3
 8004e4e:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <lfs_ctz_traverse+0x42>
            return err;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	e058      	b.n	8004f0c <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <lfs_ctz_traverse+0x4c>
            return 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e053      	b.n	8004f0c <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	f1c3 0302 	rsb	r3, r3, #2
 8004e6e:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004e70:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004e72:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004e74:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004e76:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004e78:	9303      	str	r3, [sp, #12]
 8004e7a:	f107 0314 	add.w	r3, r7, #20
 8004e7e:	9302      	str	r3, [sp, #8]
 8004e80:	2300      	movs	r3, #0
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f7fc f874 	bl	8000f7c <lfs_bd_read>
 8004e94:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fc f807 	bl	8000eac <lfs_fromle32>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fc f801 	bl	8000eac <lfs_fromle32>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <lfs_ctz_traverse+0xa0>
            return err;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	e029      	b.n	8004f0c <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8004eb8:	2300      	movs	r3, #0
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ebc:	e013      	b.n	8004ee6 <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	4611      	mov	r1, r2
 8004ed0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004ed2:	4798      	blx	r3
 8004ed4:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <lfs_ctz_traverse+0xc8>
                return err;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	e015      	b.n	8004f0c <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eec:	429a      	cmp	r2, r3
 8004eee:	dbe6      	blt.n	8004ebe <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004efa:	4413      	add	r3, r2
 8004efc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004f00:	603b      	str	r3, [r7, #0]
        index -= count;
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004f0a:	e79c      	b.n	8004e46 <lfs_ctz_traverse+0x2e>
    }
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3730      	adds	r7, #48	; 0x30
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8004f14:	b5b0      	push	{r4, r5, r7, lr}
 8004f16:	b09a      	sub	sp, #104	; 0x68
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f001 fe99 	bl	8006c64 <lfs_fs_forceconsistency>
 8004f32:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8004f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <lfs_file_rawopencfg+0x2a>
            return err;
 8004f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f3c:	e1b0      	b.n	80052a0 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004f42:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2200      	movs	r2, #0
 8004f54:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f103 0108 	add.w	r1, r3, #8
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	3304      	adds	r3, #4
 8004f66:	1d3a      	adds	r2, r7, #4
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7fe f959 	bl	8003220 <lfs_dir_find>
 8004f6e:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8004f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	da0c      	bge.n	8004f90 <lfs_file_rawopencfg+0x7c>
 8004f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f78:	f113 0f02 	cmn.w	r3, #2
 8004f7c:	d105      	bne.n	8004f8a <lfs_file_rawopencfg+0x76>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	889b      	ldrh	r3, [r3, #4]
 8004f82:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d102      	bne.n	8004f90 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8004f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004f8e:	e17c      	b.n	800528a <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2201      	movs	r2, #1
 8004f94:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7fc fe01 	bl	8001ba0 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa0:	f113 0f02 	cmn.w	r3, #2
 8004fa4:	d14e      	bne.n	8005044 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8004fb0:	f06f 0301 	mvn.w	r3, #1
 8004fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004fb6:	e168      	b.n	800528a <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fb f8c6 	bl	800014c <strlen>
 8004fc0:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d903      	bls.n	8004fd4 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004fcc:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004fd2:	e15a      	b.n	800528a <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f103 0108 	add.w	r1, r3, #8
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	889b      	ldrh	r3, [r3, #4]
 8004fde:	029b      	lsls	r3, r3, #10
 8004fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fea:	2300      	movs	r3, #0
 8004fec:	633b      	str	r3, [r7, #48]	; 0x30
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	889b      	ldrh	r3, [r3, #4]
 8004ff2:	029a      	lsls	r2, r3, #10
 8004ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	63bb      	str	r3, [r7, #56]	; 0x38
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	889b      	ldrh	r3, [r3, #4]
 8005006:	029b      	lsls	r3, r3, #10
 8005008:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800500c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005012:	2300      	movs	r3, #0
 8005014:	643b      	str	r3, [r7, #64]	; 0x40
 8005016:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800501a:	2303      	movs	r3, #3
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff fd3b 	bl	8004a98 <lfs_dir_commit>
 8005022:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8005024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005026:	f113 0f1c 	cmn.w	r3, #28
 800502a:	d001      	beq.n	8005030 <lfs_file_rawopencfg+0x11c>
 800502c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800502e:	e001      	b.n	8005034 <lfs_file_rawopencfg+0x120>
 8005030:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005034:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8005036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005038:	2b00      	cmp	r3, #0
 800503a:	f040 8125 	bne.w	8005288 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800503e:	4b9a      	ldr	r3, [pc, #616]	; (80052a8 <lfs_file_rawopencfg+0x394>)
 8005040:	65bb      	str	r3, [r7, #88]	; 0x58
 8005042:	e044      	b.n	80050ce <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 800504e:	f06f 0310 	mvn.w	r3, #16
 8005052:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005054:	e119      	b.n	800528a <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8005056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005058:	4618      	mov	r0, r3
 800505a:	f7fc fb98 	bl	800178e <lfs_tag_type3>
 800505e:	4603      	mov	r3, r0
 8005060:	2b01      	cmp	r3, #1
 8005062:	d003      	beq.n	800506c <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8005064:	f06f 0314 	mvn.w	r3, #20
 8005068:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800506a:	e10e      	b.n	800528a <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00e      	beq.n	8005094 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	889b      	ldrh	r3, [r3, #4]
 800507a:	029b      	lsls	r3, r3, #10
 800507c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005084:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	631a      	str	r2, [r3, #48]	; 0x30
 8005092:	e01c      	b.n	80050ce <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	889b      	ldrh	r3, [r3, #4]
 800509e:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80050a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050a4:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80050ac:	9200      	str	r2, [sp, #0]
 80050ae:	4a7f      	ldr	r2, [pc, #508]	; (80052ac <lfs_file_rawopencfg+0x398>)
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7fc ff61 	bl	8001f78 <lfs_dir_get>
 80050b6:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 80050b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	da02      	bge.n	80050c4 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 80050be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050c0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80050c2:	e0e2      	b.n	800528a <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	3328      	adds	r3, #40	; 0x28
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fc fc8c 	bl	80019e6 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80050ce:	2300      	movs	r3, #0
 80050d0:	657b      	str	r3, [r7, #84]	; 0x54
 80050d2:	e063      	b.n	800519c <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d03c      	beq.n	800515a <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ea:	6859      	ldr	r1, [r3, #4]
 80050ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ee:	4613      	mov	r3, r2
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80050fe:	051a      	lsls	r2, r3, #20
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	889b      	ldrh	r3, [r3, #4]
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	ea42 0103 	orr.w	r1, r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510e:	6858      	ldr	r0, [r3, #4]
 8005110:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005112:	4613      	mov	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4403      	add	r3, r0
 800511c:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800511e:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005126:	6859      	ldr	r1, [r3, #4]
 8005128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	4603      	mov	r3, r0
 800513a:	4a5d      	ldr	r2, [pc, #372]	; (80052b0 <lfs_file_rawopencfg+0x39c>)
 800513c:	4621      	mov	r1, r4
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7fc ff1a 	bl	8001f78 <lfs_dir_get>
 8005144:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8005146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005148:	2b00      	cmp	r3, #0
 800514a:	da06      	bge.n	800515a <lfs_file_rawopencfg+0x246>
 800514c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800514e:	f113 0f02 	cmn.w	r3, #2
 8005152:	d002      	beq.n	800515a <lfs_file_rawopencfg+0x246>
                err = res;
 8005154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005156:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005158:	e097      	b.n	800528a <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d017      	beq.n	8005196 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516a:	6859      	ldr	r1, [r3, #4]
 800516c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800516e:	4613      	mov	r3, r2
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517e:	429a      	cmp	r2, r3
 8005180:	d903      	bls.n	800518a <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8005182:	f06f 031b 	mvn.w	r3, #27
 8005186:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005188:	e07f      	b.n	800528a <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005198:	3301      	adds	r3, #1
 800519a:	657b      	str	r3, [r7, #84]	; 0x54
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d395      	bcc.n	80050d4 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80051bc:	e010      	b.n	80051e0 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fb fe9e 	bl	8000f06 <lfs_malloc>
 80051ca:	4602      	mov	r2, r0
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d103      	bne.n	80051e0 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 80051d8:	f06f 030b 	mvn.w	r3, #11
 80051dc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80051de:	e054      	b.n	800528a <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	3340      	adds	r3, #64	; 0x40
 80051e4:	4619      	mov	r1, r3
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7fb feb2 	bl	8000f50 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80051ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fc facd 	bl	800178e <lfs_tag_type3>
 80051f4:	4603      	mov	r3, r0
 80051f6:	461a      	mov	r2, r3
 80051f8:	f240 2301 	movw	r3, #513	; 0x201
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d141      	bne.n	8005284 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f06f 0201 	mvn.w	r2, #1
 8005206:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8005208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800520a:	4618      	mov	r0, r3
 800520c:	f7fc faf6 	bl	80017fc <lfs_tag_size>
 8005210:	4602      	mov	r2, r0
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d020      	beq.n	8005284 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	889b      	ldrh	r3, [r3, #4]
 800524c:	029c      	lsls	r4, r3, #10
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005252:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005256:	4618      	mov	r0, r3
 8005258:	f7fb fdbd 	bl	8000dd6 <lfs_min>
 800525c:	4603      	mov	r3, r0
 800525e:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005260:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	4a0f      	ldr	r2, [pc, #60]	; (80052ac <lfs_file_rawopencfg+0x398>)
 800526e:	4629      	mov	r1, r5
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7fc fe81 	bl	8001f78 <lfs_dir_get>
 8005276:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8005278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527a:	2b00      	cmp	r3, #0
 800527c:	da02      	bge.n	8005284 <lfs_file_rawopencfg+0x370>
                err = res;
 800527e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005280:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005282:	e002      	b.n	800528a <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8005284:	2300      	movs	r3, #0
 8005286:	e00b      	b.n	80052a0 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8005288:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f823 	bl	80052e4 <lfs_file_rawclose>
    return err;
 800529e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3760      	adds	r7, #96	; 0x60
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bdb0      	pop	{r4, r5, r7, pc}
 80052a8:	20100000 	.word	0x20100000
 80052ac:	700ffc00 	.word	0x700ffc00
 80052b0:	7ffffc00 	.word	0x7ffffc00

080052b4 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <lfs_file_rawopen+0x2c>)
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff fe21 	bl	8004f14 <lfs_file_rawopencfg>
 80052d2:	6178      	str	r0, [r7, #20]
    return err;
 80052d4:	697b      	ldr	r3, [r7, #20]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	0800f718 	.word	0x0800f718

080052e4 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f9c3 	bl	800567c <lfs_file_rawsync>
 80052f6:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fc fc2f 	bl	8001b5e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	4618      	mov	r0, r3
 8005310:	f7fb fe05 	bl	8000f1e <lfs_free>
    }

    return err;
 8005314:	68fb      	ldr	r3, [r7, #12]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b08d      	sub	sp, #52	; 0x34
 8005324:	af06      	add	r7, sp, #24
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800532a:	f107 030c 	add.w	r3, r7, #12
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7fc fc9b 	bl	8001c6c <lfs_alloc>
 8005336:	6138      	str	r0, [r7, #16]
        if (err) {
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <lfs_file_relocate+0x22>
            return err;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	e0b2      	b.n	80054a8 <lfs_file_relocate+0x188>
        }

        err = lfs_bd_erase(lfs, nblock);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fc f90a 	bl	8001560 <lfs_bd_erase>
 800534c:	6138      	str	r0, [r7, #16]
        if (err) {
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d006      	beq.n	8005362 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800535a:	f000 809b 	beq.w	8005494 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	e0a2      	b.n	80054a8 <lfs_file_relocate+0x188>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e069      	b.n	800543c <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d027      	beq.n	80053c4 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f103 0008 	add.w	r0, r3, #8
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	889b      	ldrh	r3, [r3, #4]
 800538c:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800538e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005396:	2101      	movs	r1, #1
 8005398:	9105      	str	r1, [sp, #20]
 800539a:	f107 010b 	add.w	r1, r7, #11
 800539e:	9104      	str	r1, [sp, #16]
 80053a0:	6979      	ldr	r1, [r7, #20]
 80053a2:	9103      	str	r1, [sp, #12]
 80053a4:	9302      	str	r3, [sp, #8]
 80053a6:	4b42      	ldr	r3, [pc, #264]	; (80054b0 <lfs_file_relocate+0x190>)
 80053a8:	9301      	str	r3, [sp, #4]
 80053aa:	9200      	str	r2, [sp, #0]
 80053ac:	4623      	mov	r3, r4
 80053ae:	2200      	movs	r2, #0
 80053b0:	4601      	mov	r1, r0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fc fdfb 	bl	8001fae <lfs_dir_getread>
 80053b8:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01e      	beq.n	80053fe <lfs_file_relocate+0xde>
                    return err;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	e071      	b.n	80054a8 <lfs_file_relocate+0x188>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80053ca:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	1ad4      	subs	r4, r2, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	2201      	movs	r2, #1
 80053da:	9203      	str	r2, [sp, #12]
 80053dc:	f107 020b 	add.w	r2, r7, #11
 80053e0:	9202      	str	r2, [sp, #8]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	9201      	str	r2, [sp, #4]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	4623      	mov	r3, r4
 80053ea:	4602      	mov	r2, r0
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7fb fdc5 	bl	8000f7c <lfs_bd_read>
 80053f2:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <lfs_file_relocate+0xde>
                    return err;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	e054      	b.n	80054a8 <lfs_file_relocate+0x188>
                }
            }

            err = lfs_bd_prog(lfs,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f103 0110 	add.w	r1, r3, #16
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	9203      	str	r2, [sp, #12]
 800540c:	f107 020b 	add.w	r2, r7, #11
 8005410:	9202      	str	r2, [sp, #8]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	9201      	str	r2, [sp, #4]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2301      	movs	r3, #1
 800541a:	4602      	mov	r2, r0
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7fb fff3 	bl	8001408 <lfs_bd_prog>
 8005422:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005430:	d032      	beq.n	8005498 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	e038      	b.n	80054a8 <lfs_file_relocate+0x188>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	429a      	cmp	r2, r3
 8005444:	d390      	bcc.n	8005368 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69d9      	ldr	r1, [r3, #28]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	461a      	mov	r2, r3
 8005456:	f008 fc2f 	bl	800dcb8 <memcpy>
        file->cache.block = lfs->pcache.block;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3310      	adds	r3, #16
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fb fd69 	bl	8000f50 <lfs_cache_zero>

        file->block = nblock;
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8005490:	2300      	movs	r3, #0
 8005492:	e009      	b.n	80054a8 <lfs_file_relocate+0x188>
                goto relocate;
 8005494:	bf00      	nop
 8005496:	e000      	b.n	800549a <lfs_file_relocate+0x17a>
                    goto relocate;
 8005498:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3310      	adds	r3, #16
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fb fd47 	bl	8000f34 <lfs_cache_drop>
    while (true) {
 80054a6:	e740      	b.n	800532a <lfs_file_relocate+0xa>
    }
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd90      	pop	{r4, r7, pc}
 80054b0:	fff7fc00 	.word	0xfff7fc00

080054b4 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fc fbb1 	bl	8001c2e <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff ff26 	bl	8005320 <lfs_file_relocate>
 80054d4:	60f8      	str	r0, [r7, #12]
    if (err) {
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <lfs_file_outline+0x2c>
        return err;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	e006      	b.n	80054ee <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80054f6:	b590      	push	{r4, r7, lr}
 80054f8:	b09d      	sub	sp, #116	; 0x74
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d011      	beq.n	8005530 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	3340      	adds	r3, #64	; 0x40
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fb fd08 	bl	8000f34 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 809a 	beq.w	8005672 <lfs_file_flush+0x17c>
        lfs_off_t pos = file->pos;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d16c      	bne.n	800562a <lfs_file_flush+0x134>
            // copy over anything after current branch
            lfs_file_t orig = {
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	2254      	movs	r2, #84	; 0x54
 8005556:	2100      	movs	r1, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f008 fbbb 	bl	800dcd4 <memset>
                .ctz.head = file->ctz.head,
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8005562:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8005568:	63bb      	str	r3, [r7, #56]	; 0x38
 800556a:	2301      	movs	r3, #1
 800556c:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8005572:	643b      	str	r3, [r7, #64]	; 0x40
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800557a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800557c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7fb fcd5 	bl	8000f34 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800558a:	e02b      	b.n	80055e4 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800558c:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8005590:	f107 010c 	add.w	r1, r7, #12
 8005594:	2301      	movs	r3, #1
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f8fc 	bl	8005794 <lfs_file_flushedread>
 800559c:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800559e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	da01      	bge.n	80055a8 <lfs_file_flush+0xb2>
                    return res;
 80055a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a6:	e065      	b.n	8005674 <lfs_file_flush+0x17e>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80055a8:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80055ac:	2301      	movs	r3, #1
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f9c1 	bl	8005938 <lfs_file_flushedwrite>
 80055b6:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80055b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	da01      	bge.n	80055c2 <lfs_file_flush+0xcc>
                    return res;
 80055be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c0:	e058      	b.n	8005674 <lfs_file_flush+0x17e>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d00b      	beq.n	80055e4 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80055cc:	f107 030c 	add.w	r3, r7, #12
 80055d0:	3340      	adds	r3, #64	; 0x40
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7fb fcad 	bl	8000f34 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb fca8 	bl	8000f34 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d3cd      	bcc.n	800558c <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	2301      	movs	r3, #1
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fb fe54 	bl	80012a8 <lfs_bd_flush>
 8005600:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01c      	beq.n	8005642 <lfs_file_flush+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 8005608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800560a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800560e:	d001      	beq.n	8005614 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8005610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005612:	e02f      	b.n	8005674 <lfs_file_flush+0x17e>
                        goto relocate;
 8005614:	bf00      	nop

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
                err = lfs_file_relocate(lfs, file);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff fe81 	bl	8005320 <lfs_file_relocate>
 800561e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0e4      	beq.n	80055f0 <lfs_file_flush+0xfa>
                    return err;
 8005626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005628:	e024      	b.n	8005674 <lfs_file_flush+0x17e>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f7fb fbbf 	bl	8000db8 <lfs_max>
 800563a:	4602      	mov	r2, r0
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	635a      	str	r2, [r3, #52]	; 0x34
 8005640:	e000      	b.n	8005644 <lfs_file_flush+0x14e>
                break;
 8005642:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005670:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3774      	adds	r7, #116	; 0x74
 8005678:	46bd      	mov	sp, r7
 800567a:	bd90      	pop	{r4, r7, pc}

0800567c <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b090      	sub	sp, #64	; 0x40
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8005692:	2300      	movs	r3, #0
 8005694:	e07a      	b.n	800578c <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff ff2c 	bl	80054f6 <lfs_file_flush>
 800569e:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	e06a      	b.n	800578c <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d063      	beq.n	800578a <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fb ff90 	bl	80015ec <lfs_pair_isnull>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f083 0301 	eor.w	r3, r3, #1
 80056d2:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d058      	beq.n	800578a <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80056e4:	f240 2301 	movw	r3, #513	; 0x201
 80056e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ee:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
 80056f6:	e014      	b.n	8005722 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80056f8:	f240 2302 	movw	r3, #514	; 0x202
 80056fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005704:	3228      	adds	r2, #40	; 0x28
 8005706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800570a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800570e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005712:	4618      	mov	r0, r3
 8005714:	f7fc f97f 	bl	8001a16 <lfs_ctz_tole32>
            buffer = &ctz;
 8005718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800571c:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800571e:	2308      	movs	r3, #8
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f103 0108 	add.w	r1, r3, #8
 8005728:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800572a:	051a      	lsls	r2, r3, #20
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	889b      	ldrh	r3, [r3, #4]
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	431a      	orrs	r2, r3
 8005734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	889b      	ldrh	r3, [r3, #4]
 8005742:	029a      	lsls	r2, r3, #10
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	4313      	orrs	r3, r2
 800574c:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8005750:	623b      	str	r3, [r7, #32]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
 800575a:	f107 0218 	add.w	r2, r7, #24
 800575e:	2302      	movs	r3, #2
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff f999 	bl	8004a98 <lfs_dir_commit>
 8005766:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	e006      	b.n	800578c <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3740      	adds	r7, #64	; 0x40
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005794:	b5b0      	push	{r4, r5, r7, lr}
 8005796:	b090      	sub	sp, #64	; 0x40
 8005798:	af06      	add	r7, sp, #24
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d301      	bcc.n	80057ba <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e0b7      	b.n	800592a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	4619      	mov	r1, r3
 80057c6:	6838      	ldr	r0, [r7, #0]
 80057c8:	f7fb fb05 	bl	8000dd6 <lfs_min>
 80057cc:	6038      	str	r0, [r7, #0]
    nsize = size;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80057d2:	e0a5      	b.n	8005920 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d006      	beq.n	80057ee <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e8:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d130      	bne.n	8005850 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d11c      	bne.n	8005834 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	3138      	adds	r1, #56	; 0x38
 8005810:	68b8      	ldr	r0, [r7, #8]
 8005812:	303c      	adds	r0, #60	; 0x3c
 8005814:	9003      	str	r0, [sp, #12]
 8005816:	9102      	str	r1, [sp, #8]
 8005818:	9201      	str	r2, [sp, #4]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	462b      	mov	r3, r5
 800581e:	4622      	mov	r2, r4
 8005820:	2100      	movs	r1, #0
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff f995 	bl	8004b52 <lfs_ctz_find>
 8005828:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <lfs_file_flushedread+0xb0>
                    return err;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	e07a      	b.n	800592a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f06f 0201 	mvn.w	r2, #1
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	4619      	mov	r1, r3
 800585e:	6a38      	ldr	r0, [r7, #32]
 8005860:	f7fb fab9 	bl	8000dd6 <lfs_min>
 8005864:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d026      	beq.n	80058c0 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f103 0408 	add.w	r4, r3, #8
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8005882:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	889b      	ldrh	r3, [r3, #4]
 8005888:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800588a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800588e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005896:	69b8      	ldr	r0, [r7, #24]
 8005898:	9005      	str	r0, [sp, #20]
 800589a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800589c:	9004      	str	r0, [sp, #16]
 800589e:	9103      	str	r1, [sp, #12]
 80058a0:	9302      	str	r3, [sp, #8]
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <lfs_file_flushedread+0x1a0>)
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	9200      	str	r2, [sp, #0]
 80058a8:	462b      	mov	r3, r5
 80058aa:	2200      	movs	r2, #0
 80058ac:	4621      	mov	r1, r4
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7fc fb7d 	bl	8001fae <lfs_dir_getread>
 80058b4:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01d      	beq.n	80058f8 <lfs_file_flushedread+0x164>
                return err;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	e034      	b.n	800592a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80058ca:	69dc      	ldr	r4, [r3, #28]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	9103      	str	r1, [sp, #12]
 80058d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058da:	9102      	str	r1, [sp, #8]
 80058dc:	9201      	str	r2, [sp, #4]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	4623      	mov	r3, r4
 80058e2:	4602      	mov	r2, r0
 80058e4:	2100      	movs	r1, #0
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7fb fb48 	bl	8000f7c <lfs_bd_read>
 80058ec:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <lfs_file_flushedread+0x164>
                return err;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	e018      	b.n	800592a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	441a      	add	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	441a      	add	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4413      	add	r3, r2
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f47f af56 	bne.w	80057d4 <lfs_file_flushedread+0x40>
    }

    return size;
 8005928:	683b      	ldr	r3, [r7, #0]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3728      	adds	r7, #40	; 0x28
 800592e:	46bd      	mov	sp, r7
 8005930:	bdb0      	pop	{r4, r5, r7, pc}
 8005932:	bf00      	nop
 8005934:	fff7fc00 	.word	0xfff7fc00

08005938 <lfs_file_flushedwrite>:
}


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005938:	b5b0      	push	{r4, r5, r7, lr}
 800593a:	b090      	sub	sp, #64	; 0x40
 800593c:	af04      	add	r7, sp, #16
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 810c 	beq.w	8005b74 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	441a      	add	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f7fb fa24 	bl	8000db8 <lfs_max>
 8005970:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 8005976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800597c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 800597e:	2b00      	cmp	r3, #0
 8005980:	d004      	beq.n	800598c <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8005988:	08db      	lsrs	r3, r3, #3
 800598a:	e003      	b.n	8005994 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005990:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8005992:	08db      	lsrs	r3, r3, #3
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f7fb fa1d 	bl	8000dd6 <lfs_min>
 800599c:	4603      	mov	r3, r0
 800599e:	4619      	mov	r1, r3
 80059a0:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80059a4:	f7fb fa17 	bl	8000dd6 <lfs_min>
 80059a8:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80059aa:	429c      	cmp	r4, r3
 80059ac:	f240 80e2 	bls.w	8005b74 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff fd7e 	bl	80054b4 <lfs_file_outline>
 80059b8:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80d9 	beq.w	8005b74 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	e0d5      	b.n	8005b7e <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d006      	beq.n	80059ec <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e6:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d16b      	bne.n	8005ac4 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d157      	bne.n	8005aa8 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d12d      	bne.n	8005a60 <lfs_file_flushedwrite+0x128>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d029      	beq.n	8005a60 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a1e:	3a01      	subs	r2, #1
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	3138      	adds	r1, #56	; 0x38
 8005a24:	68b8      	ldr	r0, [r7, #8]
 8005a26:	303c      	adds	r0, #60	; 0x3c
 8005a28:	9003      	str	r0, [sp, #12]
 8005a2a:	9102      	str	r1, [sp, #8]
 8005a2c:	9201      	str	r2, [sp, #4]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	462b      	mov	r3, r5
 8005a32:	4622      	mov	r2, r4
 8005a34:	2100      	movs	r1, #0
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff f88b 	bl	8004b52 <lfs_ctz_find>
 8005a3c:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	e094      	b.n	8005b7e <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	3340      	adds	r3, #64	; 0x40
 8005a58:	4619      	mov	r1, r3
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7fb fa78 	bl	8000f50 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7fc f8e4 	bl	8001c2e <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005a6c:	68fc      	ldr	r4, [r7, #12]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	3238      	adds	r2, #56	; 0x38
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	313c      	adds	r1, #60	; 0x3c
 8005a7e:	9102      	str	r1, [sp, #8]
 8005a80:	9201      	str	r2, [sp, #4]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	462b      	mov	r3, r5
 8005a86:	4622      	mov	r2, r4
 8005a88:	4601      	mov	r1, r0
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff f8cc 	bl	8004c28 <lfs_ctz_extend>
 8005a90:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00f      	beq.n	8005ab8 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	e06a      	b.n	8005b7e <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f06f 0201 	mvn.w	r2, #1
 8005aae:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad4:	f7fb f97f 	bl	8000dd6 <lfs_min>
 8005ad8:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005ae0:	68fc      	ldr	r4, [r7, #12]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aea:	69b9      	ldr	r1, [r7, #24]
 8005aec:	9103      	str	r1, [sp, #12]
 8005aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af0:	9102      	str	r1, [sp, #8]
 8005af2:	9201      	str	r2, [sp, #4]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2301      	movs	r3, #1
 8005af8:	4622      	mov	r2, r4
 8005afa:	4601      	mov	r1, r0
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7fb fc83 	bl	8001408 <lfs_bd_prog>
 8005b02:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01c      	beq.n	8005b44 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005b10:	d007      	beq.n	8005b22 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	e02d      	b.n	8005b7e <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8005b22:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff fbfa 	bl	8005320 <lfs_file_relocate>
 8005b2c:	6178      	str	r0, [r7, #20]
            if (err) {
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0d2      	beq.n	8005ada <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	e01c      	b.n	8005b7e <lfs_file_flushedwrite+0x246>
            break;
 8005b44:	bf00      	nop
            }
        }

        file->pos += diff;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	441a      	add	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	441a      	add	r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	4413      	add	r3, r2
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f7fc f85d 	bl	8001c2e <lfs_alloc_ack>
    while (nsize > 0) {
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f47f af2b 	bne.w	80059d2 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8005b7c:	683b      	ldr	r3, [r7, #0]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3730      	adds	r7, #48	; 0x30
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b88 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <lfs_file_rawwrite+0x28>
 8005ba2:	4b38      	ldr	r3, [pc, #224]	; (8005c84 <lfs_file_rawwrite+0xfc>)
 8005ba4:	4a38      	ldr	r2, [pc, #224]	; (8005c88 <lfs_file_rawwrite+0x100>)
 8005ba6:	f640 5157 	movw	r1, #3415	; 0xd57
 8005baa:	4838      	ldr	r0, [pc, #224]	; (8005c8c <lfs_file_rawwrite+0x104>)
 8005bac:	f008 f80c 	bl	800dbc8 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff fc99 	bl	80054f6 <lfs_file_flush>
 8005bc4:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <lfs_file_rawwrite+0x48>
            return err;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	e055      	b.n	8005c7c <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <lfs_file_rawwrite+0x68>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d203      	bcs.n	8005bf0 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	441a      	add	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d902      	bls.n	8005c06 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005c00:	f06f 031a 	mvn.w	r3, #26
 8005c04:	e03a      	b.n	8005c7c <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d121      	bne.n	8005c56 <lfs_file_rawwrite+0xce>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d91b      	bls.n	8005c56 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c22:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8005c2c:	e00e      	b.n	8005c4c <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]
 8005c32:	f107 0217 	add.w	r2, r7, #23
 8005c36:	2301      	movs	r3, #1
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f7ff fe7c 	bl	8005938 <lfs_file_flushedwrite>
 8005c40:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	da01      	bge.n	8005c4c <lfs_file_rawwrite+0xc4>
                return res;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	e017      	b.n	8005c7c <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	6a3a      	ldr	r2, [r7, #32]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d8eb      	bhi.n	8005c2e <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff fe6b 	bl	8005938 <lfs_file_flushedwrite>
 8005c62:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	da01      	bge.n	8005c6e <lfs_file_rawwrite+0xe6>
        return nsize;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	e006      	b.n	8005c7c <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3728      	adds	r7, #40	; 0x28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	0800f25c 	.word	0x0800f25c
 8005c88:	0800f724 	.word	0x0800f724
 8005c8c:	0800f0dc 	.word	0x0800f0dc

08005c90 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08c      	sub	sp, #48	; 0x30
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <lfs_init+0x2c>
 8005cae:	4b9f      	ldr	r3, [pc, #636]	; (8005f2c <lfs_init+0x29c>)
 8005cb0:	4a9f      	ldr	r2, [pc, #636]	; (8005f30 <lfs_init+0x2a0>)
 8005cb2:	f640 7177 	movw	r1, #3959	; 0xf77
 8005cb6:	489f      	ldr	r0, [pc, #636]	; (8005f34 <lfs_init+0x2a4>)
 8005cb8:	f007 ff86 	bl	800dbc8 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <lfs_init+0x44>
 8005cc6:	4b9c      	ldr	r3, [pc, #624]	; (8005f38 <lfs_init+0x2a8>)
 8005cc8:	4a99      	ldr	r2, [pc, #612]	; (8005f30 <lfs_init+0x2a0>)
 8005cca:	f640 7178 	movw	r1, #3960	; 0xf78
 8005cce:	4899      	ldr	r0, [pc, #612]	; (8005f34 <lfs_init+0x2a4>)
 8005cd0:	f007 ff7a 	bl	800dbc8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <lfs_init+0x5c>
 8005cde:	4b97      	ldr	r3, [pc, #604]	; (8005f3c <lfs_init+0x2ac>)
 8005ce0:	4a93      	ldr	r2, [pc, #588]	; (8005f30 <lfs_init+0x2a0>)
 8005ce2:	f640 7179 	movw	r1, #3961	; 0xf79
 8005ce6:	4893      	ldr	r0, [pc, #588]	; (8005f34 <lfs_init+0x2a4>)
 8005ce8:	f007 ff6e 	bl	800dbc8 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005cf6:	6952      	ldr	r2, [r2, #20]
 8005cf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cfc:	fb02 f201 	mul.w	r2, r2, r1
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d006      	beq.n	8005d14 <lfs_init+0x84>
 8005d06:	4b8e      	ldr	r3, [pc, #568]	; (8005f40 <lfs_init+0x2b0>)
 8005d08:	4a89      	ldr	r2, [pc, #548]	; (8005f30 <lfs_init+0x2a0>)
 8005d0a:	f640 717d 	movw	r1, #3965	; 0xf7d
 8005d0e:	4889      	ldr	r0, [pc, #548]	; (8005f34 <lfs_init+0x2a4>)
 8005d10:	f007 ff5a 	bl	800dbc8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d1e:	6992      	ldr	r2, [r2, #24]
 8005d20:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d24:	fb02 f201 	mul.w	r2, r2, r1
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d006      	beq.n	8005d3c <lfs_init+0xac>
 8005d2e:	4b85      	ldr	r3, [pc, #532]	; (8005f44 <lfs_init+0x2b4>)
 8005d30:	4a7f      	ldr	r2, [pc, #508]	; (8005f30 <lfs_init+0x2a0>)
 8005d32:	f640 717e 	movw	r1, #3966	; 0xf7e
 8005d36:	487f      	ldr	r0, [pc, #508]	; (8005f34 <lfs_init+0x2a4>)
 8005d38:	f007 ff46 	bl	800dbc8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d46:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d4c:	fb02 f201 	mul.w	r2, r2, r1
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d006      	beq.n	8005d64 <lfs_init+0xd4>
 8005d56:	4b7c      	ldr	r3, [pc, #496]	; (8005f48 <lfs_init+0x2b8>)
 8005d58:	4a75      	ldr	r2, [pc, #468]	; (8005f30 <lfs_init+0x2a0>)
 8005d5a:	f640 717f 	movw	r1, #3967	; 0xf7f
 8005d5e:	4875      	ldr	r0, [pc, #468]	; (8005f34 <lfs_init+0x2a4>)
 8005d60:	f007 ff32 	bl	800dbc8 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	3b08      	subs	r3, #8
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fb f863 	bl	8000e40 <lfs_npw2>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	009a      	lsls	r2, r3, #2
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d906      	bls.n	8005d96 <lfs_init+0x106>
 8005d88:	4b70      	ldr	r3, [pc, #448]	; (8005f4c <lfs_init+0x2bc>)
 8005d8a:	4a69      	ldr	r2, [pc, #420]	; (8005f30 <lfs_init+0x2a0>)
 8005d8c:	f640 7182 	movw	r1, #3970	; 0xf82
 8005d90:	4868      	ldr	r0, [pc, #416]	; (8005f34 <lfs_init+0x2a4>)
 8005d92:	f007 ff19 	bl	800dbc8 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d106      	bne.n	8005dae <lfs_init+0x11e>
 8005da0:	4b6b      	ldr	r3, [pc, #428]	; (8005f50 <lfs_init+0x2c0>)
 8005da2:	4a63      	ldr	r2, [pc, #396]	; (8005f30 <lfs_init+0x2a0>)
 8005da4:	f640 718b 	movw	r1, #3979	; 0xf8b
 8005da8:	4862      	ldr	r0, [pc, #392]	; (8005f34 <lfs_init+0x2a4>)
 8005daa:	f007 ff0d 	bl	800dbc8 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	e010      	b.n	8005de6 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fb f89b 	bl	8000f06 <lfs_malloc>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d103      	bne.n	8005de6 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8005dde:	f06f 030b 	mvn.w	r3, #11
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005de4:	e0fe      	b.n	8005fe4 <lfs_init+0x354>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	61da      	str	r2, [r3, #28]
 8005dfa:	e010      	b.n	8005e1e <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fb f87f 	bl	8000f06 <lfs_malloc>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d103      	bne.n	8005e1e <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8005e16:	f06f 030b 	mvn.w	r3, #11
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005e1c:	e0e2      	b.n	8005fe4 <lfs_init+0x354>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fb f894 	bl	8000f50 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3310      	adds	r3, #16
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fb f88e 	bl	8000f50 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <lfs_init+0x1bc>
 8005e3e:	4b45      	ldr	r3, [pc, #276]	; (8005f54 <lfs_init+0x2c4>)
 8005e40:	4a3b      	ldr	r2, [pc, #236]	; (8005f30 <lfs_init+0x2a0>)
 8005e42:	f640 71a9 	movw	r1, #4009	; 0xfa9
 8005e46:	483b      	ldr	r0, [pc, #236]	; (8005f34 <lfs_init+0x2a4>)
 8005e48:	f007 febe 	bl	800dbc8 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <lfs_init+0x1d8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d006      	beq.n	8005e76 <lfs_init+0x1e6>
 8005e68:	4b3b      	ldr	r3, [pc, #236]	; (8005f58 <lfs_init+0x2c8>)
 8005e6a:	4a31      	ldr	r2, [pc, #196]	; (8005f30 <lfs_init+0x2a0>)
 8005e6c:	f640 71aa 	movw	r1, #4010	; 0xfaa
 8005e70:	4830      	ldr	r0, [pc, #192]	; (8005f34 <lfs_init+0x2a4>)
 8005e72:	f007 fea9 	bl	800dbc8 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	665a      	str	r2, [r3, #100]	; 0x64
 8005e8a:	e010      	b.n	8005eae <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fb f837 	bl	8000f06 <lfs_malloc>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8005ea6:	f06f 030b 	mvn.w	r3, #11
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005eac:	e09a      	b.n	8005fe4 <lfs_init+0x354>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb4:	2bff      	cmp	r3, #255	; 0xff
 8005eb6:	d906      	bls.n	8005ec6 <lfs_init+0x236>
 8005eb8:	4b28      	ldr	r3, [pc, #160]	; (8005f5c <lfs_init+0x2cc>)
 8005eba:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <lfs_init+0x2a0>)
 8005ebc:	f640 71b7 	movw	r1, #4023	; 0xfb7
 8005ec0:	481c      	ldr	r0, [pc, #112]	; (8005f34 <lfs_init+0x2a4>)
 8005ec2:	f007 fe81 	bl	800dbc8 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	22ff      	movs	r2, #255	; 0xff
 8005edc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	da06      	bge.n	8005ef6 <lfs_init+0x266>
 8005ee8:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <lfs_init+0x2d0>)
 8005eea:	4a11      	ldr	r2, [pc, #68]	; (8005f30 <lfs_init+0x2a0>)
 8005eec:	f640 71bd 	movw	r1, #4029	; 0xfbd
 8005ef0:	4810      	ldr	r0, [pc, #64]	; (8005f34 <lfs_init+0x2a4>)
 8005ef2:	f007 fe69 	bl	800dbc8 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d103      	bne.n	8005f10 <lfs_init+0x280>
        lfs->file_max = LFS_FILE_MAX;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005f0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d924      	bls.n	8005f68 <lfs_init+0x2d8>
 8005f1e:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <lfs_init+0x2d4>)
 8005f20:	4a03      	ldr	r2, [pc, #12]	; (8005f30 <lfs_init+0x2a0>)
 8005f22:	f640 71c3 	movw	r1, #4035	; 0xfc3
 8005f26:	4803      	ldr	r0, [pc, #12]	; (8005f34 <lfs_init+0x2a4>)
 8005f28:	f007 fe4e 	bl	800dbc8 <__assert_func>
 8005f2c:	0800f28c 	.word	0x0800f28c
 8005f30:	0800f738 	.word	0x0800f738
 8005f34:	0800f0dc 	.word	0x0800f0dc
 8005f38:	0800f2a8 	.word	0x0800f2a8
 8005f3c:	0800f2c4 	.word	0x0800f2c4
 8005f40:	0800f2e0 	.word	0x0800f2e0
 8005f44:	0800f310 	.word	0x0800f310
 8005f48:	0800f340 	.word	0x0800f340
 8005f4c:	0800f374 	.word	0x0800f374
 8005f50:	0800f3c0 	.word	0x0800f3c0
 8005f54:	0800f3dc 	.word	0x0800f3dc
 8005f58:	0800f3fc 	.word	0x0800f3fc
 8005f5c:	0800f450 	.word	0x0800f450
 8005f60:	0800f46c 	.word	0x0800f46c
 8005f64:	0800f490 	.word	0x0800f490
    lfs->attr_max = lfs->cfg->attr_max;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <lfs_init+0x2f2>
        lfs->attr_max = LFS_ATTR_MAX;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005f80:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d906      	bls.n	8005fa0 <lfs_init+0x310>
 8005f92:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <lfs_init+0x364>)
 8005f94:	4a18      	ldr	r2, [pc, #96]	; (8005ff8 <lfs_init+0x368>)
 8005f96:	f640 71c9 	movw	r1, #4041	; 0xfc9
 8005f9a:	4818      	ldr	r0, [pc, #96]	; (8005ffc <lfs_init+0x36c>)
 8005f9c:	f007 fe14 	bl	800dbc8 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa6:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f04f 32ff 	mov.w	r2, #4294967295
 8005fae:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	333c      	adds	r3, #60	; 0x3c
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3330      	adds	r3, #48	; 0x30
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3348      	adds	r3, #72	; 0x48
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e003      	b.n	8005fec <lfs_init+0x35c>

cleanup:
    lfs_deinit(lfs);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f80b 	bl	8006000 <lfs_deinit>
    return err;
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3730      	adds	r7, #48	; 0x30
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	0800f4ac 	.word	0x0800f4ac
 8005ff8:	0800f738 	.word	0x0800f738
 8005ffc:	0800f0dc 	.word	0x0800f0dc

08006000 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	2b00      	cmp	r3, #0
 8006010:	d104      	bne.n	800601c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	4618      	mov	r0, r3
 8006018:	f7fa ff81 	bl	8000f1e <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006022:	2b00      	cmp	r3, #0
 8006024:	d104      	bne.n	8006030 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	4618      	mov	r0, r3
 800602c:	f7fa ff77 	bl	8000f1e <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603e:	4618      	mov	r0, r3
 8006040:	f7fa ff6d 	bl	8000f1e <lfs_free>
    }

    return 0;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b0a0      	sub	sp, #128	; 0x80
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
    int err = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fe15 	bl	8005c90 <lfs_init>
 8006066:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006068:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <lfs_rawformat+0x22>
            return err;
 800606e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006070:	e082      	b.n	8006178 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	461a      	mov	r2, r3
 800607e:	2100      	movs	r1, #0
 8006080:	f007 fe28 	bl	800dcd4 <memset>
        lfs->free.off = 0;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7fa fe9b 	bl	8000dd6 <lfs_min>
 80060a0:	4602      	mov	r2, r0
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7fb fdbe 	bl	8001c2e <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80060b2:	f107 030c 	add.w	r3, r7, #12
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fd fb9d 	bl	80037f8 <lfs_dir_alloc>
 80060be:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80060c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d14f      	bne.n	8006166 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 80060c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060ca:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d0:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80060d2:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d8:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 80060da:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 80060e0:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 80060e6:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 80060ec:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 80060ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fb fcdf 	bl	8001ab6 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80060f8:	4b21      	ldr	r3, [pc, #132]	; (8006180 <lfs_rawformat+0x130>)
 80060fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060fc:	2300      	movs	r3, #0
 80060fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006100:	4b20      	ldr	r3, [pc, #128]	; (8006184 <lfs_rawformat+0x134>)
 8006102:	657b      	str	r3, [r7, #84]	; 0x54
 8006104:	4b20      	ldr	r3, [pc, #128]	; (8006188 <lfs_rawformat+0x138>)
 8006106:	65bb      	str	r3, [r7, #88]	; 0x58
 8006108:	4b20      	ldr	r3, [pc, #128]	; (800618c <lfs_rawformat+0x13c>)
 800610a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800610c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006110:	663b      	str	r3, [r7, #96]	; 0x60
 8006112:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006116:	f107 010c 	add.w	r1, r7, #12
 800611a:	2303      	movs	r3, #3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fe fcbb 	bl	8004a98 <lfs_dir_commit>
 8006122:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8006124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d11f      	bne.n	800616a <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8006130:	f107 010c 	add.w	r1, r7, #12
 8006134:	2300      	movs	r3, #0
 8006136:	2200      	movs	r2, #0
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7fe fcad 	bl	8004a98 <lfs_dir_commit>
 800613e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006140:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d113      	bne.n	800616e <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800614a:	2301      	movs	r3, #1
 800614c:	633b      	str	r3, [r7, #48]	; 0x30
 800614e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006152:	f107 030c 	add.w	r3, r7, #12
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7fc ffc9 	bl	80030f0 <lfs_dir_fetch>
 800615e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006162:	2b00      	cmp	r3, #0
 8006164:	e004      	b.n	8006170 <lfs_rawformat+0x120>
            goto cleanup;
 8006166:	bf00      	nop
 8006168:	e002      	b.n	8006170 <lfs_rawformat+0x120>
            goto cleanup;
 800616a:	bf00      	nop
 800616c:	e000      	b.n	8006170 <lfs_rawformat+0x120>
            goto cleanup;
 800616e:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff ff45 	bl	8006000 <lfs_deinit>
    return err;
 8006176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8006178:	4618      	mov	r0, r3
 800617a:	3780      	adds	r7, #128	; 0x80
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40100000 	.word	0x40100000
 8006184:	0ff00008 	.word	0x0ff00008
 8006188:	0800f4dc 	.word	0x0800f4dc
 800618c:	20100018 	.word	0x20100018

08006190 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006190:	b580      	push	{r7, lr}
 8006192:	b09c      	sub	sp, #112	; 0x70
 8006194:	af04      	add	r7, sp, #16
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fd77 	bl	8005c90 <lfs_init>
 80061a2:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 80061a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <lfs_rawmount+0x1e>
        return err;
 80061aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ac:	e10e      	b.n	80063cc <lfs_rawmount+0x23c>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80061ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061b2:	2220      	movs	r2, #32
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f007 fd8c 	bl	800dcd4 <memset>
 80061bc:	2301      	movs	r3, #1
 80061be:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 80061c4:	e0b8      	b.n	8006338 <lfs_rawmount+0x1a8>
        if (cycle >= lfs->cfg->block_count/2) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	085b      	lsrs	r3, r3, #1
 80061ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d303      	bcc.n	80061dc <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 80061d4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80061d8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80061da:	e0f3      	b.n	80063c4 <lfs_rawmount+0x234>
        }
        cycle += 1;
 80061dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061de:	3301      	adds	r3, #1
 80061e0:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
 80061e6:	4b7b      	ldr	r3, [pc, #492]	; (80063d4 <lfs_rawmount+0x244>)
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ea:	2308      	movs	r3, #8
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80061ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061f2:	f103 0218 	add.w	r2, r3, #24
 80061f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80061fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061fe:	9303      	str	r3, [sp, #12]
 8006200:	4b75      	ldr	r3, [pc, #468]	; (80063d8 <lfs_rawmount+0x248>)
 8006202:	9302      	str	r3, [sp, #8]
 8006204:	2300      	movs	r3, #0
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	4b74      	ldr	r3, [pc, #464]	; (80063dc <lfs_rawmount+0x24c>)
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	4b74      	ldr	r3, [pc, #464]	; (80063e0 <lfs_rawmount+0x250>)
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fc fc0e 	bl	8002a30 <lfs_dir_fetchmatch>
 8006214:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8006216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006218:	2b00      	cmp	r3, #0
 800621a:	da02      	bge.n	8006222 <lfs_rawmount+0x92>
            err = tag;
 800621c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800621e:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006220:	e0d0      	b.n	80063c4 <lfs_rawmount+0x234>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8006222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006224:	2b00      	cmp	r3, #0
 8006226:	d07a      	beq.n	800631e <lfs_rawmount+0x18e>
 8006228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622a:	4618      	mov	r0, r3
 800622c:	f7fb fa8e 	bl	800174c <lfs_tag_isdelete>
 8006230:	4603      	mov	r3, r0
 8006232:	f083 0301 	eor.w	r3, r3, #1
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d070      	beq.n	800631e <lfs_rawmount+0x18e>
            // update root
            lfs->root[0] = dir.pair[0];
 800623c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8006242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006248:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800624c:	f107 030c 	add.w	r3, r7, #12
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	4b64      	ldr	r3, [pc, #400]	; (80063e4 <lfs_rawmount+0x254>)
 8006254:	4a62      	ldr	r2, [pc, #392]	; (80063e0 <lfs_rawmount+0x250>)
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fb fe8e 	bl	8001f78 <lfs_dir_get>
 800625c:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800625e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006260:	2b00      	cmp	r3, #0
 8006262:	da02      	bge.n	800626a <lfs_rawmount+0xda>
                err = tag;
 8006264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006266:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006268:	e0ac      	b.n	80063c4 <lfs_rawmount+0x234>
            }
            lfs_superblock_fromle32(&superblock);
 800626a:	f107 030c 	add.w	r3, r7, #12
 800626e:	4618      	mov	r0, r3
 8006270:	f7fb fbe9 	bl	8001a46 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	0c1b      	lsrs	r3, r3, #16
 8006278:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8006282:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006286:	2b02      	cmp	r3, #2
 8006288:	d103      	bne.n	8006292 <lfs_rawmount+0x102>
 800628a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <lfs_rawmount+0x10a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8006292:	f06f 0315 	mvn.w	r3, #21
 8006296:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006298:	e040      	b.n	800631c <lfs_rawmount+0x18c>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <lfs_rawmount+0x128>
                if (superblock.name_max > lfs->name_max) {
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d903      	bls.n	80062b2 <lfs_rawmount+0x122>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 80062aa:	f06f 0315 	mvn.w	r3, #21
 80062ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80062b0:	e034      	b.n	800631c <lfs_rawmount+0x18c>
                }

                lfs->name_max = superblock.name_max;
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <lfs_rawmount+0x146>
                if (superblock.file_max > lfs->file_max) {
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d903      	bls.n	80062d0 <lfs_rawmount+0x140>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80062c8:	f06f 0315 	mvn.w	r3, #21
 80062cc:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80062ce:	e025      	b.n	800631c <lfs_rawmount+0x18c>
                }

                lfs->file_max = superblock.file_max;
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00b      	beq.n	80062f4 <lfs_rawmount+0x164>
                if (superblock.attr_max > lfs->attr_max) {
 80062dc:	6a3a      	ldr	r2, [r7, #32]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d903      	bls.n	80062ee <lfs_rawmount+0x15e>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80062e6:	f06f 0315 	mvn.w	r3, #21
 80062ea:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80062ec:	e016      	b.n	800631c <lfs_rawmount+0x18c>
                }

                lfs->attr_max = superblock.attr_max;
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d003      	beq.n	8006308 <lfs_rawmount+0x178>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8006300:	f06f 0315 	mvn.w	r3, #21
 8006304:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006306:	e009      	b.n	800631c <lfs_rawmount+0x18c>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	429a      	cmp	r2, r3
 8006312:	d004      	beq.n	800631e <lfs_rawmount+0x18e>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8006314:	f06f 0315 	mvn.w	r3, #21
 8006318:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800631a:	bf00      	nop
            goto cleanup;
 800631c:	e052      	b.n	80063c4 <lfs_rawmount+0x234>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fc fefc 	bl	8003128 <lfs_dir_getgstate>
 8006330:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8006332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d144      	bne.n	80063c2 <lfs_rawmount+0x232>
    while (!lfs_pair_isnull(dir.tail)) {
 8006338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800633c:	3318      	adds	r3, #24
 800633e:	4618      	mov	r0, r3
 8006340:	f7fb f954 	bl	80015ec <lfs_pair_isnull>
 8006344:	4603      	mov	r3, r0
 8006346:	f083 0301 	eor.w	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	f47f af3a 	bne.w	80061c6 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3320      	adds	r3, #32
 8006356:	4618      	mov	r0, r3
 8006358:	f7fb f948 	bl	80015ec <lfs_pair_isnull>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <lfs_rawmount+0x1da>
        err = LFS_ERR_INVAL;
 8006362:	f06f 0315 	mvn.w	r3, #21
 8006366:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8006368:	e02c      	b.n	80063c4 <lfs_rawmount+0x234>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3330      	adds	r3, #48	; 0x30
 800636e:	4618      	mov	r0, r3
 8006370:	f7fb fa88 	bl	8001884 <lfs_gstate_iszero>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	4618      	mov	r0, r3
 800637a:	f7fb f9da 	bl	8001732 <lfs_tag_isvalid>
 800637e:	4603      	mov	r3, r0
 8006380:	f083 0301 	eor.w	r3, r3, #1
 8006384:	b2db      	uxtb	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	441a      	add	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	333c      	adds	r3, #60	; 0x3c
 8006398:	3230      	adds	r2, #48	; 0x30
 800639a:	ca07      	ldmia	r2, {r0, r1, r2}
 800639c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063a8:	6a12      	ldr	r2, [r2, #32]
 80063aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80063ae:	fb02 f201 	mul.w	r2, r2, r1
 80063b2:	1a9a      	subs	r2, r3, r2
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fb fc46 	bl	8001c4a <lfs_alloc_drop>

    return 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	e004      	b.n	80063cc <lfs_rawmount+0x23c>
            goto cleanup;
 80063c2:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f80f 	bl	80063e8 <lfs_rawunmount>
    return err;
 80063ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3760      	adds	r7, #96	; 0x60
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	0800f4dc 	.word	0x0800f4dc
 80063d8:	0800318d 	.word	0x0800318d
 80063dc:	0ff00008 	.word	0x0ff00008
 80063e0:	7ffffc00 	.word	0x7ffffc00
 80063e4:	20100018 	.word	0x20100018

080063e8 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff fe05 	bl	8006000 <lfs_deinit>
 80063f6:	4603      	mov	r3, r0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b09d      	sub	sp, #116	; 0x74
 8006404:	af04      	add	r7, sp, #16
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800640e:	f107 0318 	add.w	r3, r7, #24
 8006412:	2220      	movs	r2, #32
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f007 fc5c 	bl	800dcd4 <memset>
 800641c:	2301      	movs	r3, #1
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8006424:	e0a8      	b.n	8006578 <lfs_fs_rawtraverse+0x178>
        if (cycle >= lfs->cfg->block_count/2) {
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006430:	429a      	cmp	r2, r3
 8006432:	d302      	bcc.n	800643a <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006434:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006438:	e103      	b.n	8006642 <lfs_fs_rawtraverse+0x242>
        }
        cycle += 1;
 800643a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800643c:	3301      	adds	r3, #1
 800643e:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8006440:	2300      	movs	r3, #0
 8006442:	65bb      	str	r3, [r7, #88]	; 0x58
 8006444:	e014      	b.n	8006470 <lfs_fs_rawtraverse+0x70>
            int err = cb(data, dir.tail[i]);
 8006446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006448:	3306      	adds	r3, #6
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006450:	4413      	add	r3, r2
 8006452:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4611      	mov	r1, r2
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	4798      	blx	r3
 800645e:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <lfs_fs_rawtraverse+0x6a>
                return err;
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	e0eb      	b.n	8006642 <lfs_fs_rawtraverse+0x242>
        for (int i = 0; i < 2; i++) {
 800646a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800646c:	3301      	adds	r3, #1
 800646e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006472:	2b01      	cmp	r3, #1
 8006474:	dde7      	ble.n	8006446 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8006476:	f107 0318 	add.w	r3, r7, #24
 800647a:	f103 0218 	add.w	r2, r3, #24
 800647e:	f107 0318 	add.w	r3, r7, #24
 8006482:	4619      	mov	r1, r3
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7fc fe33 	bl	80030f0 <lfs_dir_fetch>
 800648a:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800648c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <lfs_fs_rawtraverse+0x96>
            return err;
 8006492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006494:	e0d5      	b.n	8006642 <lfs_fs_rawtraverse+0x242>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8006496:	2300      	movs	r3, #0
 8006498:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800649c:	e067      	b.n	800656e <lfs_fs_rawtraverse+0x16e>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800649e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064a2:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80064a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064a8:	f043 0308 	orr.w	r3, r3, #8
 80064ac:	f107 0118 	add.w	r1, r7, #24
 80064b0:	f107 0210 	add.w	r2, r7, #16
 80064b4:	9200      	str	r2, [sp, #0]
 80064b6:	4a65      	ldr	r2, [pc, #404]	; (800664c <lfs_fs_rawtraverse+0x24c>)
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f7fb fd5d 	bl	8001f78 <lfs_dir_get>
 80064be:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 80064c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	da05      	bge.n	80064d2 <lfs_fs_rawtraverse+0xd2>
                if (tag == LFS_ERR_NOENT) {
 80064c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c8:	f113 0f02 	cmn.w	r3, #2
 80064cc:	d049      	beq.n	8006562 <lfs_fs_rawtraverse+0x162>
                    continue;
                }
                return tag;
 80064ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d0:	e0b7      	b.n	8006642 <lfs_fs_rawtraverse+0x242>
            }
            lfs_ctz_fromle32(&ctz);
 80064d2:	f107 0310 	add.w	r3, r7, #16
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fb fa85 	bl	80019e6 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80064dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fb f955 	bl	800178e <lfs_tag_type3>
 80064e4:	4603      	mov	r3, r0
 80064e6:	461a      	mov	r2, r3
 80064e8:	f240 2302 	movw	r3, #514	; 0x202
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d113      	bne.n	8006518 <lfs_fs_rawtraverse+0x118>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80064f0:	68f9      	ldr	r1, [r7, #12]
 80064f2:	6938      	ldr	r0, [r7, #16]
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	9202      	str	r2, [sp, #8]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	9201      	str	r2, [sp, #4]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4603      	mov	r3, r0
 8006502:	460a      	mov	r2, r1
 8006504:	2100      	movs	r1, #0
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f7fe fc86 	bl	8004e18 <lfs_ctz_traverse>
 800650c:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800650e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d027      	beq.n	8006564 <lfs_fs_rawtraverse+0x164>
                    return err;
 8006514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006516:	e094      	b.n	8006642 <lfs_fs_rawtraverse+0x242>
                }
            } else if (includeorphans &&
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d022      	beq.n	8006564 <lfs_fs_rawtraverse+0x164>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800651e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006520:	4618      	mov	r0, r3
 8006522:	f7fb f934 	bl	800178e <lfs_tag_type3>
 8006526:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8006528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652c:	d11a      	bne.n	8006564 <lfs_fs_rawtraverse+0x164>
                for (int i = 0; i < 2; i++) {
 800652e:	2300      	movs	r3, #0
 8006530:	653b      	str	r3, [r7, #80]	; 0x50
 8006532:	e012      	b.n	800655a <lfs_fs_rawtraverse+0x15a>
                    err = cb(data, (&ctz.head)[i]);
 8006534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	f107 0210 	add.w	r2, r7, #16
 800653c:	4413      	add	r3, r2
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4611      	mov	r1, r2
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	4798      	blx	r3
 8006548:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800654a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <lfs_fs_rawtraverse+0x154>
                        return err;
 8006550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006552:	e076      	b.n	8006642 <lfs_fs_rawtraverse+0x242>
                for (int i = 0; i < 2; i++) {
 8006554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006556:	3301      	adds	r3, #1
 8006558:	653b      	str	r3, [r7, #80]	; 0x50
 800655a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655c:	2b01      	cmp	r3, #1
 800655e:	dde9      	ble.n	8006534 <lfs_fs_rawtraverse+0x134>
 8006560:	e000      	b.n	8006564 <lfs_fs_rawtraverse+0x164>
                    continue;
 8006562:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006564:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006568:	3301      	adds	r3, #1
 800656a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800656e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006570:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8006574:	429a      	cmp	r2, r3
 8006576:	d392      	bcc.n	800649e <lfs_fs_rawtraverse+0x9e>
    while (!lfs_pair_isnull(dir.tail)) {
 8006578:	f107 0318 	add.w	r3, r7, #24
 800657c:	3318      	adds	r3, #24
 800657e:	4618      	mov	r0, r3
 8006580:	f7fb f834 	bl	80015ec <lfs_pair_isnull>
 8006584:	4603      	mov	r3, r0
 8006586:	f083 0301 	eor.w	r3, r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	f47f af4a 	bne.w	8006426 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006598:	e04f      	b.n	800663a <lfs_fs_rawtraverse+0x23a>
        if (f->type != LFS_TYPE_REG) {
 800659a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800659c:	799b      	ldrb	r3, [r3, #6]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d147      	bne.n	8006632 <lfs_fs_rawtraverse+0x232>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80065a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01d      	beq.n	80065ea <lfs_fs_rawtraverse+0x1ea>
 80065ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d117      	bne.n	80065ea <lfs_fs_rawtraverse+0x1ea>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80065ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065bc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80065c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	9202      	str	r2, [sp, #8]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	9201      	str	r2, [sp, #4]
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	4623      	mov	r3, r4
 80065d6:	4602      	mov	r2, r0
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f7fe fc1d 	bl	8004e18 <lfs_ctz_traverse>
 80065de:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80065e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <lfs_fs_rawtraverse+0x1ea>
                return err;
 80065e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e8:	e02b      	b.n	8006642 <lfs_fs_rawtraverse+0x242>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80065ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01e      	beq.n	8006634 <lfs_fs_rawtraverse+0x234>
 80065f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d118      	bne.n	8006634 <lfs_fs_rawtraverse+0x234>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006604:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800660e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	9202      	str	r2, [sp, #8]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	9201      	str	r2, [sp, #4]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	4623      	mov	r3, r4
 800661e:	4602      	mov	r2, r0
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7fe fbf9 	bl	8004e18 <lfs_ctz_traverse>
 8006626:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8006628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <lfs_fs_rawtraverse+0x234>
                return err;
 800662e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006630:	e007      	b.n	8006642 <lfs_fs_rawtraverse+0x242>
            continue;
 8006632:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800663a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1ac      	bne.n	800659a <lfs_fs_rawtraverse+0x19a>
            }
        }
    }
#endif

    return 0;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3764      	adds	r7, #100	; 0x64
 8006646:	46bd      	mov	sp, r7
 8006648:	bd90      	pop	{r4, r7, pc}
 800664a:	bf00      	nop
 800664c:	700ffc00 	.word	0x700ffc00

08006650 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 800666c:	e024      	b.n	80066b8 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	085b      	lsrs	r3, r3, #1
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	429a      	cmp	r2, r3
 800667a:	d302      	bcc.n	8006682 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800667c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006680:	e027      	b.n	80066d2 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	3301      	adds	r3, #1
 8006686:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3318      	adds	r3, #24
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f7fa ffc6 	bl	8001620 <lfs_pair_cmp>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <lfs_fs_pred+0x4e>
            return 0;
 800669a:	2300      	movs	r3, #0
 800669c:	e019      	b.n	80066d2 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3318      	adds	r3, #24
 80066a2:	461a      	mov	r2, r3
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7fc fd22 	bl	80030f0 <lfs_dir_fetch>
 80066ac:	6138      	str	r0, [r7, #16]
        if (err) {
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <lfs_fs_pred+0x68>
            return err;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	e00c      	b.n	80066d2 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3318      	adds	r3, #24
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fa ff95 	bl	80015ec <lfs_pair_isnull>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f083 0301 	eor.w	r3, r3, #1
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1cf      	bne.n	800666e <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80066ce:	f06f 0301 	mvn.w	r3, #1
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80066da:	b5b0      	push	{r4, r5, r7, lr}
 80066dc:	b08e      	sub	sp, #56	; 0x38
 80066de:	af04      	add	r7, sp, #16
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80066fa:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8006700:	69dd      	ldr	r5, [r3, #28]
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	6852      	ldr	r2, [r2, #4]
 800670a:	2108      	movs	r1, #8
 800670c:	9103      	str	r1, [sp, #12]
 800670e:	f107 0110 	add.w	r1, r7, #16
 8006712:	9102      	str	r1, [sp, #8]
 8006714:	9201      	str	r2, [sp, #4]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	462b      	mov	r3, r5
 800671a:	4622      	mov	r2, r4
 800671c:	4601      	mov	r1, r0
 800671e:	6a38      	ldr	r0, [r7, #32]
 8006720:	f7fa fc2c 	bl	8000f7c <lfs_bd_read>
 8006724:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <lfs_fs_parent_match+0x56>
        return err;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	e012      	b.n	8006756 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8006730:	f107 0310 	add.w	r3, r7, #16
 8006734:	4618      	mov	r0, r3
 8006736:	f7fa ffc8 	bl	80016ca <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	1d1a      	adds	r2, r3, #4
 800673e:	f107 0310 	add.w	r3, r7, #16
 8006742:	4611      	mov	r1, r2
 8006744:	4618      	mov	r0, r3
 8006746:	f7fa ff6b 	bl	8001620 <lfs_pair_cmp>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	bf14      	ite	ne
 8006750:	2301      	movne	r3, #1
 8006752:	2300      	moveq	r3, #0
 8006754:	b2db      	uxtb	r3, r3
}
 8006756:	4618      	mov	r0, r3
 8006758:	3728      	adds	r7, #40	; 0x28
 800675a:	46bd      	mov	sp, r7
 800675c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006760 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b08e      	sub	sp, #56	; 0x38
 8006764:	af04      	add	r7, sp, #16
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 800677c:	e02f      	b.n	80067de <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006788:	429a      	cmp	r2, r3
 800678a:	d302      	bcc.n	8006792 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800678c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006790:	e032      	b.n	80067f8 <lfs_fs_parent+0x98>
        }
        cycle += 1;
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	3301      	adds	r3, #1
 8006796:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80067ae:	f107 0314 	add.w	r3, r7, #20
 80067b2:	9303      	str	r3, [sp, #12]
 80067b4:	4b12      	ldr	r3, [pc, #72]	; (8006800 <lfs_fs_parent+0xa0>)
 80067b6:	9302      	str	r3, [sp, #8]
 80067b8:	2300      	movs	r3, #0
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	4b11      	ldr	r3, [pc, #68]	; (8006804 <lfs_fs_parent+0xa4>)
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <lfs_fs_parent+0xa8>)
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7fc f933 	bl	8002a30 <lfs_dir_fetchmatch>
 80067ca:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <lfs_fs_parent+0x7e>
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f113 0f02 	cmn.w	r3, #2
 80067d8:	d001      	beq.n	80067de <lfs_fs_parent+0x7e>
            return tag;
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	e00c      	b.n	80067f8 <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3318      	adds	r3, #24
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fa ff02 	bl	80015ec <lfs_pair_isnull>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f083 0301 	eor.w	r3, r3, #1
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1c4      	bne.n	800677e <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80067f4:	f06f 0301 	mvn.w	r3, #1
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3728      	adds	r7, #40	; 0x28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	080066db 	.word	0x080066db
 8006804:	20000008 	.word	0x20000008
 8006808:	7ff003ff 	.word	0x7ff003ff

0800680c <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	4618      	mov	r0, r3
 800681e:	f7fa ffed 	bl	80017fc <lfs_tag_size>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <lfs_fs_preporphans+0x32>
 8006828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800682c:	2b00      	cmp	r3, #0
 800682e:	da06      	bge.n	800683e <lfs_fs_preporphans+0x32>
 8006830:	4b10      	ldr	r3, [pc, #64]	; (8006874 <lfs_fs_preporphans+0x68>)
 8006832:	4a11      	ldr	r2, [pc, #68]	; (8006878 <lfs_fs_preporphans+0x6c>)
 8006834:	f241 117d 	movw	r1, #4477	; 0x117d
 8006838:	4810      	ldr	r0, [pc, #64]	; (800687c <lfs_fs_preporphans+0x70>)
 800683a:	f007 f9c5 	bl	800dbc8 <__assert_func>
    lfs->gstate.tag += orphans;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006842:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006846:	441a      	add	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3330      	adds	r3, #48	; 0x30
 8006858:	4618      	mov	r0, r3
 800685a:	f7fb f82f 	bl	80018bc <lfs_gstate_hasorphans>
 800685e:	4603      	mov	r3, r0
 8006860:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006862:	ea44 0203 	orr.w	r2, r4, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	bd90      	pop	{r4, r7, pc}
 8006874:	0800f4e8 	.word	0x0800f4e8
 8006878:	0800f744 	.word	0x0800f744
 800687c:	0800f0dc 	.word	0x0800f0dc

08006880 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	460b      	mov	r3, r1
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	4a17      	ldr	r2, [pc, #92]	; (80068f0 <lfs_fs_prepmove+0x70>)
 8006894:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006896:	897b      	ldrh	r3, [r7, #10]
 8006898:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800689c:	428b      	cmp	r3, r1
 800689e:	d006      	beq.n	80068ae <lfs_fs_prepmove+0x2e>
 80068a0:	897b      	ldrh	r3, [r7, #10]
 80068a2:	029b      	lsls	r3, r3, #10
 80068a4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80068a8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80068ac:	e000      	b.n	80068b0 <lfs_fs_prepmove+0x30>
 80068ae:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80068b0:	431a      	orrs	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80068b6:	897b      	ldrh	r3, [r7, #10]
 80068b8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80068bc:	4293      	cmp	r3, r2
 80068be:	d002      	beq.n	80068c6 <lfs_fs_prepmove+0x46>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	e000      	b.n	80068c8 <lfs_fs_prepmove+0x48>
 80068c6:	2300      	movs	r3, #0
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80068cc:	897b      	ldrh	r3, [r7, #10]
 80068ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d003      	beq.n	80068de <lfs_fs_prepmove+0x5e>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3304      	adds	r3, #4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	e000      	b.n	80068e0 <lfs_fs_prepmove+0x60>
 80068de:	2300      	movs	r3, #0
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80068e4:	bf00      	nop
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	800003ff 	.word	0x800003ff

080068f4 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b090      	sub	sp, #64	; 0x40
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	333c      	adds	r3, #60	; 0x3c
 8006900:	4618      	mov	r0, r3
 8006902:	f7fa fffd 	bl	8001900 <lfs_gstate_hasmove>
 8006906:	4603      	mov	r3, r0
 8006908:	f083 0301 	eor.w	r3, r3, #1
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <lfs_fs_demove+0x22>
        return 0;
 8006912:	2300      	movs	r3, #0
 8006914:	e033      	b.n	800697e <lfs_fs_demove+0x8a>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800691c:	f107 0318 	add.w	r3, r7, #24
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fc fbe4 	bl	80030f0 <lfs_dir_fetch>
 8006928:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 800692a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <lfs_fs_demove+0x40>
        return err;
 8006930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006932:	e024      	b.n	800697e <lfs_fs_demove+0x8a>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	4618      	mov	r0, r3
 800693a:	f7fa ff50 	bl	80017de <lfs_tag_id>
 800693e:	4603      	mov	r3, r0
 8006940:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006942:	2200      	movs	r2, #0
 8006944:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff ff99 	bl	8006880 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800694e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006950:	029b      	lsls	r3, r3, #10
 8006952:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006956:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	f107 0210 	add.w	r2, r7, #16
 8006964:	f107 0118 	add.w	r1, r7, #24
 8006968:	2301      	movs	r3, #1
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fe f894 	bl	8004a98 <lfs_dir_commit>
 8006970:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <lfs_fs_demove+0x88>
        return err;
 8006978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697a:	e000      	b.n	800697e <lfs_fs_demove+0x8a>
    }

    return 0;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3740      	adds	r7, #64	; 0x40
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006988:	b5b0      	push	{r4, r5, r7, lr}
 800698a:	b0b0      	sub	sp, #192	; 0xc0
 800698c:	af02      	add	r7, sp, #8
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3330      	adds	r3, #48	; 0x30
 8006998:	4618      	mov	r0, r3
 800699a:	f7fa ff8f 	bl	80018bc <lfs_gstate_hasorphans>
 800699e:	4603      	mov	r3, r0
 80069a0:	f083 0301 	eor.w	r3, r3, #1
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <lfs_fs_deorphan+0x26>
        return 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	e14f      	b.n	8006c4e <lfs_fs_deorphan+0x2c6>
    }

    int8_t found = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80069b4:	f107 030c 	add.w	r3, r7, #12
 80069b8:	2220      	movs	r2, #32
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f007 f989 	bl	800dcd4 <memset>
 80069c2:	2301      	movs	r3, #1
 80069c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c8:	2301      	movs	r3, #1
 80069ca:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 80069cc:	e11b      	b.n	8006c06 <lfs_fs_deorphan+0x27e>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80069ce:	f107 030c 	add.w	r3, r7, #12
 80069d2:	f103 0218 	add.w	r2, r3, #24
 80069d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fc fb87 	bl	80030f0 <lfs_dir_fetch>
 80069e2:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 80069e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <lfs_fs_deorphan+0x6c>
                return err;
 80069ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80069f2:	e12c      	b.n	8006c4e <lfs_fs_deorphan+0x2c6>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 80069f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f8:	f083 0301 	eor.w	r3, r3, #1
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80f7 	beq.w	8006bf2 <lfs_fs_deorphan+0x26a>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006a04:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006a08:	f107 030c 	add.w	r3, r7, #12
 8006a0c:	3318      	adds	r3, #24
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fea5 	bl	8006760 <lfs_fs_parent>
 8006a16:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da07      	bge.n	8006a32 <lfs_fs_deorphan+0xaa>
 8006a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a26:	f113 0f02 	cmn.w	r3, #2
 8006a2a:	d002      	beq.n	8006a32 <lfs_fs_deorphan+0xaa>
                    return tag;
 8006a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a30:	e10d      	b.n	8006c4e <lfs_fs_deorphan+0x2c6>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 8006a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a36:	f113 0f02 	cmn.w	r3, #2
 8006a3a:	d14b      	bne.n	8006ad4 <lfs_fs_deorphan+0x14c>
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d048      	beq.n	8006ad4 <lfs_fs_deorphan+0x14c>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fc fb6a 	bl	8003128 <lfs_dir_getgstate>
 8006a54:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 8006a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <lfs_fs_deorphan+0xde>
                        return err;
 8006a60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a64:	e0f3      	b.n	8006c4e <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a6a:	3318      	adds	r3, #24
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fa fe46 	bl	80016fe <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006a72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a76:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006a7a:	051a      	lsls	r2, r3, #20
 8006a7c:	4b76      	ldr	r3, [pc, #472]	; (8006c58 <lfs_fs_deorphan+0x2d0>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a88:	3318      	adds	r3, #24
 8006a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a8e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8006a92:	f107 010c 	add.w	r1, r7, #12
 8006a96:	2301      	movs	r3, #1
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7fd fd43 	bl	8004524 <lfs_dir_orphaningcommit>
 8006a9e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8006aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006aa6:	3318      	adds	r3, #24
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fa fe0e 	bl	80016ca <lfs_pair_fromle32>
                    if (state < 0) {
 8006aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	da02      	bge.n	8006abc <lfs_fs_deorphan+0x134>
                        return state;
 8006ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 8006aba:	e0c8      	b.n	8006c4e <lfs_fs_deorphan+0x2c6>
                    }

                    found += 1;
 8006abc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8006ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	f040 808e 	bne.w	8006bee <lfs_fs_deorphan+0x266>
                        goto restart;
 8006ad2:	e76f      	b.n	80069b4 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8006ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ad8:	f113 0f02 	cmn.w	r3, #2
 8006adc:	f000 8089 	beq.w	8006bf2 <lfs_fs_deorphan+0x26a>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8006ae0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ae4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8006ae8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	4613      	mov	r3, r2
 8006af0:	4a5a      	ldr	r2, [pc, #360]	; (8006c5c <lfs_fs_deorphan+0x2d4>)
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fb fa40 	bl	8001f78 <lfs_dir_get>
 8006af8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8006afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da02      	bge.n	8006b0a <lfs_fs_deorphan+0x182>
                        return state;
 8006b04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b08:	e0a1      	b.n	8006c4e <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8006b0a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fa fddb 	bl	80016ca <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8006b14:	f107 030c 	add.w	r3, r7, #12
 8006b18:	f103 0218 	add.w	r2, r3, #24
 8006b1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006b20:	4611      	mov	r1, r2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fa fda5 	bl	8001672 <lfs_pair_sync>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f083 0301 	eor.w	r3, r3, #1
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d05e      	beq.n	8006bf2 <lfs_fs_deorphan+0x26a>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8006b34:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006b38:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3330      	adds	r3, #48	; 0x30
 8006b40:	f107 020c 	add.w	r2, r7, #12
 8006b44:	4611      	mov	r1, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fa feed 	bl	8001926 <lfs_gstate_hasmovehere>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00d      	beq.n	8006b6e <lfs_fs_deorphan+0x1e6>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fa fe41 	bl	80017de <lfs_tag_id>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006b62:	2200      	movs	r2, #0
 8006b64:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff fe89 	bl	8006880 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8006b6e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fa fdc3 	bl	80016fe <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006b78:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b7c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d007      	beq.n	8006b94 <lfs_fs_deorphan+0x20c>
 8006b84:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b88:	029b      	lsls	r3, r3, #10
 8006b8a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006b8e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006b92:	e000      	b.n	8006b96 <lfs_fs_deorphan+0x20e>
 8006b94:	2300      	movs	r3, #0
 8006b96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b9e:	4b30      	ldr	r3, [pc, #192]	; (8006c60 <lfs_fs_deorphan+0x2d8>)
 8006ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ba4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bac:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006bb0:	f107 010c 	add.w	r1, r7, #12
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fd fcb4 	bl	8004524 <lfs_dir_orphaningcommit>
 8006bbc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8006bc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fa fd80 	bl	80016ca <lfs_pair_fromle32>
                        if (state < 0) {
 8006bca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	da02      	bge.n	8006bd8 <lfs_fs_deorphan+0x250>
                            return state;
 8006bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8006bd6:	e03a      	b.n	8006c4e <lfs_fs_deorphan+0x2c6>
                        }

                        found += 1;
 8006bd8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006bdc:	3301      	adds	r3, #1
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8006be4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d10c      	bne.n	8006c06 <lfs_fs_deorphan+0x27e>
 8006bec:	e6e2      	b.n	80069b4 <lfs_fs_deorphan+0x2c>
                    continue;
 8006bee:	bf00      	nop
 8006bf0:	e009      	b.n	8006c06 <lfs_fs_deorphan+0x27e>
                        continue;
                    }
                }
            }

            pdir = dir;
 8006bf2:	f107 040c 	add.w	r4, r7, #12
 8006bf6:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8006bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8006c06:	f107 030c 	add.w	r3, r7, #12
 8006c0a:	3318      	adds	r3, #24
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fa fced 	bl	80015ec <lfs_pair_isnull>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f083 0301 	eor.w	r3, r3, #1
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f47f aed7 	bne.w	80069ce <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3330      	adds	r3, #48	; 0x30
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fa fe5c 	bl	80018e2 <lfs_gstate_getorphans>
 8006c2a:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8006c32:	4619      	mov	r1, r3
 8006c34:	4610      	mov	r0, r2
 8006c36:	f7fa f8ce 	bl	8000dd6 <lfs_min>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	425b      	negs	r3, r3
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	b25b      	sxtb	r3, r3
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fde0 	bl	800680c <lfs_fs_preporphans>
 8006c4c:	4603      	mov	r3, r0
            found));
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	37b8      	adds	r7, #184	; 0xb8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bdb0      	pop	{r4, r5, r7, pc}
 8006c56:	bf00      	nop
 8006c58:	000ffc08 	.word	0x000ffc08
 8006c5c:	7ffffc00 	.word	0x7ffffc00
 8006c60:	600ffc08 	.word	0x600ffc08

08006c64 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff fe41 	bl	80068f4 <lfs_fs_demove>
 8006c72:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <lfs_fs_forceconsistency+0x1a>
        return err;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	e00a      	b.n	8006c94 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 8006c7e:	2101      	movs	r1, #1
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff fe81 	bl	8006988 <lfs_fs_deorphan>
 8006c86:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <lfs_fs_forceconsistency+0x2e>
        return err;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	e000      	b.n	8006c94 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	601a      	str	r2, [r3, #0]
    return 0;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8006ccc:	f107 0208 	add.w	r2, r7, #8
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4907      	ldr	r1, [pc, #28]	; (8006cf0 <lfs_fs_rawsize+0x30>)
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff fb93 	bl	8006400 <lfs_fs_rawtraverse>
 8006cda:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <lfs_fs_rawsize+0x26>
        return err;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	e000      	b.n	8006ce8 <lfs_fs_rawsize+0x28>
    }

    return size;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	08006c9d 	.word	0x08006c9d

08006cf4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <lfs_format+0x18>
        return err;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	e005      	b.n	8006d18 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff f99e 	bl	8006050 <lfs_rawformat>
 8006d14:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8006d16:	68fb      	ldr	r3, [r7, #12]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <lfs_mount+0x18>
        return err;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	e005      	b.n	8006d44 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fa28 	bl	8006190 <lfs_rawmount>
 8006d40:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8006d42:	68fb      	ldr	r3, [r7, #12]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]
    if (err) {
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <lfs_file_open+0x1c>
        return err;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	e01a      	b.n	8006d9e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	68b9      	ldr	r1, [r7, #8]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fa fed9 	bl	8001b26 <lfs_mlist_isopen>
 8006d74:	4603      	mov	r3, r0
 8006d76:	f083 0301 	eor.w	r3, r3, #1
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <lfs_file_open+0x42>
 8006d80:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <lfs_file_open+0x5c>)
 8006d82:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <lfs_file_open+0x60>)
 8006d84:	f241 5197 	movw	r1, #5527	; 0x1597
 8006d88:	4809      	ldr	r0, [pc, #36]	; (8006db0 <lfs_file_open+0x64>)
 8006d8a:	f006 ff1d 	bl	800dbc8 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7fe fa8d 	bl	80052b4 <lfs_file_rawopen>
 8006d9a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006d9c:	697b      	ldr	r3, [r7, #20]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	0800f51c 	.word	0x0800f51c
 8006dac:	0800f758 	.word	0x0800f758
 8006db0:	0800f0dc 	.word	0x0800f0dc

08006db4 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <lfs_file_close+0x18>
        return err;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	e015      	b.n	8006df8 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fa fea7 	bl	8001b26 <lfs_mlist_isopen>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <lfs_file_close+0x38>
 8006dde:	4b08      	ldr	r3, [pc, #32]	; (8006e00 <lfs_file_close+0x4c>)
 8006de0:	4a08      	ldr	r2, [pc, #32]	; (8006e04 <lfs_file_close+0x50>)
 8006de2:	f241 51bb 	movw	r1, #5563	; 0x15bb
 8006de6:	4808      	ldr	r0, [pc, #32]	; (8006e08 <lfs_file_close+0x54>)
 8006de8:	f006 feee 	bl	800dbc8 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fe fa78 	bl	80052e4 <lfs_file_rawclose>
 8006df4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006df6:	68fb      	ldr	r3, [r7, #12]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	0800f554 	.word	0x0800f554
 8006e04:	0800f768 	.word	0x0800f768
 8006e08:	0800f0dc 	.word	0x0800f0dc

08006e0c <lfs_file_write>:
    return res;
}

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]
    if (err) {
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <lfs_file_write+0x1c>
        return err;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	e017      	b.n	8006e58 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fa fe79 	bl	8001b26 <lfs_mlist_isopen>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <lfs_file_write+0x3c>
 8006e3a:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <lfs_file_write+0x54>)
 8006e3c:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <lfs_file_write+0x58>)
 8006e3e:	f241 51ef 	movw	r1, #5615	; 0x15ef
 8006e42:	4809      	ldr	r0, [pc, #36]	; (8006e68 <lfs_file_write+0x5c>)
 8006e44:	f006 fec0 	bl	800dbc8 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7fe fe9a 	bl	8005b88 <lfs_file_rawwrite>
 8006e54:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8006e56:	693b      	ldr	r3, [r7, #16]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	0800f554 	.word	0x0800f554
 8006e64:	0800f778 	.word	0x0800f778
 8006e68:	0800f0dc 	.word	0x0800f0dc

08006e6c <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	e024      	b.n	8006ecc <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	091a      	lsrs	r2, r3, #4
 8006e86:	6939      	ldr	r1, [r7, #16]
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	440b      	add	r3, r1
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	404b      	eors	r3, r1
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	4911      	ldr	r1, [pc, #68]	; (8006ee0 <lfs_crc+0x74>)
 8006e9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006e9e:	4053      	eors	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	091a      	lsrs	r2, r3, #4
 8006ea6:	6939      	ldr	r1, [r7, #16]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	440b      	add	r3, r1
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	091b      	lsrs	r3, r3, #4
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	404b      	eors	r3, r1
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	4908      	ldr	r1, [pc, #32]	; (8006ee0 <lfs_crc+0x74>)
 8006ebe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ec2:	4053      	eors	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d3d6      	bcc.n	8006e82 <lfs_crc+0x16>
    }

    return crc;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	0800f788 	.word	0x0800f788

08006ee4 <nor_delay_us>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	DmaEnd = 1;
}

void nor_delay_us(uint32_t us){
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 8006eec:	2001      	movs	r0, #1
 8006eee:	f001 fd37 	bl	8008960 <HAL_Delay>
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <nor_cs_assert>:

void nor_cs_assert(){
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_FLASH_MEMORY_PORT, CS_FLASH_MEMORY_PIN, GPIO_PIN_RESET);
 8006f00:	2200      	movs	r2, #0
 8006f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f06:	4802      	ldr	r0, [pc, #8]	; (8006f10 <nor_cs_assert+0x14>)
 8006f08:	f002 f858 	bl	8008fbc <HAL_GPIO_WritePin>
}
 8006f0c:	bf00      	nop
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40010c00 	.word	0x40010c00

08006f14 <nor_cs_deassert>:

void nor_cs_deassert(){
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_FLASH_MEMORY_PORT, CS_FLASH_MEMORY_PIN, GPIO_PIN_SET);
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f1e:	4802      	ldr	r0, [pc, #8]	; (8006f28 <nor_cs_deassert+0x14>)
 8006f20:	f002 f84c 	bl	8008fbc <HAL_GPIO_WritePin>
}
 8006f24:	bf00      	nop
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	40010c00 	.word	0x40010c00

08006f2c <nor_spi_tx>:

void nor_spi_tx(uint8_t *pData, uint32_t Size){
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
	DmaEnd = 0;
 8006f36:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <nor_spi_tx+0x28>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&SPI_PIN_FLASH, pData, Size, 1000);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4804      	ldr	r0, [pc, #16]	; (8006f58 <nor_spi_tx+0x2c>)
 8006f48:	f004 fb12 	bl	800b570 <HAL_SPI_Transmit>

}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	200001a0 	.word	0x200001a0
 8006f58:	200004f8 	.word	0x200004f8

08006f5c <nor_spi_rx>:

void nor_spi_rx(uint8_t *pData, uint32_t Size){
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
	DmaEnd = 0;
 8006f66:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <nor_spi_rx+0x28>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&SPI_PIN_FLASH, pData, Size, 1000);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	4804      	ldr	r0, [pc, #16]	; (8006f88 <nor_spi_rx+0x2c>)
 8006f78:	f004 fc3e 	bl	800b7f8 <HAL_SPI_Receive>

}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	200001a0 	.word	0x200001a0
 8006f88:	200004f8 	.word	0x200004f8

08006f8c <__init_nor>:

void __init_nor(){
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
	Nor.config.CsAssert = nor_cs_assert;
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <__init_nor+0x38>)
 8006f92:	4a0d      	ldr	r2, [pc, #52]	; (8006fc8 <__init_nor+0x3c>)
 8006f94:	609a      	str	r2, [r3, #8]
	Nor.config.CsDeassert = nor_cs_deassert;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <__init_nor+0x38>)
 8006f98:	4a0c      	ldr	r2, [pc, #48]	; (8006fcc <__init_nor+0x40>)
 8006f9a:	60da      	str	r2, [r3, #12]
	Nor.config.DelayUs = nor_delay_us;
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <__init_nor+0x38>)
 8006f9e:	4a0c      	ldr	r2, [pc, #48]	; (8006fd0 <__init_nor+0x44>)
 8006fa0:	611a      	str	r2, [r3, #16]
	Nor.config.SpiRxFxn = nor_spi_rx;
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <__init_nor+0x38>)
 8006fa4:	4a0b      	ldr	r2, [pc, #44]	; (8006fd4 <__init_nor+0x48>)
 8006fa6:	605a      	str	r2, [r3, #4]
	Nor.config.SpiTxFxn = nor_spi_tx;
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <__init_nor+0x38>)
 8006faa:	4a0b      	ldr	r2, [pc, #44]	; (8006fd8 <__init_nor+0x4c>)
 8006fac:	601a      	str	r2, [r3, #0]

	if (NOR_Init(&Nor) != NOR_OK){ //NOR_Init
 8006fae:	4805      	ldr	r0, [pc, #20]	; (8006fc4 <__init_nor+0x38>)
 8006fb0:	f000 fe9e 	bl	8007cf0 <NOR_Init>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <__init_nor+0x32>
		Error_Handler();
 8006fba:	f000 fd2d 	bl	8007a18 <Error_Handler>
	}
}
 8006fbe:	bf00      	nop
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000418 	.word	0x20000418
 8006fc8:	08006efd 	.word	0x08006efd
 8006fcc:	08006f15 	.word	0x08006f15
 8006fd0:	08006ee5 	.word	0x08006ee5
 8006fd4:	08006f5d 	.word	0x08006f5d
 8006fd8:	08006f2d 	.word	0x08006f2d

08006fdc <_fs_read>:

/** Start LittleFs **/

int _fs_read(const struct lfs_config *c, lfs_block_t block,
            lfs_off_t off, void *buffer, lfs_size_t size){
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]

	if (NOR_ReadSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	4806      	ldr	r0, [pc, #24]	; (8007010 <_fs_read+0x34>)
 8006ff6:	f001 f8cd 	bl	8008194 <NOR_ReadSector>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <_fs_read+0x28>
		return 0;
 8007000:	2300      	movs	r3, #0
 8007002:	e001      	b.n	8007008 <_fs_read+0x2c>
	}

	return LFS_ERR_IO;
 8007004:	f06f 0304 	mvn.w	r3, #4
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20000418 	.word	0x20000418

08007014 <_fs_write>:

int _fs_write(const struct lfs_config *c, lfs_block_t block,
        lfs_off_t off, const void *buffer, lfs_size_t size){
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]

	if (NOR_WriteSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	4806      	ldr	r0, [pc, #24]	; (8007048 <_fs_write+0x34>)
 800702e:	f001 f80b 	bl	8008048 <NOR_WriteSector>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <_fs_write+0x28>
		return 0;
 8007038:	2300      	movs	r3, #0
 800703a:	e001      	b.n	8007040 <_fs_write+0x2c>
	}

	return LFS_ERR_IO;
 800703c:	f06f 0304 	mvn.w	r3, #4
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20000418 	.word	0x20000418

0800704c <_fs_erase>:

int _fs_erase(const struct lfs_config *c, lfs_block_t block){
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
	if (NOR_EraseSector(&Nor, block) == NOR_OK){
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	4806      	ldr	r0, [pc, #24]	; (8007074 <_fs_erase+0x28>)
 800705a:	f000 ff61 	bl	8007f20 <NOR_EraseSector>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <_fs_erase+0x1c>
		return 0;
 8007064:	2300      	movs	r3, #0
 8007066:	e001      	b.n	800706c <_fs_erase+0x20>
	}

	return LFS_ERR_IO;
 8007068:	f06f 0304 	mvn.w	r3, #4
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000418 	.word	0x20000418

08007078 <_fs_sync>:

int _fs_sync(const struct lfs_config *c){
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
	return 0;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <__init_littefs>:
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
}
void __init_littefs(){
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
	// because of static qualifier, this variable
	// will have a dedicated address
		int Error;

		LfsConfig.read_size = 256;
 8007092:	4b3e      	ldr	r3, [pc, #248]	; (800718c <__init_littefs+0x100>)
 8007094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007098:	615a      	str	r2, [r3, #20]
		LfsConfig.prog_size = 256;
 800709a:	4b3c      	ldr	r3, [pc, #240]	; (800718c <__init_littefs+0x100>)
 800709c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070a0:	619a      	str	r2, [r3, #24]
		LfsConfig.block_size = Nor.info.u16SectorSize;
 80070a2:	4b3b      	ldr	r3, [pc, #236]	; (8007190 <__init_littefs+0x104>)
 80070a4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80070a6:	461a      	mov	r2, r3
 80070a8:	4b38      	ldr	r3, [pc, #224]	; (800718c <__init_littefs+0x100>)
 80070aa:	61da      	str	r2, [r3, #28]
		LfsConfig.block_count =  16384;//Nor.info.u32SectorCount;
 80070ac:	4b37      	ldr	r3, [pc, #220]	; (800718c <__init_littefs+0x100>)
 80070ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070b2:	621a      	str	r2, [r3, #32]
		LfsConfig.cache_size = Nor.info.u16PageSize;
 80070b4:	4b36      	ldr	r3, [pc, #216]	; (8007190 <__init_littefs+0x104>)
 80070b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b8:	461a      	mov	r2, r3
 80070ba:	4b34      	ldr	r3, [pc, #208]	; (800718c <__init_littefs+0x100>)
 80070bc:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig.lookahead_size = 15000;//Nor.info.u32SectorCount/8;
 80070be:	4b33      	ldr	r3, [pc, #204]	; (800718c <__init_littefs+0x100>)
 80070c0:	f643 2298 	movw	r2, #15000	; 0x3a98
 80070c4:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig.block_cycles = 100;
 80070c6:	4b31      	ldr	r3, [pc, #196]	; (800718c <__init_littefs+0x100>)
 80070c8:	2264      	movs	r2, #100	; 0x64
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24
		LfsConfig.context = (void*) (40* 16384 * Nor.info.u16SectorSize);
 80070cc:	4b30      	ldr	r3, [pc, #192]	; (8007190 <__init_littefs+0x104>)
 80070ce:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80070d0:	461a      	mov	r2, r3
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	045b      	lsls	r3, r3, #17
 80070da:	461a      	mov	r2, r3
 80070dc:	4b2b      	ldr	r3, [pc, #172]	; (800718c <__init_littefs+0x100>)
 80070de:	601a      	str	r2, [r3, #0]

		LfsConfig.read = _fs_read;
 80070e0:	4b2a      	ldr	r3, [pc, #168]	; (800718c <__init_littefs+0x100>)
 80070e2:	4a2c      	ldr	r2, [pc, #176]	; (8007194 <__init_littefs+0x108>)
 80070e4:	605a      	str	r2, [r3, #4]
		LfsConfig.prog = _fs_write;
 80070e6:	4b29      	ldr	r3, [pc, #164]	; (800718c <__init_littefs+0x100>)
 80070e8:	4a2b      	ldr	r2, [pc, #172]	; (8007198 <__init_littefs+0x10c>)
 80070ea:	609a      	str	r2, [r3, #8]
		LfsConfig.erase = _fs_erase;
 80070ec:	4b27      	ldr	r3, [pc, #156]	; (800718c <__init_littefs+0x100>)
 80070ee:	4a2b      	ldr	r2, [pc, #172]	; (800719c <__init_littefs+0x110>)
 80070f0:	60da      	str	r2, [r3, #12]
		LfsConfig.sync = _fs_sync;
 80070f2:	4b26      	ldr	r3, [pc, #152]	; (800718c <__init_littefs+0x100>)
 80070f4:	4a2a      	ldr	r2, [pc, #168]	; (80071a0 <__init_littefs+0x114>)
 80070f6:	611a      	str	r2, [r3, #16]

		Error = lfs_mount(&Lfs, &LfsConfig);
 80070f8:	4924      	ldr	r1, [pc, #144]	; (800718c <__init_littefs+0x100>)
 80070fa:	482a      	ldr	r0, [pc, #168]	; (80071a4 <__init_littefs+0x118>)
 80070fc:	f7ff fe10 	bl	8006d20 <lfs_mount>
 8007100:	6078      	str	r0, [r7, #4]
		if (Error != LFS_ERR_OK){
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00d      	beq.n	8007124 <__init_littefs+0x98>
			lfs_format(&Lfs, &LfsConfig);
 8007108:	4920      	ldr	r1, [pc, #128]	; (800718c <__init_littefs+0x100>)
 800710a:	4826      	ldr	r0, [pc, #152]	; (80071a4 <__init_littefs+0x118>)
 800710c:	f7ff fdf2 	bl	8006cf4 <lfs_format>
			Error = lfs_mount(&Lfs, &LfsConfig);
 8007110:	491e      	ldr	r1, [pc, #120]	; (800718c <__init_littefs+0x100>)
 8007112:	4824      	ldr	r0, [pc, #144]	; (80071a4 <__init_littefs+0x118>)
 8007114:	f7ff fe04 	bl	8006d20 <lfs_mount>
 8007118:	6078      	str	r0, [r7, #4]
			if (Error != LFS_ERR_OK){
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <__init_littefs+0x98>
				Error_Handler();
 8007120:	f000 fc7a 	bl	8007a18 <Error_Handler>
			}
		}


		LfsConfig2.read_size = 256;
 8007124:	4b20      	ldr	r3, [pc, #128]	; (80071a8 <__init_littefs+0x11c>)
 8007126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800712a:	615a      	str	r2, [r3, #20]
		LfsConfig2.prog_size = 256;
 800712c:	4b1e      	ldr	r3, [pc, #120]	; (80071a8 <__init_littefs+0x11c>)
 800712e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007132:	619a      	str	r2, [r3, #24]
		LfsConfig2.block_size = Nor.info.u16SectorSize;
 8007134:	4b16      	ldr	r3, [pc, #88]	; (8007190 <__init_littefs+0x104>)
 8007136:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007138:	461a      	mov	r2, r3
 800713a:	4b1b      	ldr	r3, [pc, #108]	; (80071a8 <__init_littefs+0x11c>)
 800713c:	61da      	str	r2, [r3, #28]
		LfsConfig2.block_count =  16384;//Nor.info.u32SectorCount;
 800713e:	4b1a      	ldr	r3, [pc, #104]	; (80071a8 <__init_littefs+0x11c>)
 8007140:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007144:	621a      	str	r2, [r3, #32]
		LfsConfig2.cache_size = Nor.info.u16PageSize;//1024
 8007146:	4b12      	ldr	r3, [pc, #72]	; (8007190 <__init_littefs+0x104>)
 8007148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714a:	461a      	mov	r2, r3
 800714c:	4b16      	ldr	r3, [pc, #88]	; (80071a8 <__init_littefs+0x11c>)
 800714e:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig2.lookahead_size = 5256;//Nor.info.u32SectorCount/8;
 8007150:	4b15      	ldr	r3, [pc, #84]	; (80071a8 <__init_littefs+0x11c>)
 8007152:	f241 4288 	movw	r2, #5256	; 0x1488
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig2.block_cycles = 100;
 8007158:	4b13      	ldr	r3, [pc, #76]	; (80071a8 <__init_littefs+0x11c>)
 800715a:	2264      	movs	r2, #100	; 0x64
 800715c:	625a      	str	r2, [r3, #36]	; 0x24

		LfsConfig2.read = _fs_read;
 800715e:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <__init_littefs+0x11c>)
 8007160:	4a0c      	ldr	r2, [pc, #48]	; (8007194 <__init_littefs+0x108>)
 8007162:	605a      	str	r2, [r3, #4]
		LfsConfig2.prog = _fs_write;
 8007164:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <__init_littefs+0x11c>)
 8007166:	4a0c      	ldr	r2, [pc, #48]	; (8007198 <__init_littefs+0x10c>)
 8007168:	609a      	str	r2, [r3, #8]
		LfsConfig2.erase = _fs_erase;
 800716a:	4b0f      	ldr	r3, [pc, #60]	; (80071a8 <__init_littefs+0x11c>)
 800716c:	4a0b      	ldr	r2, [pc, #44]	; (800719c <__init_littefs+0x110>)
 800716e:	60da      	str	r2, [r3, #12]
		LfsConfig2.sync = _fs_sync;
 8007170:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <__init_littefs+0x11c>)
 8007172:	4a0b      	ldr	r2, [pc, #44]	; (80071a0 <__init_littefs+0x114>)
 8007174:	611a      	str	r2, [r3, #16]

		LfsConfig2.context = (void*) (4* 16384 * Nor.info.u16SectorSize);
 8007176:	4b06      	ldr	r3, [pc, #24]	; (8007190 <__init_littefs+0x104>)
 8007178:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800717a:	041b      	lsls	r3, r3, #16
 800717c:	461a      	mov	r2, r3
 800717e:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <__init_littefs+0x11c>)
 8007180:	601a      	str	r2, [r3, #0]
//					if (Error != LFS_ERR_OK){
//						Error_Handler();
//					}
//				}

}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000108 	.word	0x20000108
 8007190:	20000418 	.word	0x20000418
 8007194:	08006fdd 	.word	0x08006fdd
 8007198:	08007015 	.word	0x08007015
 800719c:	0800704d 	.word	0x0800704d
 80071a0:	08007079 	.word	0x08007079
 80071a4:	20000468 	.word	0x20000468
 80071a8:	20000154 	.word	0x20000154

080071ac <__init_storage>:
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
}
void __init_storage(){
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
	__init_nor();
 80071b0:	f7ff feec 	bl	8006f8c <__init_nor>
	__init_littefs();
 80071b4:	f7ff ff6a 	bl	800708c <__init_littefs>
}
 80071b8:	bf00      	nop
 80071ba:	bd80      	pop	{r7, pc}

080071bc <write_to_file>:

void write_to_file(char *filename, uint8_t *data, uint32_t data_length){
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]

//	  list_directories_with_file_count(&Lfs,"");
	  lfs_file_open(&Lfs, &File, filename, LFS_O_CREAT | LFS_O_RDWR  | LFS_O_APPEND );
 80071c8:	f640 1303 	movw	r3, #2307	; 0x903
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4909      	ldr	r1, [pc, #36]	; (80071f4 <write_to_file+0x38>)
 80071d0:	4809      	ldr	r0, [pc, #36]	; (80071f8 <write_to_file+0x3c>)
 80071d2:	f7ff fdbb 	bl	8006d4c <lfs_file_open>
	  lfs_file_write(&Lfs, &File, data, data_length);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	4906      	ldr	r1, [pc, #24]	; (80071f4 <write_to_file+0x38>)
 80071dc:	4806      	ldr	r0, [pc, #24]	; (80071f8 <write_to_file+0x3c>)
 80071de:	f7ff fe15 	bl	8006e0c <lfs_file_write>
	  lfs_file_close(&Lfs, &File);
 80071e2:	4904      	ldr	r1, [pc, #16]	; (80071f4 <write_to_file+0x38>)
 80071e4:	4804      	ldr	r0, [pc, #16]	; (80071f8 <write_to_file+0x3c>)
 80071e6:	f7ff fde5 	bl	8006db4 <lfs_file_close>
//	  lfs_unmount(&Lfs);
}
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000348 	.word	0x20000348
 80071f8:	20000468 	.word	0x20000468

080071fc <OBC_COMMAND>:
static void MX_USART2_UART_Init(void);
static void MX_RTC_Init(void);
static void MX_USB_PCD_Init(void);
/* USER CODE BEGIN PFP */
//Handshake between OBC(Onboard computer) and EPDM board and compare command for run in different minutes
uint8_t OBC_COMMAND(){
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
	memset(OBC_HANDSHAKE_RX, '\0', sizeof(OBC_HANDSHAKE_RX));
 8007200:	2207      	movs	r2, #7
 8007202:	2100      	movs	r1, #0
 8007204:	4882      	ldr	r0, [pc, #520]	; (8007410 <OBC_COMMAND+0x214>)
 8007206:	f006 fd65 	bl	800dcd4 <memset>
	memset(OBC_HANDSHAKE_TX, '\0', sizeof(OBC_HANDSHAKE_TX));
 800720a:	2207      	movs	r2, #7
 800720c:	2100      	movs	r1, #0
 800720e:	4881      	ldr	r0, [pc, #516]	; (8007414 <OBC_COMMAND+0x218>)
 8007210:	f006 fd60 	bl	800dcd4 <memset>
	OBC_HANDSHAKE_SUCESS = 0;
 8007214:	4b80      	ldr	r3, [pc, #512]	; (8007418 <OBC_COMMAND+0x21c>)
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
	do{
	if(HAL_UART_Receive(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX),1000)==HAL_OK){
 800721a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800721e:	2207      	movs	r2, #7
 8007220:	497b      	ldr	r1, [pc, #492]	; (8007410 <OBC_COMMAND+0x214>)
 8007222:	487e      	ldr	r0, [pc, #504]	; (800741c <OBC_COMMAND+0x220>)
 8007224:	f005 f894 	bl	800c350 <HAL_UART_Receive>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	f040 8147 	bne.w	80074be <OBC_COMMAND+0x2c2>
		if(HAL_UART_Transmit(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX), 3000)==HAL_OK){
 8007230:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007234:	2207      	movs	r2, #7
 8007236:	4976      	ldr	r1, [pc, #472]	; (8007410 <OBC_COMMAND+0x214>)
 8007238:	4878      	ldr	r0, [pc, #480]	; (800741c <OBC_COMMAND+0x220>)
 800723a:	f004 fffe 	bl	800c23a <HAL_UART_Transmit>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 813c 	bne.w	80074be <OBC_COMMAND+0x2c2>
			if(OBC_HANDSHAKE_RX[0] == COMMAND1[0] && OBC_HANDSHAKE_RX[1] == COMMAND1[1] && OBC_HANDSHAKE_RX[2] == COMMAND1[2] && OBC_HANDSHAKE_RX[3] == COMMAND1[3] && OBC_HANDSHAKE_RX[4] == COMMAND1[4] && OBC_HANDSHAKE_RX[5] == COMMAND1[5] && OBC_HANDSHAKE_RX[6] == COMMAND1[6] )
 8007246:	4b72      	ldr	r3, [pc, #456]	; (8007410 <OBC_COMMAND+0x214>)
 8007248:	781a      	ldrb	r2, [r3, #0]
 800724a:	4b75      	ldr	r3, [pc, #468]	; (8007420 <OBC_COMMAND+0x224>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d132      	bne.n	80072b8 <OBC_COMMAND+0xbc>
 8007252:	4b6f      	ldr	r3, [pc, #444]	; (8007410 <OBC_COMMAND+0x214>)
 8007254:	785a      	ldrb	r2, [r3, #1]
 8007256:	4b72      	ldr	r3, [pc, #456]	; (8007420 <OBC_COMMAND+0x224>)
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	429a      	cmp	r2, r3
 800725c:	d12c      	bne.n	80072b8 <OBC_COMMAND+0xbc>
 800725e:	4b6c      	ldr	r3, [pc, #432]	; (8007410 <OBC_COMMAND+0x214>)
 8007260:	789a      	ldrb	r2, [r3, #2]
 8007262:	4b6f      	ldr	r3, [pc, #444]	; (8007420 <OBC_COMMAND+0x224>)
 8007264:	789b      	ldrb	r3, [r3, #2]
 8007266:	429a      	cmp	r2, r3
 8007268:	d126      	bne.n	80072b8 <OBC_COMMAND+0xbc>
 800726a:	4b69      	ldr	r3, [pc, #420]	; (8007410 <OBC_COMMAND+0x214>)
 800726c:	78da      	ldrb	r2, [r3, #3]
 800726e:	4b6c      	ldr	r3, [pc, #432]	; (8007420 <OBC_COMMAND+0x224>)
 8007270:	78db      	ldrb	r3, [r3, #3]
 8007272:	429a      	cmp	r2, r3
 8007274:	d120      	bne.n	80072b8 <OBC_COMMAND+0xbc>
 8007276:	4b66      	ldr	r3, [pc, #408]	; (8007410 <OBC_COMMAND+0x214>)
 8007278:	791a      	ldrb	r2, [r3, #4]
 800727a:	4b69      	ldr	r3, [pc, #420]	; (8007420 <OBC_COMMAND+0x224>)
 800727c:	791b      	ldrb	r3, [r3, #4]
 800727e:	429a      	cmp	r2, r3
 8007280:	d11a      	bne.n	80072b8 <OBC_COMMAND+0xbc>
 8007282:	4b63      	ldr	r3, [pc, #396]	; (8007410 <OBC_COMMAND+0x214>)
 8007284:	795a      	ldrb	r2, [r3, #5]
 8007286:	4b66      	ldr	r3, [pc, #408]	; (8007420 <OBC_COMMAND+0x224>)
 8007288:	795b      	ldrb	r3, [r3, #5]
 800728a:	429a      	cmp	r2, r3
 800728c:	d114      	bne.n	80072b8 <OBC_COMMAND+0xbc>
 800728e:	4b60      	ldr	r3, [pc, #384]	; (8007410 <OBC_COMMAND+0x214>)
 8007290:	799a      	ldrb	r2, [r3, #6]
 8007292:	4b63      	ldr	r3, [pc, #396]	; (8007420 <OBC_COMMAND+0x224>)
 8007294:	799b      	ldrb	r3, [r3, #6]
 8007296:	429a      	cmp	r2, r3
 8007298:	d10e      	bne.n	80072b8 <OBC_COMMAND+0xbc>
				{
				OBC_HANDSHAKE_SUCESS = 1;
 800729a:	4b5f      	ldr	r3, [pc, #380]	; (8007418 <OBC_COMMAND+0x21c>)
 800729c:	2201      	movs	r2, #1
 800729e:	701a      	strb	r2, [r3, #0]
				Read_time = 1; //Sets board run for 1 minutes
 80072a0:	4b60      	ldr	r3, [pc, #384]	; (8007424 <OBC_COMMAND+0x228>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "COMMAND SUCCESSFULLY\n", "COMMAND SUCCESSFULLY", 1000);
 80072a6:	4b60      	ldr	r3, [pc, #384]	; (8007428 <OBC_COMMAND+0x22c>)
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072ae:	495f      	ldr	r1, [pc, #380]	; (800742c <OBC_COMMAND+0x230>)
 80072b0:	485f      	ldr	r0, [pc, #380]	; (8007430 <OBC_COMMAND+0x234>)
 80072b2:	f004 ffc2 	bl	800c23a <HAL_UART_Transmit>
 80072b6:	e102      	b.n	80074be <OBC_COMMAND+0x2c2>

				}
			else if(OBC_HANDSHAKE_RX[0] == COMMAND2[0] && OBC_HANDSHAKE_RX[1] == COMMAND2[1] && OBC_HANDSHAKE_RX[2] == COMMAND2[2] && OBC_HANDSHAKE_RX[3] == COMMAND2[3] && OBC_HANDSHAKE_RX[4] == COMMAND2[4] && OBC_HANDSHAKE_RX[5] == COMMAND2[5] && OBC_HANDSHAKE_RX[6] == COMMAND2[6] )
 80072b8:	4b55      	ldr	r3, [pc, #340]	; (8007410 <OBC_COMMAND+0x214>)
 80072ba:	781a      	ldrb	r2, [r3, #0]
 80072bc:	4b5d      	ldr	r3, [pc, #372]	; (8007434 <OBC_COMMAND+0x238>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d132      	bne.n	800732a <OBC_COMMAND+0x12e>
 80072c4:	4b52      	ldr	r3, [pc, #328]	; (8007410 <OBC_COMMAND+0x214>)
 80072c6:	785a      	ldrb	r2, [r3, #1]
 80072c8:	4b5a      	ldr	r3, [pc, #360]	; (8007434 <OBC_COMMAND+0x238>)
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d12c      	bne.n	800732a <OBC_COMMAND+0x12e>
 80072d0:	4b4f      	ldr	r3, [pc, #316]	; (8007410 <OBC_COMMAND+0x214>)
 80072d2:	789a      	ldrb	r2, [r3, #2]
 80072d4:	4b57      	ldr	r3, [pc, #348]	; (8007434 <OBC_COMMAND+0x238>)
 80072d6:	789b      	ldrb	r3, [r3, #2]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d126      	bne.n	800732a <OBC_COMMAND+0x12e>
 80072dc:	4b4c      	ldr	r3, [pc, #304]	; (8007410 <OBC_COMMAND+0x214>)
 80072de:	78da      	ldrb	r2, [r3, #3]
 80072e0:	4b54      	ldr	r3, [pc, #336]	; (8007434 <OBC_COMMAND+0x238>)
 80072e2:	78db      	ldrb	r3, [r3, #3]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d120      	bne.n	800732a <OBC_COMMAND+0x12e>
 80072e8:	4b49      	ldr	r3, [pc, #292]	; (8007410 <OBC_COMMAND+0x214>)
 80072ea:	791a      	ldrb	r2, [r3, #4]
 80072ec:	4b51      	ldr	r3, [pc, #324]	; (8007434 <OBC_COMMAND+0x238>)
 80072ee:	791b      	ldrb	r3, [r3, #4]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d11a      	bne.n	800732a <OBC_COMMAND+0x12e>
 80072f4:	4b46      	ldr	r3, [pc, #280]	; (8007410 <OBC_COMMAND+0x214>)
 80072f6:	795a      	ldrb	r2, [r3, #5]
 80072f8:	4b4e      	ldr	r3, [pc, #312]	; (8007434 <OBC_COMMAND+0x238>)
 80072fa:	795b      	ldrb	r3, [r3, #5]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d114      	bne.n	800732a <OBC_COMMAND+0x12e>
 8007300:	4b43      	ldr	r3, [pc, #268]	; (8007410 <OBC_COMMAND+0x214>)
 8007302:	799a      	ldrb	r2, [r3, #6]
 8007304:	4b4b      	ldr	r3, [pc, #300]	; (8007434 <OBC_COMMAND+0x238>)
 8007306:	799b      	ldrb	r3, [r3, #6]
 8007308:	429a      	cmp	r2, r3
 800730a:	d10e      	bne.n	800732a <OBC_COMMAND+0x12e>
				{
				OBC_HANDSHAKE_SUCESS = 1;
 800730c:	4b42      	ldr	r3, [pc, #264]	; (8007418 <OBC_COMMAND+0x21c>)
 800730e:	2201      	movs	r2, #1
 8007310:	701a      	strb	r2, [r3, #0]
				Read_time = 2;  //Sets board run for 2 minutes
 8007312:	4b44      	ldr	r3, [pc, #272]	; (8007424 <OBC_COMMAND+0x228>)
 8007314:	2202      	movs	r2, #2
 8007316:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "COMMAND SUCCESSFULLY\n", "COMMAND SUCCESSFULLY", 1000);
 8007318:	4b43      	ldr	r3, [pc, #268]	; (8007428 <OBC_COMMAND+0x22c>)
 800731a:	b29a      	uxth	r2, r3
 800731c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007320:	4942      	ldr	r1, [pc, #264]	; (800742c <OBC_COMMAND+0x230>)
 8007322:	4843      	ldr	r0, [pc, #268]	; (8007430 <OBC_COMMAND+0x234>)
 8007324:	f004 ff89 	bl	800c23a <HAL_UART_Transmit>
 8007328:	e0c9      	b.n	80074be <OBC_COMMAND+0x2c2>

				}
			else if(OBC_HANDSHAKE_RX[0] == COMMAND3[0] && OBC_HANDSHAKE_RX[1] == COMMAND3[1] && OBC_HANDSHAKE_RX[2] == COMMAND3[2] && OBC_HANDSHAKE_RX[3] == COMMAND3[3] && OBC_HANDSHAKE_RX[4] == COMMAND3[4] && OBC_HANDSHAKE_RX[5] == COMMAND3[5] && OBC_HANDSHAKE_RX[6] == COMMAND3[6] )
 800732a:	4b39      	ldr	r3, [pc, #228]	; (8007410 <OBC_COMMAND+0x214>)
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	4b42      	ldr	r3, [pc, #264]	; (8007438 <OBC_COMMAND+0x23c>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d132      	bne.n	800739c <OBC_COMMAND+0x1a0>
 8007336:	4b36      	ldr	r3, [pc, #216]	; (8007410 <OBC_COMMAND+0x214>)
 8007338:	785a      	ldrb	r2, [r3, #1]
 800733a:	4b3f      	ldr	r3, [pc, #252]	; (8007438 <OBC_COMMAND+0x23c>)
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	429a      	cmp	r2, r3
 8007340:	d12c      	bne.n	800739c <OBC_COMMAND+0x1a0>
 8007342:	4b33      	ldr	r3, [pc, #204]	; (8007410 <OBC_COMMAND+0x214>)
 8007344:	789a      	ldrb	r2, [r3, #2]
 8007346:	4b3c      	ldr	r3, [pc, #240]	; (8007438 <OBC_COMMAND+0x23c>)
 8007348:	789b      	ldrb	r3, [r3, #2]
 800734a:	429a      	cmp	r2, r3
 800734c:	d126      	bne.n	800739c <OBC_COMMAND+0x1a0>
 800734e:	4b30      	ldr	r3, [pc, #192]	; (8007410 <OBC_COMMAND+0x214>)
 8007350:	78da      	ldrb	r2, [r3, #3]
 8007352:	4b39      	ldr	r3, [pc, #228]	; (8007438 <OBC_COMMAND+0x23c>)
 8007354:	78db      	ldrb	r3, [r3, #3]
 8007356:	429a      	cmp	r2, r3
 8007358:	d120      	bne.n	800739c <OBC_COMMAND+0x1a0>
 800735a:	4b2d      	ldr	r3, [pc, #180]	; (8007410 <OBC_COMMAND+0x214>)
 800735c:	791a      	ldrb	r2, [r3, #4]
 800735e:	4b36      	ldr	r3, [pc, #216]	; (8007438 <OBC_COMMAND+0x23c>)
 8007360:	791b      	ldrb	r3, [r3, #4]
 8007362:	429a      	cmp	r2, r3
 8007364:	d11a      	bne.n	800739c <OBC_COMMAND+0x1a0>
 8007366:	4b2a      	ldr	r3, [pc, #168]	; (8007410 <OBC_COMMAND+0x214>)
 8007368:	795a      	ldrb	r2, [r3, #5]
 800736a:	4b33      	ldr	r3, [pc, #204]	; (8007438 <OBC_COMMAND+0x23c>)
 800736c:	795b      	ldrb	r3, [r3, #5]
 800736e:	429a      	cmp	r2, r3
 8007370:	d114      	bne.n	800739c <OBC_COMMAND+0x1a0>
 8007372:	4b27      	ldr	r3, [pc, #156]	; (8007410 <OBC_COMMAND+0x214>)
 8007374:	799a      	ldrb	r2, [r3, #6]
 8007376:	4b30      	ldr	r3, [pc, #192]	; (8007438 <OBC_COMMAND+0x23c>)
 8007378:	799b      	ldrb	r3, [r3, #6]
 800737a:	429a      	cmp	r2, r3
 800737c:	d10e      	bne.n	800739c <OBC_COMMAND+0x1a0>
				{
				OBC_HANDSHAKE_SUCESS = 1;
 800737e:	4b26      	ldr	r3, [pc, #152]	; (8007418 <OBC_COMMAND+0x21c>)
 8007380:	2201      	movs	r2, #1
 8007382:	701a      	strb	r2, [r3, #0]
				Read_time = 3; //Sets board run for 3 minutes
 8007384:	4b27      	ldr	r3, [pc, #156]	; (8007424 <OBC_COMMAND+0x228>)
 8007386:	2203      	movs	r2, #3
 8007388:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "COMMAND SUCCESSFULLY\n", "COMMAND SUCCESSFULLY", 1000);
 800738a:	4b27      	ldr	r3, [pc, #156]	; (8007428 <OBC_COMMAND+0x22c>)
 800738c:	b29a      	uxth	r2, r3
 800738e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007392:	4926      	ldr	r1, [pc, #152]	; (800742c <OBC_COMMAND+0x230>)
 8007394:	4826      	ldr	r0, [pc, #152]	; (8007430 <OBC_COMMAND+0x234>)
 8007396:	f004 ff50 	bl	800c23a <HAL_UART_Transmit>
 800739a:	e090      	b.n	80074be <OBC_COMMAND+0x2c2>

				}
			else if(OBC_HANDSHAKE_RX[0] == COMMAND4[0] && OBC_HANDSHAKE_RX[1] == COMMAND4[1] && OBC_HANDSHAKE_RX[2] == COMMAND4[2] && OBC_HANDSHAKE_RX[3] == COMMAND4[3] && OBC_HANDSHAKE_RX[4] == COMMAND4[4] && OBC_HANDSHAKE_RX[5] == COMMAND4[5] && OBC_HANDSHAKE_RX[6] == COMMAND4[6] )
 800739c:	4b1c      	ldr	r3, [pc, #112]	; (8007410 <OBC_COMMAND+0x214>)
 800739e:	781a      	ldrb	r2, [r3, #0]
 80073a0:	4b26      	ldr	r3, [pc, #152]	; (800743c <OBC_COMMAND+0x240>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d14b      	bne.n	8007440 <OBC_COMMAND+0x244>
 80073a8:	4b19      	ldr	r3, [pc, #100]	; (8007410 <OBC_COMMAND+0x214>)
 80073aa:	785a      	ldrb	r2, [r3, #1]
 80073ac:	4b23      	ldr	r3, [pc, #140]	; (800743c <OBC_COMMAND+0x240>)
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d145      	bne.n	8007440 <OBC_COMMAND+0x244>
 80073b4:	4b16      	ldr	r3, [pc, #88]	; (8007410 <OBC_COMMAND+0x214>)
 80073b6:	789a      	ldrb	r2, [r3, #2]
 80073b8:	4b20      	ldr	r3, [pc, #128]	; (800743c <OBC_COMMAND+0x240>)
 80073ba:	789b      	ldrb	r3, [r3, #2]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d13f      	bne.n	8007440 <OBC_COMMAND+0x244>
 80073c0:	4b13      	ldr	r3, [pc, #76]	; (8007410 <OBC_COMMAND+0x214>)
 80073c2:	78da      	ldrb	r2, [r3, #3]
 80073c4:	4b1d      	ldr	r3, [pc, #116]	; (800743c <OBC_COMMAND+0x240>)
 80073c6:	78db      	ldrb	r3, [r3, #3]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d139      	bne.n	8007440 <OBC_COMMAND+0x244>
 80073cc:	4b10      	ldr	r3, [pc, #64]	; (8007410 <OBC_COMMAND+0x214>)
 80073ce:	791a      	ldrb	r2, [r3, #4]
 80073d0:	4b1a      	ldr	r3, [pc, #104]	; (800743c <OBC_COMMAND+0x240>)
 80073d2:	791b      	ldrb	r3, [r3, #4]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d133      	bne.n	8007440 <OBC_COMMAND+0x244>
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <OBC_COMMAND+0x214>)
 80073da:	795a      	ldrb	r2, [r3, #5]
 80073dc:	4b17      	ldr	r3, [pc, #92]	; (800743c <OBC_COMMAND+0x240>)
 80073de:	795b      	ldrb	r3, [r3, #5]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d12d      	bne.n	8007440 <OBC_COMMAND+0x244>
 80073e4:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <OBC_COMMAND+0x214>)
 80073e6:	799a      	ldrb	r2, [r3, #6]
 80073e8:	4b14      	ldr	r3, [pc, #80]	; (800743c <OBC_COMMAND+0x240>)
 80073ea:	799b      	ldrb	r3, [r3, #6]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d127      	bne.n	8007440 <OBC_COMMAND+0x244>
				{
				OBC_HANDSHAKE_SUCESS = 1;
 80073f0:	4b09      	ldr	r3, [pc, #36]	; (8007418 <OBC_COMMAND+0x21c>)
 80073f2:	2201      	movs	r2, #1
 80073f4:	701a      	strb	r2, [r3, #0]
				Read_time = 4;  //Sets board run for 4 minutes
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <OBC_COMMAND+0x228>)
 80073f8:	2204      	movs	r2, #4
 80073fa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "COMMAND SUCCESSFULLY\n", "COMMAND SUCCESSFULLY", 1000);
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <OBC_COMMAND+0x22c>)
 80073fe:	b29a      	uxth	r2, r3
 8007400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007404:	4909      	ldr	r1, [pc, #36]	; (800742c <OBC_COMMAND+0x230>)
 8007406:	480a      	ldr	r0, [pc, #40]	; (8007430 <OBC_COMMAND+0x234>)
 8007408:	f004 ff17 	bl	800c23a <HAL_UART_Transmit>
 800740c:	e057      	b.n	80074be <OBC_COMMAND+0x2c2>
 800740e:	bf00      	nop
 8007410:	200001a4 	.word	0x200001a4
 8007414:	200001ac 	.word	0x200001ac
 8007418:	200004f4 	.word	0x200004f4
 800741c:	20000730 	.word	0x20000730
 8007420:	20000040 	.word	0x20000040
 8007424:	200001b3 	.word	0x200001b3
 8007428:	0800f5c4 	.word	0x0800f5c4
 800742c:	0800f5dc 	.word	0x0800f5dc
 8007430:	20000550 	.word	0x20000550
 8007434:	20000048 	.word	0x20000048
 8007438:	20000050 	.word	0x20000050
 800743c:	20000058 	.word	0x20000058

				}
			else if(OBC_HANDSHAKE_RX[0] == COMMAND5[0] && OBC_HANDSHAKE_RX[1] == COMMAND5[1] && OBC_HANDSHAKE_RX[2] == COMMAND5[2] && OBC_HANDSHAKE_RX[3] == COMMAND5[3] && OBC_HANDSHAKE_RX[4] == COMMAND5[4] && OBC_HANDSHAKE_RX[5] == COMMAND5[5] && OBC_HANDSHAKE_RX[6] == COMMAND5[6] )
 8007440:	4b23      	ldr	r3, [pc, #140]	; (80074d0 <OBC_COMMAND+0x2d4>)
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	4b23      	ldr	r3, [pc, #140]	; (80074d4 <OBC_COMMAND+0x2d8>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	429a      	cmp	r2, r3
 800744a:	d132      	bne.n	80074b2 <OBC_COMMAND+0x2b6>
 800744c:	4b20      	ldr	r3, [pc, #128]	; (80074d0 <OBC_COMMAND+0x2d4>)
 800744e:	785a      	ldrb	r2, [r3, #1]
 8007450:	4b20      	ldr	r3, [pc, #128]	; (80074d4 <OBC_COMMAND+0x2d8>)
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	429a      	cmp	r2, r3
 8007456:	d12c      	bne.n	80074b2 <OBC_COMMAND+0x2b6>
 8007458:	4b1d      	ldr	r3, [pc, #116]	; (80074d0 <OBC_COMMAND+0x2d4>)
 800745a:	789a      	ldrb	r2, [r3, #2]
 800745c:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <OBC_COMMAND+0x2d8>)
 800745e:	789b      	ldrb	r3, [r3, #2]
 8007460:	429a      	cmp	r2, r3
 8007462:	d126      	bne.n	80074b2 <OBC_COMMAND+0x2b6>
 8007464:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <OBC_COMMAND+0x2d4>)
 8007466:	78da      	ldrb	r2, [r3, #3]
 8007468:	4b1a      	ldr	r3, [pc, #104]	; (80074d4 <OBC_COMMAND+0x2d8>)
 800746a:	78db      	ldrb	r3, [r3, #3]
 800746c:	429a      	cmp	r2, r3
 800746e:	d120      	bne.n	80074b2 <OBC_COMMAND+0x2b6>
 8007470:	4b17      	ldr	r3, [pc, #92]	; (80074d0 <OBC_COMMAND+0x2d4>)
 8007472:	791a      	ldrb	r2, [r3, #4]
 8007474:	4b17      	ldr	r3, [pc, #92]	; (80074d4 <OBC_COMMAND+0x2d8>)
 8007476:	791b      	ldrb	r3, [r3, #4]
 8007478:	429a      	cmp	r2, r3
 800747a:	d11a      	bne.n	80074b2 <OBC_COMMAND+0x2b6>
 800747c:	4b14      	ldr	r3, [pc, #80]	; (80074d0 <OBC_COMMAND+0x2d4>)
 800747e:	795a      	ldrb	r2, [r3, #5]
 8007480:	4b14      	ldr	r3, [pc, #80]	; (80074d4 <OBC_COMMAND+0x2d8>)
 8007482:	795b      	ldrb	r3, [r3, #5]
 8007484:	429a      	cmp	r2, r3
 8007486:	d114      	bne.n	80074b2 <OBC_COMMAND+0x2b6>
 8007488:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <OBC_COMMAND+0x2d4>)
 800748a:	799a      	ldrb	r2, [r3, #6]
 800748c:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <OBC_COMMAND+0x2d8>)
 800748e:	799b      	ldrb	r3, [r3, #6]
 8007490:	429a      	cmp	r2, r3
 8007492:	d10e      	bne.n	80074b2 <OBC_COMMAND+0x2b6>
				{
				OBC_HANDSHAKE_SUCESS = 1;
 8007494:	4b10      	ldr	r3, [pc, #64]	; (80074d8 <OBC_COMMAND+0x2dc>)
 8007496:	2201      	movs	r2, #1
 8007498:	701a      	strb	r2, [r3, #0]
				Read_time = 5;  //Sets board run for 5 minutes
 800749a:	4b10      	ldr	r3, [pc, #64]	; (80074dc <OBC_COMMAND+0x2e0>)
 800749c:	2205      	movs	r2, #5
 800749e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "COMMAND SUCCESSFULLY\n", "COMMAND SUCCESSFULLY", 1000);
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <OBC_COMMAND+0x2e4>)
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074a8:	490e      	ldr	r1, [pc, #56]	; (80074e4 <OBC_COMMAND+0x2e8>)
 80074aa:	480f      	ldr	r0, [pc, #60]	; (80074e8 <OBC_COMMAND+0x2ec>)
 80074ac:	f004 fec5 	bl	800c23a <HAL_UART_Transmit>
 80074b0:	e005      	b.n	80074be <OBC_COMMAND+0x2c2>

				}
			else{
				  Read_time = 5;
 80074b2:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <OBC_COMMAND+0x2e0>)
 80074b4:	2205      	movs	r2, #5
 80074b6:	701a      	strb	r2, [r3, #0]
				  OBC_HANDSHAKE_SUCESS = 1;
 80074b8:	4b07      	ldr	r3, [pc, #28]	; (80074d8 <OBC_COMMAND+0x2dc>)
 80074ba:	2201      	movs	r2, #1
 80074bc:	701a      	strb	r2, [r3, #0]

//				  HAL_UART_Transmit(&huart1, "xxxxxxCOMMAND ERRORxxxxxx", sizeof("xxxxxxCOMMAND ERRORxxxxxx"), 1000);
			}
		}
	}
	}while(!OBC_HANDSHAKE_SUCESS);
 80074be:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <OBC_COMMAND+0x2dc>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f43f aea9 	beq.w	800721a <OBC_COMMAND+0x1e>
	return OBC_HANDSHAKE_SUCESS;
 80074c8:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <OBC_COMMAND+0x2dc>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	200001a4 	.word	0x200001a4
 80074d4:	20000060 	.word	0x20000060
 80074d8:	200004f4 	.word	0x200004f4
 80074dc:	200001b3 	.word	0x200001b3
 80074e0:	0800f5c4 	.word	0x0800f5c4
 80074e4:	0800f5dc 	.word	0x0800f5dc
 80074e8:	20000550 	.word	0x20000550

080074ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08c      	sub	sp, #48	; 0x30
 80074f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80074f2:	f001 f9d3 	bl	800889c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80074f6:	f000 f8cf 	bl	8007698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80074fa:	f000 fa2b 	bl	8007954 <MX_GPIO_Init>
  MX_SPI1_Init();
 80074fe:	f000 f947 	bl	8007790 <MX_SPI1_Init>
  MX_SPI2_Init();
 8007502:	f000 f97b 	bl	80077fc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8007506:	f000 f9af 	bl	8007868 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800750a:	f000 f9d7 	bl	80078bc <MX_USART2_UART_Init>
  MX_RTC_Init();
 800750e:	f000 f923 	bl	8007758 <MX_RTC_Init>
  MX_USB_PCD_Init();
 8007512:	f000 f9fd 	bl	8007910 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, "*****************EPDM starting**************\n",sizeof("*****************EPDM starting**************\n"),1000);
 8007516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800751a:	222e      	movs	r2, #46	; 0x2e
 800751c:	4953      	ldr	r1, [pc, #332]	; (800766c <main+0x180>)
 800751e:	4854      	ldr	r0, [pc, #336]	; (8007670 <main+0x184>)
 8007520:	f004 fe8b 	bl	800c23a <HAL_UART_Transmit>

//  OBC_HANDSHAKE();
  OBC_COMMAND();
 8007524:	f7ff fe6a 	bl	80071fc <OBC_COMMAND>
  HAL_GPIO_WritePin(GPIOB, MSN_EN1_Pin, SET); // Set PB9 high
 8007528:	2201      	movs	r2, #1
 800752a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800752e:	4851      	ldr	r0, [pc, #324]	; (8007674 <main+0x188>)
 8007530:	f001 fd44 	bl	8008fbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN2_Pin, SET); // Set PB8 high
 8007534:	2201      	movs	r2, #1
 8007536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800753a:	484e      	ldr	r0, [pc, #312]	; (8007674 <main+0x188>)
 800753c:	f001 fd3e 	bl	8008fbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN3_Pin, SET); // Set PA15 high
 8007540:	2201      	movs	r2, #1
 8007542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007546:	484b      	ldr	r0, [pc, #300]	; (8007674 <main+0x188>)
 8007548:	f001 fd38 	bl	8008fbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN4_Pin, SET); // Set PA8 high
 800754c:	2201      	movs	r2, #1
 800754e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007552:	4848      	ldr	r0, [pc, #288]	; (8007674 <main+0x188>)
 8007554:	f001 fd32 	bl	8008fbc <HAL_GPIO_WritePin>
  uint8_t data[20];

//Read ID of Flash memory
  while(1){
	  Read_ID(&hspi2, GPIOB, GPIO_PIN_12, data);
 8007558:	f107 0308 	add.w	r3, r7, #8
 800755c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007560:	4944      	ldr	r1, [pc, #272]	; (8007674 <main+0x188>)
 8007562:	4845      	ldr	r0, [pc, #276]	; (8007678 <main+0x18c>)
 8007564:	f000 fa5e 	bl	8007a24 <Read_ID>
	  if(data[0] == 32){
 8007568:	7a3b      	ldrb	r3, [r7, #8]
 800756a:	2b20      	cmp	r3, #32
 800756c:	d004      	beq.n	8007578 <main+0x8c>
		  break;
	  }
	  HAL_Delay(10000);
 800756e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007572:	f001 f9f5 	bl	8008960 <HAL_Delay>
  while(1){
 8007576:	e7ef      	b.n	8007558 <main+0x6c>
		  break;
 8007578:	bf00      	nop
  }
 //Sets parameters of RM3100 magnetometer differents modes
    for(int i=0;i<4;i++){
 800757a:	2300      	movs	r3, #0
 800757c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800757e:	e00b      	b.n	8007598 <main+0xac>
    	SET_COUNT(i);
 8007580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007582:	f7f9 f883 	bl	800068c <SET_COUNT>
    	Continuous_Mode(i);
 8007586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007588:	f7f9 f8f2 	bl	8000770 <Continuous_Mode>
    	TMRC_Mode(i);
 800758c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800758e:	f7f9 f933 	bl	80007f8 <TMRC_Mode>
    for(int i=0;i<4;i++){
 8007592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007594:	3301      	adds	r3, #1
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759a:	2b03      	cmp	r3, #3
 800759c:	ddf0      	ble.n	8007580 <main+0x94>
    }
    uint32_t count=0;
 800759e:	2300      	movs	r3, #0
 80075a0:	62bb      	str	r3, [r7, #40]	; 0x28
    __init_storage();
 80075a2:	f7ff fe03 	bl	80071ac <__init_storage>
    uint8_t last[]={'E','P','D','M'}; //Stores before reading data and after reading data
 80075a6:	4b35      	ldr	r3, [pc, #212]	; (800767c <main+0x190>)
 80075a8:	607b      	str	r3, [r7, #4]
    uint8_t eom[]={0xff,0xd9,'\0'}; //OBC stops mission if received
 80075aa:	4a35      	ldr	r2, [pc, #212]	; (8007680 <main+0x194>)
 80075ac:	463b      	mov	r3, r7
 80075ae:	6812      	ldr	r2, [r2, #0]
 80075b0:	4611      	mov	r1, r2
 80075b2:	8019      	strh	r1, [r3, #0]
 80075b4:	3302      	adds	r3, #2
 80075b6:	0c12      	lsrs	r2, r2, #16
 80075b8:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart2, last, sizeof(last), 1000);//Before reading
 80075ba:	1d39      	adds	r1, r7, #4
 80075bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075c0:	2204      	movs	r2, #4
 80075c2:	4830      	ldr	r0, [pc, #192]	; (8007684 <main+0x198>)
 80075c4:	f004 fe39 	bl	800c23a <HAL_UART_Transmit>
    if (Read_time >= 1 && Read_time <= 5) {
 80075c8:	4b2f      	ldr	r3, [pc, #188]	; (8007688 <main+0x19c>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d044      	beq.n	800765a <main+0x16e>
 80075d0:	4b2d      	ldr	r3, [pc, #180]	; (8007688 <main+0x19c>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b05      	cmp	r3, #5
 80075d6:	d840      	bhi.n	800765a <main+0x16e>
    	      uint32_t startTime = HAL_GetTick();  // Record the start time
 80075d8:	f001 f9b8 	bl	800894c <HAL_GetTick>
 80075dc:	6238      	str	r0, [r7, #32]
    	      uint32_t maxDuration = Read_time * 60 * 1000;  // Maximum duration in milliseconds
 80075de:	4b2a      	ldr	r3, [pc, #168]	; (8007688 <main+0x19c>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80075e8:	fb03 f302 	mul.w	r3, r3, r2
 80075ec:	61fb      	str	r3, [r7, #28]

    	      while (HAL_GetTick() - startTime < maxDuration) {  // Run loop according to the value of Read_time
 80075ee:	e014      	b.n	800761a <main+0x12e>
    	          for (int i = 0; i < 4; i++) {
 80075f0:	2300      	movs	r3, #0
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
 80075f4:	e00b      	b.n	800760e <main+0x122>
    	              Mea_Result(i);
 80075f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075f8:	f7f9 f942 	bl	8000880 <Mea_Result>
    	              Comb_measurement(i);
 80075fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075fe:	f7f9 f9dd 	bl	80009bc <Comb_measurement>
    	              count += 6;
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	3306      	adds	r3, #6
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
    	          for (int i = 0; i < 4; i++) {
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	3301      	adds	r3, #1
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	2b03      	cmp	r3, #3
 8007612:	ddf0      	ble.n	80075f6 <main+0x10a>
    	          }
    	          HAL_Delay(100);  // Small delay between measurements
 8007614:	2064      	movs	r0, #100	; 0x64
 8007616:	f001 f9a3 	bl	8008960 <HAL_Delay>
    	      while (HAL_GetTick() - startTime < maxDuration) {  // Run loop according to the value of Read_time
 800761a:	f001 f997 	bl	800894c <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	429a      	cmp	r2, r3
 8007628:	d8e2      	bhi.n	80075f0 <main+0x104>
    	      }

    	      // Transmit the total count of bytes sent
    	      myDebug("%d",count);
 800762a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800762c:	4817      	ldr	r0, [pc, #92]	; (800768c <main+0x1a0>)
 800762e:	f7f9 fba1 	bl	8000d74 <myDebug>
    	      count = 0;  // Reset count after transmitting
 8007632:	2300      	movs	r3, #0
 8007634:	62bb      	str	r3, [r7, #40]	; 0x28
    	      HAL_UART_Transmit(&huart2, last, sizeof(last), 1000); //after reading
 8007636:	1d39      	adds	r1, r7, #4
 8007638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800763c:	2204      	movs	r2, #4
 800763e:	4811      	ldr	r0, [pc, #68]	; (8007684 <main+0x198>)
 8007640:	f004 fdfb 	bl	800c23a <HAL_UART_Transmit>
    	      HAL_UART_Transmit(&huart2, eom, sizeof(eom), 1000); // OBC stops or turned off EPDM mission
 8007644:	4639      	mov	r1, r7
 8007646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800764a:	2203      	movs	r2, #3
 800764c:	480d      	ldr	r0, [pc, #52]	; (8007684 <main+0x198>)
 800764e:	f004 fdf4 	bl	800c23a <HAL_UART_Transmit>
    	      HAL_Delay(90000);  // Wait for 1 minute after sending EOM
 8007652:	480f      	ldr	r0, [pc, #60]	; (8007690 <main+0x1a4>)
 8007654:	f001 f984 	bl	8008960 <HAL_Delay>
    if (Read_time >= 1 && Read_time <= 5) {
 8007658:	e006      	b.n	8007668 <main+0x17c>

    	  } else {
    	      // If Read_time is not in the valid range, send an error message
    	      HAL_UART_Transmit(&huart1, (uint8_t*)"xxxxxx**********ReadTimeInvalid**********xxxxxx", sizeof("xxxxxx**********ReadTimeInvalid**********xxxxxx"), 1000);
 800765a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800765e:	2230      	movs	r2, #48	; 0x30
 8007660:	490c      	ldr	r1, [pc, #48]	; (8007694 <main+0x1a8>)
 8007662:	4803      	ldr	r0, [pc, #12]	; (8007670 <main+0x184>)
 8007664:	f004 fde9 	bl	800c23a <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007668:	e7fe      	b.n	8007668 <main+0x17c>
 800766a:	bf00      	nop
 800766c:	0800f5f4 	.word	0x0800f5f4
 8007670:	20000550 	.word	0x20000550
 8007674:	40010c00 	.word	0x40010c00
 8007678:	200004f8 	.word	0x200004f8
 800767c:	4d445045 	.word	0x4d445045
 8007680:	0800f658 	.word	0x0800f658
 8007684:	20000730 	.word	0x20000730
 8007688:	200001b3 	.word	0x200001b3
 800768c:	0800f624 	.word	0x0800f624
 8007690:	00015f90 	.word	0x00015f90
 8007694:	0800f628 	.word	0x0800f628

08007698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b094      	sub	sp, #80	; 0x50
 800769c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800769e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076a2:	2228      	movs	r2, #40	; 0x28
 80076a4:	2100      	movs	r1, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f006 fb14 	bl	800dcd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	609a      	str	r2, [r3, #8]
 80076b8:	60da      	str	r2, [r3, #12]
 80076ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80076bc:	1d3b      	adds	r3, r7, #4
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	605a      	str	r2, [r3, #4]
 80076c4:	609a      	str	r2, [r3, #8]
 80076c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80076c8:	2309      	movs	r3, #9
 80076ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80076cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80076d2:	2300      	movs	r3, #0
 80076d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80076d6:	2301      	movs	r3, #1
 80076d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80076da:	2301      	movs	r3, #1
 80076dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076de:	2302      	movs	r3, #2
 80076e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80076e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80076e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80076e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80076ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076f2:	4618      	mov	r0, r3
 80076f4:	f002 ffec 	bl	800a6d0 <HAL_RCC_OscConfig>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80076fe:	f000 f98b 	bl	8007a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007702:	230f      	movs	r3, #15
 8007704:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007706:	2302      	movs	r3, #2
 8007708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800770a:	2300      	movs	r3, #0
 800770c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800770e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007712:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007714:	2300      	movs	r3, #0
 8007716:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007718:	f107 0314 	add.w	r3, r7, #20
 800771c:	2101      	movs	r1, #1
 800771e:	4618      	mov	r0, r3
 8007720:	f003 fa56 	bl	800abd0 <HAL_RCC_ClockConfig>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800772a:	f000 f975 	bl	8007a18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800772e:	2311      	movs	r3, #17
 8007730:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007736:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8007738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800773c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800773e:	1d3b      	adds	r3, r7, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f003 fbd3 	bl	800aeec <HAL_RCCEx_PeriphCLKConfig>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800774c:	f000 f964 	bl	8007a18 <Error_Handler>
  }
}
 8007750:	bf00      	nop
 8007752:	3750      	adds	r7, #80	; 0x50
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800775c:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <MX_RTC_Init+0x30>)
 800775e:	4a0b      	ldr	r2, [pc, #44]	; (800778c <MX_RTC_Init+0x34>)
 8007760:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8007762:	4b09      	ldr	r3, [pc, #36]	; (8007788 <MX_RTC_Init+0x30>)
 8007764:	f04f 32ff 	mov.w	r2, #4294967295
 8007768:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800776a:	4b07      	ldr	r3, [pc, #28]	; (8007788 <MX_RTC_Init+0x30>)
 800776c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007770:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007772:	4805      	ldr	r0, [pc, #20]	; (8007788 <MX_RTC_Init+0x30>)
 8007774:	f003 fd26 	bl	800b1c4 <HAL_RTC_Init>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800777e:	f000 f94b 	bl	8007a18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007782:	bf00      	nop
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200006b0 	.word	0x200006b0
 800778c:	40002800 	.word	0x40002800

08007790 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007794:	4b17      	ldr	r3, [pc, #92]	; (80077f4 <MX_SPI1_Init+0x64>)
 8007796:	4a18      	ldr	r2, [pc, #96]	; (80077f8 <MX_SPI1_Init+0x68>)
 8007798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800779a:	4b16      	ldr	r3, [pc, #88]	; (80077f4 <MX_SPI1_Init+0x64>)
 800779c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80077a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80077a2:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80077a8:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077ae:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80077b4:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80077ba:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80077c2:	4b0c      	ldr	r3, [pc, #48]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077c4:	2228      	movs	r2, #40	; 0x28
 80077c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80077ce:	4b09      	ldr	r3, [pc, #36]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077d4:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80077da:	4b06      	ldr	r3, [pc, #24]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077dc:	220a      	movs	r2, #10
 80077de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80077e0:	4804      	ldr	r0, [pc, #16]	; (80077f4 <MX_SPI1_Init+0x64>)
 80077e2:	f003 fe41 	bl	800b468 <HAL_SPI_Init>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80077ec:	f000 f914 	bl	8007a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80077f0:	bf00      	nop
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	200006d8 	.word	0x200006d8
 80077f8:	40013000 	.word	0x40013000

080077fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007800:	4b17      	ldr	r3, [pc, #92]	; (8007860 <MX_SPI2_Init+0x64>)
 8007802:	4a18      	ldr	r2, [pc, #96]	; (8007864 <MX_SPI2_Init+0x68>)
 8007804:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007806:	4b16      	ldr	r3, [pc, #88]	; (8007860 <MX_SPI2_Init+0x64>)
 8007808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800780c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800780e:	4b14      	ldr	r3, [pc, #80]	; (8007860 <MX_SPI2_Init+0x64>)
 8007810:	2200      	movs	r2, #0
 8007812:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007814:	4b12      	ldr	r3, [pc, #72]	; (8007860 <MX_SPI2_Init+0x64>)
 8007816:	2200      	movs	r2, #0
 8007818:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800781a:	4b11      	ldr	r3, [pc, #68]	; (8007860 <MX_SPI2_Init+0x64>)
 800781c:	2200      	movs	r2, #0
 800781e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <MX_SPI2_Init+0x64>)
 8007822:	2200      	movs	r2, #0
 8007824:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007826:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <MX_SPI2_Init+0x64>)
 8007828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800782c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800782e:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <MX_SPI2_Init+0x64>)
 8007830:	2220      	movs	r2, #32
 8007832:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007834:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <MX_SPI2_Init+0x64>)
 8007836:	2200      	movs	r2, #0
 8007838:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800783a:	4b09      	ldr	r3, [pc, #36]	; (8007860 <MX_SPI2_Init+0x64>)
 800783c:	2200      	movs	r2, #0
 800783e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007840:	4b07      	ldr	r3, [pc, #28]	; (8007860 <MX_SPI2_Init+0x64>)
 8007842:	2200      	movs	r2, #0
 8007844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007846:	4b06      	ldr	r3, [pc, #24]	; (8007860 <MX_SPI2_Init+0x64>)
 8007848:	220a      	movs	r2, #10
 800784a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800784c:	4804      	ldr	r0, [pc, #16]	; (8007860 <MX_SPI2_Init+0x64>)
 800784e:	f003 fe0b 	bl	800b468 <HAL_SPI_Init>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007858:	f000 f8de 	bl	8007a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800785c:	bf00      	nop
 800785e:	bd80      	pop	{r7, pc}
 8007860:	200004f8 	.word	0x200004f8
 8007864:	40003800 	.word	0x40003800

08007868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800786c:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <MX_USART1_UART_Init+0x4c>)
 800786e:	4a12      	ldr	r2, [pc, #72]	; (80078b8 <MX_USART1_UART_Init+0x50>)
 8007870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007872:	4b10      	ldr	r3, [pc, #64]	; (80078b4 <MX_USART1_UART_Init+0x4c>)
 8007874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800787a:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <MX_USART1_UART_Init+0x4c>)
 800787c:	2200      	movs	r2, #0
 800787e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007880:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <MX_USART1_UART_Init+0x4c>)
 8007882:	2200      	movs	r2, #0
 8007884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007886:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <MX_USART1_UART_Init+0x4c>)
 8007888:	2200      	movs	r2, #0
 800788a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <MX_USART1_UART_Init+0x4c>)
 800788e:	220c      	movs	r2, #12
 8007890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007892:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <MX_USART1_UART_Init+0x4c>)
 8007894:	2200      	movs	r2, #0
 8007896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007898:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <MX_USART1_UART_Init+0x4c>)
 800789a:	2200      	movs	r2, #0
 800789c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800789e:	4805      	ldr	r0, [pc, #20]	; (80078b4 <MX_USART1_UART_Init+0x4c>)
 80078a0:	f004 fc7b 	bl	800c19a <HAL_UART_Init>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80078aa:	f000 f8b5 	bl	8007a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80078ae:	bf00      	nop
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000550 	.word	0x20000550
 80078b8:	40013800 	.word	0x40013800

080078bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80078c0:	4b11      	ldr	r3, [pc, #68]	; (8007908 <MX_USART2_UART_Init+0x4c>)
 80078c2:	4a12      	ldr	r2, [pc, #72]	; (800790c <MX_USART2_UART_Init+0x50>)
 80078c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80078c6:	4b10      	ldr	r3, [pc, #64]	; (8007908 <MX_USART2_UART_Init+0x4c>)
 80078c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80078cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80078ce:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <MX_USART2_UART_Init+0x4c>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <MX_USART2_UART_Init+0x4c>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80078da:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <MX_USART2_UART_Init+0x4c>)
 80078dc:	2200      	movs	r2, #0
 80078de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80078e0:	4b09      	ldr	r3, [pc, #36]	; (8007908 <MX_USART2_UART_Init+0x4c>)
 80078e2:	220c      	movs	r2, #12
 80078e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078e6:	4b08      	ldr	r3, [pc, #32]	; (8007908 <MX_USART2_UART_Init+0x4c>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80078ec:	4b06      	ldr	r3, [pc, #24]	; (8007908 <MX_USART2_UART_Init+0x4c>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80078f2:	4805      	ldr	r0, [pc, #20]	; (8007908 <MX_USART2_UART_Init+0x4c>)
 80078f4:	f004 fc51 	bl	800c19a <HAL_UART_Init>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80078fe:	f000 f88b 	bl	8007a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007902:	bf00      	nop
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000730 	.word	0x20000730
 800790c:	40004400 	.word	0x40004400

08007910 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8007914:	4b0d      	ldr	r3, [pc, #52]	; (800794c <MX_USB_PCD_Init+0x3c>)
 8007916:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <MX_USB_PCD_Init+0x40>)
 8007918:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <MX_USB_PCD_Init+0x3c>)
 800791c:	2208      	movs	r2, #8
 800791e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007920:	4b0a      	ldr	r3, [pc, #40]	; (800794c <MX_USB_PCD_Init+0x3c>)
 8007922:	2202      	movs	r2, #2
 8007924:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007926:	4b09      	ldr	r3, [pc, #36]	; (800794c <MX_USB_PCD_Init+0x3c>)
 8007928:	2200      	movs	r2, #0
 800792a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800792c:	4b07      	ldr	r3, [pc, #28]	; (800794c <MX_USB_PCD_Init+0x3c>)
 800792e:	2200      	movs	r2, #0
 8007930:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007932:	4b06      	ldr	r3, [pc, #24]	; (800794c <MX_USB_PCD_Init+0x3c>)
 8007934:	2200      	movs	r2, #0
 8007936:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007938:	4804      	ldr	r0, [pc, #16]	; (800794c <MX_USB_PCD_Init+0x3c>)
 800793a:	f001 fb57 	bl	8008fec <HAL_PCD_Init>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8007944:	f000 f868 	bl	8007a18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8007948:	bf00      	nop
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000778 	.word	0x20000778
 8007950:	40005c00 	.word	0x40005c00

08007954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800795a:	f107 0310 	add.w	r3, r7, #16
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	605a      	str	r2, [r3, #4]
 8007964:	609a      	str	r2, [r3, #8]
 8007966:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007968:	4b28      	ldr	r3, [pc, #160]	; (8007a0c <MX_GPIO_Init+0xb8>)
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	4a27      	ldr	r2, [pc, #156]	; (8007a0c <MX_GPIO_Init+0xb8>)
 800796e:	f043 0320 	orr.w	r3, r3, #32
 8007972:	6193      	str	r3, [r2, #24]
 8007974:	4b25      	ldr	r3, [pc, #148]	; (8007a0c <MX_GPIO_Init+0xb8>)
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007980:	4b22      	ldr	r3, [pc, #136]	; (8007a0c <MX_GPIO_Init+0xb8>)
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	4a21      	ldr	r2, [pc, #132]	; (8007a0c <MX_GPIO_Init+0xb8>)
 8007986:	f043 0304 	orr.w	r3, r3, #4
 800798a:	6193      	str	r3, [r2, #24]
 800798c:	4b1f      	ldr	r3, [pc, #124]	; (8007a0c <MX_GPIO_Init+0xb8>)
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	60bb      	str	r3, [r7, #8]
 8007996:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007998:	4b1c      	ldr	r3, [pc, #112]	; (8007a0c <MX_GPIO_Init+0xb8>)
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	4a1b      	ldr	r2, [pc, #108]	; (8007a0c <MX_GPIO_Init+0xb8>)
 800799e:	f043 0308 	orr.w	r3, r3, #8
 80079a2:	6193      	str	r3, [r2, #24]
 80079a4:	4b19      	ldr	r3, [pc, #100]	; (8007a0c <MX_GPIO_Init+0xb8>)
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	f003 0308 	and.w	r3, r3, #8
 80079ac:	607b      	str	r3, [r7, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 80079b0:	2200      	movs	r2, #0
 80079b2:	f241 717f 	movw	r1, #6015	; 0x177f
 80079b6:	4816      	ldr	r0, [pc, #88]	; (8007a10 <MX_GPIO_Init+0xbc>)
 80079b8:	f001 fb00 	bl	8008fbc <HAL_GPIO_WritePin>
                          |CS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MSN_EN4_Pin|MSN_EN2_Pin, GPIO_PIN_RESET);
 80079bc:	2200      	movs	r2, #0
 80079be:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80079c2:	4814      	ldr	r0, [pc, #80]	; (8007a14 <MX_GPIO_Init+0xc0>)
 80079c4:	f001 fafa 	bl	8008fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin SS2_Pin SS3_Pin SS4_Pin
                           CS_FM_Pin DRDY4_Pin DRDY3_Pin DRDY2_Pin
                           DRDY1_Pin MSN_EN3_Pin MSN_EN1_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 80079c8:	f241 737f 	movw	r3, #6015	; 0x177f
 80079cc:	613b      	str	r3, [r7, #16]
                          |CS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079ce:	2301      	movs	r3, #1
 80079d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079d6:	2302      	movs	r3, #2
 80079d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079da:	f107 0310 	add.w	r3, r7, #16
 80079de:	4619      	mov	r1, r3
 80079e0:	480b      	ldr	r0, [pc, #44]	; (8007a10 <MX_GPIO_Init+0xbc>)
 80079e2:	f001 f967 	bl	8008cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN4_Pin MSN_EN2_Pin */
  GPIO_InitStruct.Pin = MSN_EN4_Pin|MSN_EN2_Pin;
 80079e6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80079ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079ec:	2301      	movs	r3, #1
 80079ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079f4:	2302      	movs	r3, #2
 80079f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079f8:	f107 0310 	add.w	r3, r7, #16
 80079fc:	4619      	mov	r1, r3
 80079fe:	4805      	ldr	r0, [pc, #20]	; (8007a14 <MX_GPIO_Init+0xc0>)
 8007a00:	f001 f958 	bl	8008cb4 <HAL_GPIO_Init>

}
 8007a04:	bf00      	nop
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40021000 	.word	0x40021000
 8007a10:	40010c00 	.word	0x40010c00
 8007a14:	40010800 	.word	0x40010800

08007a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007a1c:	b672      	cpsid	i
}
 8007a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007a20:	e7fe      	b.n	8007a20 <Error_Handler+0x8>
	...

08007a24 <Read_ID>:
	_SELECT_SR1,
	_SELECT_SR2,
	_SELECT_SR3,
};

void Read_ID(SPI_HandleTypeDef *SPI, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t *data) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	4613      	mov	r3, r2
 8007a32:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd = 0x9E;
 8007a34:	239e      	movs	r3, #158	; 0x9e
 8007a36:	75fb      	strb	r3, [r7, #23]
//	uint8_t data[20];
	int i;
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin, GPIO_PIN_RESET);
 8007a38:	88fb      	ldrh	r3, [r7, #6]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	68b8      	ldr	r0, [r7, #8]
 8007a40:	f001 fabc 	bl	8008fbc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007a44:	2064      	movs	r0, #100	; 0x64
 8007a46:	f000 ff8b 	bl	8008960 <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 300);
 8007a4a:	f107 0117 	add.w	r1, r7, #23
 8007a4e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007a52:	2201      	movs	r2, #1
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f003 fd8b 	bl	800b570 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, 20, 1000);
 8007a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a5e:	2214      	movs	r2, #20
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f003 fec8 	bl	800b7f8 <HAL_SPI_Receive>
	HAL_Delay(100);
 8007a68:	2064      	movs	r0, #100	; 0x64
 8007a6a:	f000 ff79 	bl	8008960 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOx,GPIO_Pin, GPIO_PIN_SET);
 8007a6e:	88fb      	ldrh	r3, [r7, #6]
 8007a70:	2201      	movs	r2, #1
 8007a72:	4619      	mov	r1, r3
 8007a74:	68b8      	ldr	r0, [r7, #8]
 8007a76:	f001 faa1 	bl	8008fbc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8007a7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a7e:	f000 ff6f 	bl	8008960 <HAL_Delay>
//	buff.DEV_INFO = data[5];
//	for (i = 6; i < 20; i++) {
//		buff.UID[i] = data[i];
//	}
//	HAL_UART_Transmit(&huart1, data, sizeof(data), 1000);
	HAL_UART_Transmit(&huart1, "Data received\n--------------", sizeof("Data received-----------\n"), 1000);
 8007a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a86:	221a      	movs	r2, #26
 8007a88:	4903      	ldr	r1, [pc, #12]	; (8007a98 <Read_ID+0x74>)
 8007a8a:	4804      	ldr	r0, [pc, #16]	; (8007a9c <Read_ID+0x78>)
 8007a8c:	f004 fbd5 	bl	800c23a <HAL_UART_Transmit>

//	*rxData = buff;
	return;
 8007a90:	bf00      	nop
}
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	0800f65c 	.word	0x0800f65c
 8007a9c:	20000550 	.word	0x20000550

08007aa0 <_nor_cs_assert>:
/* Functions */

static void _nor_cs_assert(nor_t *nor){
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	nor->config.CsAssert();
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <_nor_cs_deassert>:

static void _nor_cs_deassert(nor_t *nor){
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
	nor->config.CsDeassert();
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <_nor_spi_tx>:

static void _nor_spi_tx(nor_t *nor, uint8_t *txBuf, uint32_t size){
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
	nor->config.SpiTxFxn(txBuf, size);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	68b8      	ldr	r0, [r7, #8]
 8007ae0:	4798      	blx	r3
}
 8007ae2:	bf00      	nop
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <_nor_spi_rx>:

static void _nor_spi_rx(nor_t *nor, uint8_t *rxBuf, uint32_t size){
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	607a      	str	r2, [r7, #4]
	nor->config.SpiRxFxn(rxBuf, size);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	68b8      	ldr	r0, [r7, #8]
 8007afe:	4798      	blx	r3
}
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <_nor_delay_us>:

static void _nor_delay_us(nor_t *nor, uint32_t us){
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
	nor->config.DelayUs(us);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	6838      	ldr	r0, [r7, #0]
 8007b18:	4798      	blx	r3
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <_nor_ReadID>:

static uint32_t _nor_ReadID(nor_t *nor)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
	uint8_t JedecIdCmd = NOR_JEDEC_ID;
 8007b2a:	239e      	movs	r3, #158	; 0x9e
 8007b2c:	73fb      	strb	r3, [r7, #15]
	uint32_t ID = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60bb      	str	r3, [r7, #8]

	_nor_cs_assert(nor);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff ffb4 	bl	8007aa0 <_nor_cs_assert>
	_nor_spi_tx(nor, &JedecIdCmd, sizeof(JedecIdCmd));
 8007b38:	f107 030f 	add.w	r3, r7, #15
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff ffc3 	bl	8007acc <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&ID, 3);
 8007b46:	f107 0308 	add.w	r3, r7, #8
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff ffcb 	bl	8007aea <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ffae 	bl	8007ab6 <_nor_cs_deassert>

	return ID;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <_nor_ReadUniqID>:

static uint64_t _nor_ReadUniqID(nor_t *nor)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	uint8_t UniqueIdCmd = NOR_UNIQUE_ID;
 8007b6c:	234b      	movs	r3, #75	; 0x4b
 8007b6e:	77fb      	strb	r3, [r7, #31]
	uint64_t UniqueId = 0;
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	f04f 0300 	mov.w	r3, #0
 8007b78:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t DummyU32 = (~0UL);
 8007b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b80:	60fb      	str	r3, [r7, #12]

	_nor_cs_assert(nor);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff ff8c 	bl	8007aa0 <_nor_cs_assert>
	_nor_spi_tx(nor, &UniqueIdCmd, sizeof(UniqueIdCmd));
 8007b88:	f107 031f 	add.w	r3, r7, #31
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff ff9b 	bl	8007acc <_nor_spi_tx>
	// this if the 4 dummy byte
	_nor_spi_tx(nor, (uint8_t*)&DummyU32, 4);
 8007b96:	f107 030c 	add.w	r3, r7, #12
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff ff94 	bl	8007acc <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&UniqueId, sizeof(UniqueId));
 8007ba4:	f107 0310 	add.w	r3, r7, #16
 8007ba8:	2208      	movs	r2, #8
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff ff9c 	bl	8007aea <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff ff7f 	bl	8007ab6 <_nor_cs_deassert>

	return UniqueId;
 8007bb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	3720      	adds	r7, #32
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <_nor_WriteEnable>:

static void _nor_WriteEnable(nor_t *nor)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
	uint8_t WriteEnCmd = NOR_CMD_WRITE_EN;
 8007bce:	2306      	movs	r3, #6
 8007bd0:	73fb      	strb	r3, [r7, #15]

	_nor_cs_assert(nor);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff ff64 	bl	8007aa0 <_nor_cs_assert>
	_nor_spi_tx(nor, &WriteEnCmd, sizeof(WriteEnCmd));
 8007bd8:	f107 030f 	add.w	r3, r7, #15
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff ff73 	bl	8007acc <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff ff65 	bl	8007ab6 <_nor_cs_deassert>
	// TODO Check if a delay was needed here
}
 8007bec:	bf00      	nop
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <_nor_ReadStatusRegister>:
	_nor_spi_tx(nor, &WriteDisCmd, sizeof(WriteDisCmd));
	_nor_cs_deassert(nor);
}

uint8_t _nor_ReadStatusRegister(nor_t *nor, enum _nor_sr_select_e SelectSR)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0, ReadSRCmd;
 8007c00:	2300      	movs	r3, #0
 8007c02:	72fb      	strb	r3, [r7, #11]
	uint8_t *SrUpdateHandler;

	switch (SelectSR){
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d012      	beq.n	8007c30 <_nor_ReadStatusRegister+0x3c>
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	dc16      	bgt.n	8007c3c <_nor_ReadStatusRegister+0x48>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <_nor_ReadStatusRegister+0x24>
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d006      	beq.n	8007c24 <_nor_ReadStatusRegister+0x30>
 8007c16:	e011      	b.n	8007c3c <_nor_ReadStatusRegister+0x48>
	case _SELECT_SR1:
		ReadSRCmd = NOR_READ_SR1;
 8007c18:	2305      	movs	r3, #5
 8007c1a:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3342      	adds	r3, #66	; 0x42
 8007c20:	60fb      	str	r3, [r7, #12]
		break;
 8007c22:	e00d      	b.n	8007c40 <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR2:
		ReadSRCmd = NOR_READ_SR2;
 8007c24:	2370      	movs	r3, #112	; 0x70
 8007c26:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3342      	adds	r3, #66	; 0x42
 8007c2c:	60fb      	str	r3, [r7, #12]
		break;
 8007c2e:	e007      	b.n	8007c40 <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR3:
		ReadSRCmd = NOR_READ_SR3;
 8007c30:	2315      	movs	r3, #21
 8007c32:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3342      	adds	r3, #66	; 0x42
 8007c38:	60fb      	str	r3, [r7, #12]
		break;
 8007c3a:	e001      	b.n	8007c40 <_nor_ReadStatusRegister+0x4c>
	default:
		return 0xFF;
 8007c3c:	23ff      	movs	r3, #255	; 0xff
 8007c3e:	e017      	b.n	8007c70 <_nor_ReadStatusRegister+0x7c>
	}
	_nor_cs_assert(nor);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff ff2d 	bl	8007aa0 <_nor_cs_assert>
	_nor_spi_tx(nor, &ReadSRCmd, sizeof(ReadSRCmd));
 8007c46:	f107 030a 	add.w	r3, r7, #10
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff ff3c 	bl	8007acc <_nor_spi_tx>
	_nor_spi_rx(nor, &status, sizeof(status));
 8007c54:	f107 030b 	add.w	r3, r7, #11
 8007c58:	2201      	movs	r2, #1
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff ff44 	bl	8007aea <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ff27 	bl	8007ab6 <_nor_cs_deassert>

	*SrUpdateHandler = status;
 8007c68:	7afa      	ldrb	r2, [r7, #11]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	701a      	strb	r2, [r3, #0]

	return status;
 8007c6e:	7afb      	ldrb	r3, [r7, #11]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <_nor_WaitForWriteEnd>:
	_nor_spi_tx(nor, WriteSR, sizeof(WriteSR));
	_nor_cs_deassert(nor);
}

nor_err_e _nor_WaitForWriteEnd(nor_t *nor, uint32_t msTimeout)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
	uint8_t ReadSr1Cmd = NOR_READ_SR1;
 8007c82:	2305      	movs	r3, #5
 8007c84:	73fb      	strb	r3, [r7, #15]

	// multply timeout for 10, we must run a delay of 100us on each iteraction
	msTimeout *= 10;
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	603b      	str	r3, [r7, #0]
	_nor_cs_assert(nor);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff ff04 	bl	8007aa0 <_nor_cs_assert>
	_nor_spi_tx(nor, (uint8_t*)&ReadSr1Cmd, sizeof(ReadSr1Cmd));
 8007c98:	f107 030f 	add.w	r3, r7, #15
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff ff13 	bl	8007acc <_nor_spi_tx>
	do{
		_nor_spi_rx(nor, &nor->_internal.u8StatusReg1, sizeof(uint8_t));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3342      	adds	r3, #66	; 0x42
 8007caa:	2201      	movs	r2, #1
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff ff1b 	bl	8007aea <_nor_spi_rx>
		_nor_delay_us(nor, 100);
 8007cb4:	2164      	movs	r1, #100	; 0x64
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff ff26 	bl	8007b08 <_nor_delay_us>
		msTimeout -= 100;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	3b64      	subs	r3, #100	; 0x64
 8007cc0:	603b      	str	r3, [r7, #0]
	}while ((nor->_internal.u8StatusReg1 & SR1_BUSY_BIT) && (msTimeout > 0));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <_nor_WaitForWriteEnd+0x5e>
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e7      	bne.n	8007ca6 <_nor_WaitForWriteEnd+0x2e>
	_nor_cs_deassert(nor);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff feed 	bl	8007ab6 <_nor_cs_deassert>

	if (msTimeout == 0){
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <_nor_WaitForWriteEnd+0x6e>
		return NOR_FAIL;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <_nor_WaitForWriteEnd+0x70>
	}
	return NOR_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <NOR_Init>:

/*
 * Publics
 */

nor_err_e NOR_Init(nor_t *nor){
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
	uint8_t ExitPDCmd = NOR_RELEASE_PD;
 8007cf8:	23ab      	movs	r3, #171	; 0xab
 8007cfa:	73fb      	strb	r3, [r7, #15]

	if (nor == NULL || nor->config.CsAssert == NULL ||
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d013      	beq.n	8007d2a <NOR_Init+0x3a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00f      	beq.n	8007d2a <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
	if (nor == NULL || nor->config.CsAssert == NULL ||
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d007      	beq.n	8007d2a <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <NOR_Init+0x3e>
		NOR_PRINTF("ERROR: Invalid Parameters on %s function\n", __func__);
		return NOR_INVALID_PARAMS;
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	e09a      	b.n	8007e64 <NOR_Init+0x174>
	}
	if (nor->_internal.u16Initialized == NOR_INITIALIZED_FLAG){
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d34:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d101      	bne.n	8007d40 <NOR_Init+0x50>
		// the flash instance is already initialized
		NOR_PRINTF("Warning: Flash is already initialized.\n");
		return NOR_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e091      	b.n	8007e64 <NOR_Init+0x174>
	}
	// we must have sure that the NOR has your CS pin deasserted
	_nor_cs_deassert(nor);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff feb8 	bl	8007ab6 <_nor_cs_deassert>
	_nor_delay_us(nor, 100);
 8007d46:	2164      	movs	r1, #100	; 0x64
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7ff fedd 	bl	8007b08 <_nor_delay_us>

	// we are assuming, on startup, that the Flash is on Power Down State
	nor->_internal.u8PdCount = 0;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nor->pdState = NOR_IN_IDLE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	_nor_cs_assert(nor);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff fe9e 	bl	8007aa0 <_nor_cs_assert>
	_nor_spi_tx(nor, &ExitPDCmd, sizeof(ExitPDCmd));
 8007d64:	f107 030f 	add.w	r3, r7, #15
 8007d68:	2201      	movs	r2, #1
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff fead 	bl	8007acc <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff fe9f 	bl	8007ab6 <_nor_cs_deassert>

	nor->info.u32JedecID = _nor_ReadID(nor);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff fed2 	bl	8007b22 <_nor_ReadID>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	621a      	str	r2, [r3, #32]
	if (nor->info.u32JedecID == 0x000000 || nor->info.u32JedecID == 0xFFFFFF){
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <NOR_Init+0xa8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d101      	bne.n	8007d9c <NOR_Init+0xac>
		// invalid Id, I thing we don't has any flash on SPI
		NOR_PRINTF("ERROR: Flash memory bus fault.\n");
		return NOR_NO_MEMORY_FOUND;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e063      	b.n	8007e64 <NOR_Init+0x174>
	}
	nor->Manufacturer = NOR_IDS_Interpret_Manufacturer(nor->info.u32JedecID);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fa2f 	bl	8008204 <NOR_IDS_Interpret_Manufacturer>
 8007da6:	4603      	mov	r3, r0
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	nor->Model = NOR_IDS_Interpret_Model(nor->info.u32JedecID);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fa30 	bl	800821a <NOR_IDS_Interpret_Model>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	if (nor->Model == NOR_MODEL_UNKNOWN){
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d101      	bne.n	8007dd6 <NOR_Init+0xe6>
		NOR_PRINTF("ERROR: The flash memory model wasn't reconignized.\n"
				"You can, yet, start with NOR_Init_wo_ID to ignore the Flash ID.");
		return NOR_UNKNOWN_DEVICE;
 8007dd2:	2304      	movs	r3, #4
 8007dd4:	e046      	b.n	8007e64 <NOR_Init+0x174>
	}

	nor->info.u64UniqueId = _nor_ReadUniqID(nor);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fec4 	bl	8007b64 <_nor_ReadUniqID>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	nor->info.u32BlockCount = NOR_IDS_GetQtdBlocks(nor->info.u32JedecID);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fa39 	bl	8008262 <NOR_IDS_GetQtdBlocks>
 8007df0:	4602      	mov	r2, r0
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	63da      	str	r2, [r3, #60]	; 0x3c

	nor->info.u16PageSize = NOR_PAGE_SIZE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dfc:	851a      	strh	r2, [r3, #40]	; 0x28
	nor->info.u16SectorSize = NOR_SECTOR_SIZE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e04:	861a      	strh	r2, [r3, #48]	; 0x30
	nor->info.u32BlockSize = NOR_BLOCK_SIZE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38
	nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e12:	011a      	lsls	r2, r3, #4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	635a      	str	r2, [r3, #52]	; 0x34
	nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8007e20:	fb02 f303 	mul.w	r3, r2, r3
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007e28:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	62da      	str	r2, [r3, #44]	; 0x2c
	nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8007e38:	fb02 f203 	mul.w	r2, r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	625a      	str	r2, [r3, #36]	; 0x24

	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007e40:	2100      	movs	r1, #0
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff fed6 	bl	8007bf4 <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007e48:	2100      	movs	r1, #0
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff fed2 	bl	8007bf4 <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007e50:	2100      	movs	r1, #0
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7ff fece 	bl	8007bf4 <_nor_ReadStatusRegister>

	nor->_internal.u16Initialized = NOR_INITIALIZED_FLAG;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007e5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	NOR_PRINTF(" Sector Count | %d Sectors\n", (uint)nor->info.u32SectorCount);
	NOR_PRINTF(" Block Count  | %d Blocks\n", (uint)nor->info.u32BlockCount);
	NOR_PRINTF(" Capacity     | %d %d KB\n", nor->info.u32Size,(uint)(nor->info.u32Size/1024));
	NOR_PRINTF(" == NOR Initialization Done ==\n");

	return NOR_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <NOR_EraseAddress>:
	}
	NOR_PRINTF("Done!\n");
	return err;
}

nor_err_e NOR_EraseAddress(nor_t *nor, uint32_t Address, nor_erase_method_e method){
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]
	uint8_t EraseChipCmd[4];
	uint32_t expectedTimeoutUs;
	nor_err_e err;

	_SANITY_CHECK(nor);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <NOR_EraseAddress+0x18>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e043      	b.n	8007f0c <NOR_EraseAddress+0xa0>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007e8a:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d001      	beq.n	8007e96 <NOR_EraseAddress+0x2a>
 8007e92:	2306      	movs	r3, #6
 8007e94:	e03a      	b.n	8007f0c <NOR_EraseAddress+0xa0>

	switch (method){
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d010      	beq.n	8007ebe <NOR_EraseAddress+0x52>
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	dc13      	bgt.n	8007ec8 <NOR_EraseAddress+0x5c>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <NOR_EraseAddress+0x3e>
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d005      	beq.n	8007eb4 <NOR_EraseAddress+0x48>
 8007ea8:	e00e      	b.n	8007ec8 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_4K:
		NOR_PRINTF("Erasing 4K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_4K;
 8007eaa:	2320      	movs	r3, #32
 8007eac:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_4K_ERASE_TIME;
 8007eae:	4b19      	ldr	r3, [pc, #100]	; (8007f14 <NOR_EraseAddress+0xa8>)
 8007eb0:	61fb      	str	r3, [r7, #28]
		break;
 8007eb2:	e009      	b.n	8007ec8 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_32K:
		NOR_PRINTF("Erasing 32K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_32K;
 8007eb4:	2352      	movs	r3, #82	; 0x52
 8007eb6:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_32K_ERASE_TIME;
 8007eb8:	4b17      	ldr	r3, [pc, #92]	; (8007f18 <NOR_EraseAddress+0xac>)
 8007eba:	61fb      	str	r3, [r7, #28]
		break;
 8007ebc:	e004      	b.n	8007ec8 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_64K:
		NOR_PRINTF("Erasing 64K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_64K;
 8007ebe:	23d8      	movs	r3, #216	; 0xd8
 8007ec0:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_64K_ERASE_TIME;
 8007ec2:	4b16      	ldr	r3, [pc, #88]	; (8007f1c <NOR_EraseAddress+0xb0>)
 8007ec4:	61fb      	str	r3, [r7, #28]
		break;
 8007ec6:	bf00      	nop
	}
	EraseChipCmd[1] = ((Address >> 16) & 0xFF);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	0c1b      	lsrs	r3, r3, #16
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	757b      	strb	r3, [r7, #21]
	EraseChipCmd[2] = ((Address >> 8) & 0xFF);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	0a1b      	lsrs	r3, r3, #8
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	75bb      	strb	r3, [r7, #22]
	EraseChipCmd[3] = ((Address) & 0xFF);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	75fb      	strb	r3, [r7, #23]

	_nor_WriteEnable(nor);
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f7ff fe71 	bl	8007bc6 <_nor_WriteEnable>
	_nor_cs_assert(nor);
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f7ff fddb 	bl	8007aa0 <_nor_cs_assert>
	_nor_spi_tx(nor, EraseChipCmd, sizeof(EraseChipCmd));
 8007eea:	f107 0314 	add.w	r3, r7, #20
 8007eee:	2204      	movs	r2, #4
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff fdea 	bl	8007acc <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff fddc 	bl	8007ab6 <_nor_cs_deassert>
	err = _nor_WaitForWriteEnd(nor, expectedTimeoutUs);
 8007efe:	69f9      	ldr	r1, [r7, #28]
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff feb9 	bl	8007c78 <_nor_WaitForWriteEnd>
 8007f06:	4603      	mov	r3, r0
 8007f08:	76fb      	strb	r3, [r7, #27]
	if (err != NOR_OK){
		NOR_PRINTF("ERROR: Failed to erase flash\n");
	}
	NOR_PRINTF("Done!\n");

	return err;
 8007f0a:	7efb      	ldrb	r3, [r7, #27]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	00061a80 	.word	0x00061a80
 8007f18:	00186a00 	.word	0x00186a00
 8007f1c:	001e8480 	.word	0x001e8480

08007f20 <NOR_EraseSector>:

nor_err_e NOR_EraseSector(nor_t *nor, uint32_t SectorAddr){
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <NOR_EraseSector+0x14>
 8007f30:	2302      	movs	r3, #2
 8007f32:	e015      	b.n	8007f60 <NOR_EraseSector+0x40>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f3a:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d001      	beq.n	8007f46 <NOR_EraseSector+0x26>
 8007f42:	2306      	movs	r3, #6
 8007f44:	e00c      	b.n	8007f60 <NOR_EraseSector+0x40>

	Address = SectorAddr * nor->info.u16SectorSize;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	fb02 f303 	mul.w	r3, r2, r3
 8007f52:	60fb      	str	r3, [r7, #12]
	return NOR_EraseAddress(nor, Address, NOR_ERASE_4K);
 8007f54:	2200      	movs	r2, #0
 8007f56:	68f9      	ldr	r1, [r7, #12]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff ff87 	bl	8007e6c <NOR_EraseAddress>
 8007f5e:	4603      	mov	r3, r0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <NOR_WriteBytes>:

	ActAddress = (nor->info.u32BlockSize * BlockAddr) + Offset;
	return NOR_IsEmptyAddress(nor, ActAddress, NumBytesToCheck);
}

nor_err_e NOR_WriteBytes(nor_t *nor, uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NumBytesToWrite){
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
	uint8_t WriteCmd[4];
	uint32_t _BytesToWrite;

	_SANITY_CHECK(nor);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <NOR_WriteBytes+0x18>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e05f      	b.n	8008040 <NOR_WriteBytes+0xd8>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f86:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d001      	beq.n	8007f92 <NOR_WriteBytes+0x2a>
 8007f8e:	2306      	movs	r3, #6
 8007f90:	e056      	b.n	8008040 <NOR_WriteBytes+0xd8>

	if (NumBytesToWrite == 0){
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <NOR_WriteBytes+0x34>
		NOR_PRINTF("ERROR: Invalid parameters on NOR_WriteBytes\n");
		return NOR_INVALID_PARAMS;
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e051      	b.n	8008040 <NOR_WriteBytes+0xd8>
	}
	// TODO check if Address is not grater than the Flash size
	NOR_PRINTF("Writing %d bytes into Address %08X.\n", (uint)NumBytesToWrite, (uint)WriteAddr);
	NOR_PRINTF("Buffer to Write into Flash:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < NumBytesToWrite; i++)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61bb      	str	r3, [r7, #24]
 8007fa0:	e002      	b.n	8007fa8 <NOR_WriteBytes+0x40>
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	61bb      	str	r3, [r7, #24]
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d3f8      	bcc.n	8007fa2 <NOR_WriteBytes+0x3a>
		}
		NOR_PRINTF("%02X ", pBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	do{
		if (((WriteAddr%nor->info.u16PageSize)+NumBytesToWrite) > nor->info.u16PageSize){
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fbc:	fb02 f201 	mul.w	r2, r2, r1
 8007fc0:	1a9a      	subs	r2, r3, r2
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d903      	bls.n	8007fd6 <NOR_WriteBytes+0x6e>
			_BytesToWrite = nor->info.u16PageSize;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd2:	61fb      	str	r3, [r7, #28]
 8007fd4:	e001      	b.n	8007fda <NOR_WriteBytes+0x72>
		}
		else{
			_BytesToWrite = NumBytesToWrite;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	61fb      	str	r3, [r7, #28]
		}
		_nor_WriteEnable(nor);
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff fdf3 	bl	8007bc6 <_nor_WriteEnable>
		WriteCmd[0] = NOR_PAGE_PROGRAM;
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	753b      	strb	r3, [r7, #20]
		WriteCmd[1] = ((WriteAddr >> 16) & 0xFF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	0c1b      	lsrs	r3, r3, #16
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	757b      	strb	r3, [r7, #21]
		WriteCmd[2] = ((WriteAddr >> 8) & 0xFF);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	0a1b      	lsrs	r3, r3, #8
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	75bb      	strb	r3, [r7, #22]
		WriteCmd[3] = ((WriteAddr) & 0xFF);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	75fb      	strb	r3, [r7, #23]
		_nor_cs_assert(nor);
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7ff fd50 	bl	8007aa0 <_nor_cs_assert>
		_nor_spi_tx(nor, WriteCmd, sizeof(WriteCmd));
 8008000:	f107 0314 	add.w	r3, r7, #20
 8008004:	2204      	movs	r2, #4
 8008006:	4619      	mov	r1, r3
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7ff fd5f 	bl	8007acc <_nor_spi_tx>
		_nor_spi_tx(nor, pBuffer, _BytesToWrite);
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff fd5a 	bl	8007acc <_nor_spi_tx>
		_nor_cs_deassert(nor);
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f7ff fd4c 	bl	8007ab6 <_nor_cs_deassert>
		_nor_WaitForWriteEnd(nor, NOR_EXPECT_PAGE_PROG_TIME);
 800801e:	f242 7110 	movw	r1, #10000	; 0x2710
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff fe28 	bl	8007c78 <_nor_WaitForWriteEnd>
		pBuffer += _BytesToWrite;
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	4413      	add	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]
		NumBytesToWrite -= _BytesToWrite;
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	603b      	str	r3, [r7, #0]
	}while (NumBytesToWrite > 0);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1b8      	bne.n	8007fb0 <NOR_WriteBytes+0x48>
	NOR_PRINTF("Write done.!\n");

	return NOR_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3720      	adds	r7, #32
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <NOR_WriteSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_WriteSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumBytesToWrite){
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <NOR_WriteSector+0x18>
 800805c:	2302      	movs	r3, #2
 800805e:	e027      	b.n	80080b0 <NOR_WriteSector+0x68>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008066:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800806a:	4293      	cmp	r3, r2
 800806c:	d00a      	beq.n	8008084 <NOR_WriteSector+0x3c>
 800806e:	2306      	movs	r3, #6
 8008070:	e01e      	b.n	80080b0 <NOR_WriteSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3301      	adds	r3, #1
 8008076:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800807c:	461a      	mov	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	1a9b      	subs	r3, r3, r2
 8008082:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008088:	461a      	mov	r2, r3
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	4293      	cmp	r3, r2
 800808e:	d2f0      	bcs.n	8008072 <NOR_WriteSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008094:	461a      	mov	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	fb03 f302 	mul.w	r3, r3, r2
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	4413      	add	r3, r2
 80080a0:	617b      	str	r3, [r7, #20]
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	68b9      	ldr	r1, [r7, #8]
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7ff ff5d 	bl	8007f68 <NOR_WriteBytes>
 80080ae:	4603      	mov	r3, r0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <NOR_ReadBytes>:

	Address = (BlockAddr * nor->info.u32BlockSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_ReadBytes(nor_t *nor, uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead){
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	; 0x28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
	uint8_t ReadCmd[5];
	uint32_t _BytesToRead;
	uint8_t *originalBuffer;
	uint32_t originalNumBytes;

	_SANITY_CHECK(nor);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <NOR_ReadBytes+0x18>
 80080cc:	2302      	movs	r3, #2
 80080ce:	e05d      	b.n	800818c <NOR_ReadBytes+0xd4>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80080d6:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 80080da:	4293      	cmp	r3, r2
 80080dc:	d001      	beq.n	80080e2 <NOR_ReadBytes+0x2a>
 80080de:	2306      	movs	r3, #6
 80080e0:	e054      	b.n	800818c <NOR_ReadBytes+0xd4>

	if (NumByteToRead == 0){
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <NOR_ReadBytes+0x34>
		return NOR_INVALID_PARAMS;
 80080e8:	2302      	movs	r3, #2
 80080ea:	e04f      	b.n	800818c <NOR_ReadBytes+0xd4>
	}
	// TODO check if Address is not grater than the Flash size

	originalBuffer = pBuffer;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	61fb      	str	r3, [r7, #28]
	originalNumBytes = NumByteToRead;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	61bb      	str	r3, [r7, #24]
	NOR_PRINTF("Reading %d bytes on the Address %08X.\n", (uint)NumByteToRead, (uint)ReadAddr);
	do{
		if (((ReadAddr%nor->info.u16PageSize)+NumByteToRead) > nor->info.u16PageSize){
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f8:	461a      	mov	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008100:	fb02 f201 	mul.w	r2, r2, r1
 8008104:	1a9a      	subs	r2, r3, r2
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	4413      	add	r3, r2
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800810e:	4293      	cmp	r3, r2
 8008110:	d903      	bls.n	800811a <NOR_ReadBytes+0x62>
			_BytesToRead = nor->info.u16PageSize;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
 8008118:	e001      	b.n	800811e <NOR_ReadBytes+0x66>
		}
		else{
			_BytesToRead = NumByteToRead;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		ReadCmd[0] = NOR_READ_FAST_DATA;
 800811e:	230b      	movs	r3, #11
 8008120:	743b      	strb	r3, [r7, #16]
		ReadCmd[1] = ((ReadAddr >> 16) & 0xFF);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	0c1b      	lsrs	r3, r3, #16
 8008126:	b2db      	uxtb	r3, r3
 8008128:	747b      	strb	r3, [r7, #17]
		ReadCmd[2] = ((ReadAddr >> 8) & 0xFF);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	0a1b      	lsrs	r3, r3, #8
 800812e:	b2db      	uxtb	r3, r3
 8008130:	74bb      	strb	r3, [r7, #18]
		ReadCmd[3] = ((ReadAddr) & 0xFF);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	74fb      	strb	r3, [r7, #19]
		ReadCmd[4] = 0x00;
 8008138:	2300      	movs	r3, #0
 800813a:	753b      	strb	r3, [r7, #20]
		_nor_cs_assert(nor);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f7ff fcaf 	bl	8007aa0 <_nor_cs_assert>
		_nor_spi_tx(nor, ReadCmd, sizeof(ReadCmd));
 8008142:	f107 0310 	add.w	r3, r7, #16
 8008146:	2205      	movs	r2, #5
 8008148:	4619      	mov	r1, r3
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f7ff fcbe 	bl	8007acc <_nor_spi_tx>
		_nor_spi_rx(nor, pBuffer, _BytesToRead);
 8008150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff fcc8 	bl	8007aea <_nor_spi_rx>
		_nor_cs_deassert(nor);
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff fcab 	bl	8007ab6 <_nor_cs_deassert>
		pBuffer += _BytesToRead;
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	4413      	add	r3, r2
 8008166:	60bb      	str	r3, [r7, #8]
		NumByteToRead -= _BytesToRead;
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	603b      	str	r3, [r7, #0]
	}while(NumByteToRead > 0);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1be      	bne.n	80080f4 <NOR_ReadBytes+0x3c>

	NOR_PRINTF("Buffer readed from NOR:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < originalNumBytes; i++)
 8008176:	2300      	movs	r3, #0
 8008178:	623b      	str	r3, [r7, #32]
 800817a:	e002      	b.n	8008182 <NOR_ReadBytes+0xca>
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	3301      	adds	r3, #1
 8008180:	623b      	str	r3, [r7, #32]
 8008182:	6a3a      	ldr	r2, [r7, #32]
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	429a      	cmp	r2, r3
 8008188:	d3f8      	bcc.n	800817c <NOR_ReadBytes+0xc4>
		NOR_PRINTF("%02X ", originalBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	NOR_PRINTF("mt25qxx ReadBytes done.\n");

	return NOR_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3728      	adds	r7, #40	; 0x28
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <NOR_ReadSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
}

nor_err_e NOR_ReadSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumByteToRead){
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <NOR_ReadSector+0x18>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e027      	b.n	80081fc <NOR_ReadSector+0x68>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081b2:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00a      	beq.n	80081d0 <NOR_ReadSector+0x3c>
 80081ba:	2306      	movs	r3, #6
 80081bc:	e01e      	b.n	80081fc <NOR_ReadSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3301      	adds	r3, #1
 80081c2:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80081c8:	461a      	mov	r2, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80081d4:	461a      	mov	r2, r3
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	4293      	cmp	r3, r2
 80081da:	d2f0      	bcs.n	80081be <NOR_ReadSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80081e0:	461a      	mov	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	fb03 f302 	mul.w	r3, r3, r2
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	4413      	add	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff ff5f 	bl	80080b8 <NOR_ReadBytes>
 80081fa:	4603      	mov	r3, r0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <NOR_IDS_Interpret_Manufacturer>:
 *      Author: Sangam
 */

#include "nor_ids.h"

nor_manuf_e NOR_IDS_Interpret_Manufacturer (uint32_t JedecID){
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	return (nor_manuf_e)(JedecID & 0xFF);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	b2db      	uxtb	r3, r3
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	bc80      	pop	{r7}
 8008218:	4770      	bx	lr

0800821a <NOR_IDS_Interpret_Model>:

nor_model_e NOR_IDS_Interpret_Model (uint32_t JedecID){
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff ffee 	bl	8008204 <NOR_IDS_Interpret_Manufacturer>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]

	switch (Manuf){
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	2bef      	cmp	r3, #239	; 0xef
 8008230:	d00e      	beq.n	8008250 <NOR_IDS_Interpret_Model+0x36>
 8008232:	2bef      	cmp	r3, #239	; 0xef
 8008234:	dc03      	bgt.n	800823e <NOR_IDS_Interpret_Model+0x24>
 8008236:	2b20      	cmp	r3, #32
 8008238:	d00e      	beq.n	8008258 <NOR_IDS_Interpret_Model+0x3e>
 800823a:	2bc2      	cmp	r3, #194	; 0xc2
 800823c:	d002      	beq.n	8008244 <NOR_IDS_Interpret_Model+0x2a>
	case	MANUF_PUYA:
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		return NOR_MODEL_UNKNOWN;
 800823e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008242:	e00a      	b.n	800825a <NOR_IDS_Interpret_Model+0x40>
	case 	MANUF_MXIC:
		return ((JedecID >> 16) & 0xFF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	0c1b      	lsrs	r3, r3, #16
 8008248:	b29b      	uxth	r3, r3
 800824a:	b2db      	uxtb	r3, r3
 800824c:	b29b      	uxth	r3, r3
 800824e:	e004      	b.n	800825a <NOR_IDS_Interpret_Model+0x40>
		break;
	case	MANUF_WINBOND:
		return ((JedecID >> 8) & 0xFFFF);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	0a1b      	lsrs	r3, r3, #8
 8008254:	b29b      	uxth	r3, r3
 8008256:	e000      	b.n	800825a <NOR_IDS_Interpret_Model+0x40>
		break;

	case    MANUF_MT25QL: return MANUF_MT25QL; break;
 8008258:	2320      	movs	r3, #32
	}
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <NOR_IDS_GetQtdBlocks>:

uint32_t NOR_IDS_GetQtdBlocks(uint32_t JedecID){
 8008262:	b580      	push	{r7, lr}
 8008264:	b086      	sub	sp, #24
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff ffca 	bl	8008204 <NOR_IDS_Interpret_Manufacturer>
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]
	uint8_t density, i;
	uint32_t blocks;

	switch (Manuf){
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	2bef      	cmp	r3, #239	; 0xef
 8008278:	d008      	beq.n	800828c <NOR_IDS_GetQtdBlocks+0x2a>
 800827a:	2bef      	cmp	r3, #239	; 0xef
 800827c:	dc03      	bgt.n	8008286 <NOR_IDS_GetQtdBlocks+0x24>
 800827e:	2b85      	cmp	r3, #133	; 0x85
 8008280:	d004      	beq.n	800828c <NOR_IDS_GetQtdBlocks+0x2a>
 8008282:	2bc2      	cmp	r3, #194	; 0xc2
 8008284:	d002      	beq.n	800828c <NOR_IDS_GetQtdBlocks+0x2a>
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		blocks = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	613b      	str	r3, [r7, #16]
		break;
 800828a:	e015      	b.n	80082b8 <NOR_IDS_GetQtdBlocks+0x56>
	case	MANUF_PUYA:
	case 	MANUF_MXIC:
	case	MANUF_WINBOND:
		density = ((JedecID >> 16) & 0xFF);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	0c1b      	lsrs	r3, r3, #16
 8008290:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	3b11      	subs	r3, #17
 8008296:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 8008298:	2302      	movs	r3, #2
 800829a:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 800829c:	2300      	movs	r3, #0
 800829e:	75fb      	strb	r3, [r7, #23]
 80082a0:	e005      	b.n	80082ae <NOR_IDS_GetQtdBlocks+0x4c>
			blocks *= 2;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	3301      	adds	r3, #1
 80082ac:	75fb      	strb	r3, [r7, #23]
 80082ae:	7dfa      	ldrb	r2, [r7, #23]
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d3f5      	bcc.n	80082a2 <NOR_IDS_GetQtdBlocks+0x40>
		}
		break;
 80082b6:	bf00      	nop
	}

	return blocks;
 80082b8:	693b      	ldr	r3, [r7, #16]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80082ca:	4b15      	ldr	r3, [pc, #84]	; (8008320 <HAL_MspInit+0x5c>)
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	4a14      	ldr	r2, [pc, #80]	; (8008320 <HAL_MspInit+0x5c>)
 80082d0:	f043 0301 	orr.w	r3, r3, #1
 80082d4:	6193      	str	r3, [r2, #24]
 80082d6:	4b12      	ldr	r3, [pc, #72]	; (8008320 <HAL_MspInit+0x5c>)
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	60bb      	str	r3, [r7, #8]
 80082e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082e2:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <HAL_MspInit+0x5c>)
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	4a0e      	ldr	r2, [pc, #56]	; (8008320 <HAL_MspInit+0x5c>)
 80082e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ec:	61d3      	str	r3, [r2, #28]
 80082ee:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <HAL_MspInit+0x5c>)
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082f6:	607b      	str	r3, [r7, #4]
 80082f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80082fa:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <HAL_MspInit+0x60>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	4a04      	ldr	r2, [pc, #16]	; (8008324 <HAL_MspInit+0x60>)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008316:	bf00      	nop
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr
 8008320:	40021000 	.word	0x40021000
 8008324:	40010000 	.word	0x40010000

08008328 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a0f      	ldr	r2, [pc, #60]	; (8008374 <HAL_RTC_MspInit+0x4c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d118      	bne.n	800836c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800833a:	f002 f9bd 	bl	800a6b8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800833e:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <HAL_RTC_MspInit+0x50>)
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	4a0d      	ldr	r2, [pc, #52]	; (8008378 <HAL_RTC_MspInit+0x50>)
 8008344:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008348:	61d3      	str	r3, [r2, #28]
 800834a:	4b0b      	ldr	r3, [pc, #44]	; (8008378 <HAL_RTC_MspInit+0x50>)
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008356:	4b09      	ldr	r3, [pc, #36]	; (800837c <HAL_RTC_MspInit+0x54>)
 8008358:	2201      	movs	r2, #1
 800835a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800835c:	2200      	movs	r2, #0
 800835e:	2100      	movs	r1, #0
 8008360:	2003      	movs	r0, #3
 8008362:	f000 fbf8 	bl	8008b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008366:	2003      	movs	r0, #3
 8008368:	f000 fc11 	bl	8008b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40002800 	.word	0x40002800
 8008378:	40021000 	.word	0x40021000
 800837c:	4242043c 	.word	0x4242043c

08008380 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008388:	f107 0318 	add.w	r3, r7, #24
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	605a      	str	r2, [r3, #4]
 8008392:	609a      	str	r2, [r3, #8]
 8008394:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a3f      	ldr	r2, [pc, #252]	; (8008498 <HAL_SPI_MspInit+0x118>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d138      	bne.n	8008412 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80083a0:	4b3e      	ldr	r3, [pc, #248]	; (800849c <HAL_SPI_MspInit+0x11c>)
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	4a3d      	ldr	r2, [pc, #244]	; (800849c <HAL_SPI_MspInit+0x11c>)
 80083a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083aa:	6193      	str	r3, [r2, #24]
 80083ac:	4b3b      	ldr	r3, [pc, #236]	; (800849c <HAL_SPI_MspInit+0x11c>)
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083b8:	4b38      	ldr	r3, [pc, #224]	; (800849c <HAL_SPI_MspInit+0x11c>)
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	4a37      	ldr	r2, [pc, #220]	; (800849c <HAL_SPI_MspInit+0x11c>)
 80083be:	f043 0304 	orr.w	r3, r3, #4
 80083c2:	6193      	str	r3, [r2, #24]
 80083c4:	4b35      	ldr	r3, [pc, #212]	; (800849c <HAL_SPI_MspInit+0x11c>)
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	613b      	str	r3, [r7, #16]
 80083ce:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80083d0:	23a0      	movs	r3, #160	; 0xa0
 80083d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083d4:	2302      	movs	r3, #2
 80083d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083d8:	2303      	movs	r3, #3
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083dc:	f107 0318 	add.w	r3, r7, #24
 80083e0:	4619      	mov	r1, r3
 80083e2:	482f      	ldr	r0, [pc, #188]	; (80084a0 <HAL_SPI_MspInit+0x120>)
 80083e4:	f000 fc66 	bl	8008cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80083e8:	2340      	movs	r3, #64	; 0x40
 80083ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f0:	2300      	movs	r3, #0
 80083f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083f4:	f107 0318 	add.w	r3, r7, #24
 80083f8:	4619      	mov	r1, r3
 80083fa:	4829      	ldr	r0, [pc, #164]	; (80084a0 <HAL_SPI_MspInit+0x120>)
 80083fc:	f000 fc5a 	bl	8008cb4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8008400:	2200      	movs	r2, #0
 8008402:	2100      	movs	r1, #0
 8008404:	2023      	movs	r0, #35	; 0x23
 8008406:	f000 fba6 	bl	8008b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800840a:	2023      	movs	r0, #35	; 0x23
 800840c:	f000 fbbf 	bl	8008b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008410:	e03e      	b.n	8008490 <HAL_SPI_MspInit+0x110>
  else if(hspi->Instance==SPI2)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a23      	ldr	r2, [pc, #140]	; (80084a4 <HAL_SPI_MspInit+0x124>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d139      	bne.n	8008490 <HAL_SPI_MspInit+0x110>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800841c:	4b1f      	ldr	r3, [pc, #124]	; (800849c <HAL_SPI_MspInit+0x11c>)
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	4a1e      	ldr	r2, [pc, #120]	; (800849c <HAL_SPI_MspInit+0x11c>)
 8008422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008426:	61d3      	str	r3, [r2, #28]
 8008428:	4b1c      	ldr	r3, [pc, #112]	; (800849c <HAL_SPI_MspInit+0x11c>)
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008434:	4b19      	ldr	r3, [pc, #100]	; (800849c <HAL_SPI_MspInit+0x11c>)
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	4a18      	ldr	r2, [pc, #96]	; (800849c <HAL_SPI_MspInit+0x11c>)
 800843a:	f043 0308 	orr.w	r3, r3, #8
 800843e:	6193      	str	r3, [r2, #24]
 8008440:	4b16      	ldr	r3, [pc, #88]	; (800849c <HAL_SPI_MspInit+0x11c>)
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	60bb      	str	r3, [r7, #8]
 800844a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800844c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8008450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008452:	2302      	movs	r3, #2
 8008454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008456:	2303      	movs	r3, #3
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800845a:	f107 0318 	add.w	r3, r7, #24
 800845e:	4619      	mov	r1, r3
 8008460:	4811      	ldr	r0, [pc, #68]	; (80084a8 <HAL_SPI_MspInit+0x128>)
 8008462:	f000 fc27 	bl	8008cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008466:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800846a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800846c:	2300      	movs	r3, #0
 800846e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008470:	2300      	movs	r3, #0
 8008472:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008474:	f107 0318 	add.w	r3, r7, #24
 8008478:	4619      	mov	r1, r3
 800847a:	480b      	ldr	r0, [pc, #44]	; (80084a8 <HAL_SPI_MspInit+0x128>)
 800847c:	f000 fc1a 	bl	8008cb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008480:	2200      	movs	r2, #0
 8008482:	2100      	movs	r1, #0
 8008484:	2024      	movs	r0, #36	; 0x24
 8008486:	f000 fb66 	bl	8008b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800848a:	2024      	movs	r0, #36	; 0x24
 800848c:	f000 fb7f 	bl	8008b8e <HAL_NVIC_EnableIRQ>
}
 8008490:	bf00      	nop
 8008492:	3728      	adds	r7, #40	; 0x28
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	40013000 	.word	0x40013000
 800849c:	40021000 	.word	0x40021000
 80084a0:	40010800 	.word	0x40010800
 80084a4:	40003800 	.word	0x40003800
 80084a8:	40010c00 	.word	0x40010c00

080084ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08a      	sub	sp, #40	; 0x28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084b4:	f107 0318 	add.w	r3, r7, #24
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	605a      	str	r2, [r3, #4]
 80084be:	609a      	str	r2, [r3, #8]
 80084c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a37      	ldr	r2, [pc, #220]	; (80085a4 <HAL_UART_MspInit+0xf8>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d132      	bne.n	8008532 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80084cc:	4b36      	ldr	r3, [pc, #216]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	4a35      	ldr	r2, [pc, #212]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 80084d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084d6:	6193      	str	r3, [r2, #24]
 80084d8:	4b33      	ldr	r3, [pc, #204]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084e4:	4b30      	ldr	r3, [pc, #192]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	4a2f      	ldr	r2, [pc, #188]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 80084ea:	f043 0304 	orr.w	r3, r3, #4
 80084ee:	6193      	str	r3, [r2, #24]
 80084f0:	4b2d      	ldr	r3, [pc, #180]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	613b      	str	r3, [r7, #16]
 80084fa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80084fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008502:	2302      	movs	r3, #2
 8008504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008506:	2303      	movs	r3, #3
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800850a:	f107 0318 	add.w	r3, r7, #24
 800850e:	4619      	mov	r1, r3
 8008510:	4826      	ldr	r0, [pc, #152]	; (80085ac <HAL_UART_MspInit+0x100>)
 8008512:	f000 fbcf 	bl	8008cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800851a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800851c:	2300      	movs	r3, #0
 800851e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008520:	2300      	movs	r3, #0
 8008522:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008524:	f107 0318 	add.w	r3, r7, #24
 8008528:	4619      	mov	r1, r3
 800852a:	4820      	ldr	r0, [pc, #128]	; (80085ac <HAL_UART_MspInit+0x100>)
 800852c:	f000 fbc2 	bl	8008cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008530:	e034      	b.n	800859c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1e      	ldr	r2, [pc, #120]	; (80085b0 <HAL_UART_MspInit+0x104>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d12f      	bne.n	800859c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800853c:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	4a19      	ldr	r2, [pc, #100]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 8008542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008546:	61d3      	str	r3, [r2, #28]
 8008548:	4b17      	ldr	r3, [pc, #92]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008554:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	4a13      	ldr	r2, [pc, #76]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 800855a:	f043 0304 	orr.w	r3, r3, #4
 800855e:	6193      	str	r3, [r2, #24]
 8008560:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <HAL_UART_MspInit+0xfc>)
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	60bb      	str	r3, [r7, #8]
 800856a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800856c:	2304      	movs	r3, #4
 800856e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008570:	2302      	movs	r3, #2
 8008572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008574:	2303      	movs	r3, #3
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008578:	f107 0318 	add.w	r3, r7, #24
 800857c:	4619      	mov	r1, r3
 800857e:	480b      	ldr	r0, [pc, #44]	; (80085ac <HAL_UART_MspInit+0x100>)
 8008580:	f000 fb98 	bl	8008cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008584:	2308      	movs	r3, #8
 8008586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008588:	2300      	movs	r3, #0
 800858a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800858c:	2300      	movs	r3, #0
 800858e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008590:	f107 0318 	add.w	r3, r7, #24
 8008594:	4619      	mov	r1, r3
 8008596:	4805      	ldr	r0, [pc, #20]	; (80085ac <HAL_UART_MspInit+0x100>)
 8008598:	f000 fb8c 	bl	8008cb4 <HAL_GPIO_Init>
}
 800859c:	bf00      	nop
 800859e:	3728      	adds	r7, #40	; 0x28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	40013800 	.word	0x40013800
 80085a8:	40021000 	.word	0x40021000
 80085ac:	40010800 	.word	0x40010800
 80085b0:	40004400 	.word	0x40004400

080085b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a11      	ldr	r2, [pc, #68]	; (8008608 <HAL_PCD_MspInit+0x54>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d11b      	bne.n	80085fe <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80085c6:	4b11      	ldr	r3, [pc, #68]	; (800860c <HAL_PCD_MspInit+0x58>)
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	4a10      	ldr	r2, [pc, #64]	; (800860c <HAL_PCD_MspInit+0x58>)
 80085cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085d0:	61d3      	str	r3, [r2, #28]
 80085d2:	4b0e      	ldr	r3, [pc, #56]	; (800860c <HAL_PCD_MspInit+0x58>)
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	2013      	movs	r0, #19
 80085e4:	f000 fab7 	bl	8008b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80085e8:	2013      	movs	r0, #19
 80085ea:	f000 fad0 	bl	8008b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80085ee:	2200      	movs	r2, #0
 80085f0:	2100      	movs	r1, #0
 80085f2:	2014      	movs	r0, #20
 80085f4:	f000 faaf 	bl	8008b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80085f8:	2014      	movs	r0, #20
 80085fa:	f000 fac8 	bl	8008b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80085fe:	bf00      	nop
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	40005c00 	.word	0x40005c00
 800860c:	40021000 	.word	0x40021000

08008610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008614:	e7fe      	b.n	8008614 <NMI_Handler+0x4>

08008616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008616:	b480      	push	{r7}
 8008618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800861a:	e7fe      	b.n	800861a <HardFault_Handler+0x4>

0800861c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008620:	e7fe      	b.n	8008620 <MemManage_Handler+0x4>

08008622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008622:	b480      	push	{r7}
 8008624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008626:	e7fe      	b.n	8008626 <BusFault_Handler+0x4>

08008628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800862c:	e7fe      	b.n	800862c <UsageFault_Handler+0x4>

0800862e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800862e:	b480      	push	{r7}
 8008630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008632:	bf00      	nop
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr

0800863a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800863a:	b480      	push	{r7}
 800863c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800863e:	bf00      	nop
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008646:	b480      	push	{r7}
 8008648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800864a:	bf00      	nop
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008656:	f000 f967 	bl	8008928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800865a:	bf00      	nop
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8008664:	4802      	ldr	r0, [pc, #8]	; (8008670 <RTC_IRQHandler+0x10>)
 8008666:	f002 feb6 	bl	800b3d6 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800866a:	bf00      	nop
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	200006b0 	.word	0x200006b0

08008674 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008678:	4802      	ldr	r0, [pc, #8]	; (8008684 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800867a:	f000 fdad 	bl	80091d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800867e:	bf00      	nop
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000778 	.word	0x20000778

08008688 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800868c:	4802      	ldr	r0, [pc, #8]	; (8008698 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800868e:	f000 fda3 	bl	80091d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8008692:	bf00      	nop
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000778 	.word	0x20000778

0800869c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80086a0:	4802      	ldr	r0, [pc, #8]	; (80086ac <SPI1_IRQHandler+0x10>)
 80086a2:	f003 fb6b 	bl	800bd7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80086a6:	bf00      	nop
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200006d8 	.word	0x200006d8

080086b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80086b4:	4802      	ldr	r0, [pc, #8]	; (80086c0 <SPI2_IRQHandler+0x10>)
 80086b6:	f003 fb61 	bl	800bd7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80086ba:	bf00      	nop
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	200004f8 	.word	0x200004f8

080086c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
	return 1;
 80086c8:	2301      	movs	r3, #1
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bc80      	pop	{r7}
 80086d0:	4770      	bx	lr

080086d2 <_kill>:

int _kill(int pid, int sig)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b082      	sub	sp, #8
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80086dc:	f005 fa92 	bl	800dc04 <__errno>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2216      	movs	r2, #22
 80086e4:	601a      	str	r2, [r3, #0]
	return -1;
 80086e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <_exit>:

void _exit (int status)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80086fa:	f04f 31ff 	mov.w	r1, #4294967295
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff ffe7 	bl	80086d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008704:	e7fe      	b.n	8008704 <_exit+0x12>

08008706 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b086      	sub	sp, #24
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	e00a      	b.n	800872e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008718:	f3af 8000 	nop.w
 800871c:	4601      	mov	r1, r0
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	60ba      	str	r2, [r7, #8]
 8008724:	b2ca      	uxtb	r2, r1
 8008726:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	3301      	adds	r3, #1
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	429a      	cmp	r2, r3
 8008734:	dbf0      	blt.n	8008718 <_read+0x12>
	}

return len;
 8008736:	687b      	ldr	r3, [r7, #4]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	e009      	b.n	8008766 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	60ba      	str	r2, [r7, #8]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	3301      	adds	r3, #1
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	429a      	cmp	r2, r3
 800876c:	dbf1      	blt.n	8008752 <_write+0x12>
	}
	return len;
 800876e:	687b      	ldr	r3, [r7, #4]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <_close>:

int _close(int file)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	return -1;
 8008780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	bc80      	pop	{r7}
 800878c:	4770      	bx	lr

0800878e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800879e:	605a      	str	r2, [r3, #4]
	return 0;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <_isatty>:

int _isatty(int file)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
	return 1;
 80087b4:	2301      	movs	r3, #1
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bc80      	pop	{r7}
 80087be:	4770      	bx	lr

080087c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
	return 0;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bc80      	pop	{r7}
 80087d6:	4770      	bx	lr

080087d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80087e0:	4a14      	ldr	r2, [pc, #80]	; (8008834 <_sbrk+0x5c>)
 80087e2:	4b15      	ldr	r3, [pc, #84]	; (8008838 <_sbrk+0x60>)
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80087ec:	4b13      	ldr	r3, [pc, #76]	; (800883c <_sbrk+0x64>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80087f4:	4b11      	ldr	r3, [pc, #68]	; (800883c <_sbrk+0x64>)
 80087f6:	4a12      	ldr	r2, [pc, #72]	; (8008840 <_sbrk+0x68>)
 80087f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80087fa:	4b10      	ldr	r3, [pc, #64]	; (800883c <_sbrk+0x64>)
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	429a      	cmp	r2, r3
 8008806:	d207      	bcs.n	8008818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008808:	f005 f9fc 	bl	800dc04 <__errno>
 800880c:	4603      	mov	r3, r0
 800880e:	220c      	movs	r2, #12
 8008810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008812:	f04f 33ff 	mov.w	r3, #4294967295
 8008816:	e009      	b.n	800882c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008818:	4b08      	ldr	r3, [pc, #32]	; (800883c <_sbrk+0x64>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800881e:	4b07      	ldr	r3, [pc, #28]	; (800883c <_sbrk+0x64>)
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4413      	add	r3, r2
 8008826:	4a05      	ldr	r2, [pc, #20]	; (800883c <_sbrk+0x64>)
 8008828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800882a:	68fb      	ldr	r3, [r7, #12]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	20005000 	.word	0x20005000
 8008838:	00000400 	.word	0x00000400
 800883c:	200001b4 	.word	0x200001b4
 8008840:	20000a68 	.word	0x20000a68

08008844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008848:	bf00      	nop
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr

08008850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008850:	f7ff fff8 	bl	8008844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008854:	480b      	ldr	r0, [pc, #44]	; (8008884 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008856:	490c      	ldr	r1, [pc, #48]	; (8008888 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008858:	4a0c      	ldr	r2, [pc, #48]	; (800888c <LoopFillZerobss+0x16>)
  movs r3, #0
 800885a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800885c:	e002      	b.n	8008864 <LoopCopyDataInit>

0800885e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800885e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008862:	3304      	adds	r3, #4

08008864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008868:	d3f9      	bcc.n	800885e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800886a:	4a09      	ldr	r2, [pc, #36]	; (8008890 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800886c:	4c09      	ldr	r4, [pc, #36]	; (8008894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800886e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008870:	e001      	b.n	8008876 <LoopFillZerobss>

08008872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008874:	3204      	adds	r2, #4

08008876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008878:	d3fb      	bcc.n	8008872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800887a:	f005 f9db 	bl	800dc34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800887e:	f7fe fe35 	bl	80074ec <main>
  bx lr
 8008882:	4770      	bx	lr
  ldr r0, =_sdata
 8008884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008888:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 800888c:	0800f8e4 	.word	0x0800f8e4
  ldr r2, =_sbss
 8008890:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8008894:	20000a64 	.word	0x20000a64

08008898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008898:	e7fe      	b.n	8008898 <ADC1_2_IRQHandler>
	...

0800889c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80088a0:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <HAL_Init+0x28>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a07      	ldr	r2, [pc, #28]	; (80088c4 <HAL_Init+0x28>)
 80088a6:	f043 0310 	orr.w	r3, r3, #16
 80088aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80088ac:	2003      	movs	r0, #3
 80088ae:	f000 f947 	bl	8008b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80088b2:	200f      	movs	r0, #15
 80088b4:	f000 f808 	bl	80088c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80088b8:	f7ff fd04 	bl	80082c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	40022000 	.word	0x40022000

080088c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80088d0:	4b12      	ldr	r3, [pc, #72]	; (800891c <HAL_InitTick+0x54>)
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	4b12      	ldr	r3, [pc, #72]	; (8008920 <HAL_InitTick+0x58>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	4619      	mov	r1, r3
 80088da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088de:	fbb3 f3f1 	udiv	r3, r3, r1
 80088e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f95f 	bl	8008baa <HAL_SYSTICK_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e00e      	b.n	8008914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b0f      	cmp	r3, #15
 80088fa:	d80a      	bhi.n	8008912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088fc:	2200      	movs	r2, #0
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	f000 f927 	bl	8008b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008908:	4a06      	ldr	r2, [pc, #24]	; (8008924 <HAL_InitTick+0x5c>)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	e000      	b.n	8008914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	20000068 	.word	0x20000068
 8008920:	20000070 	.word	0x20000070
 8008924:	2000006c 	.word	0x2000006c

08008928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008928:	b480      	push	{r7}
 800892a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800892c:	4b05      	ldr	r3, [pc, #20]	; (8008944 <HAL_IncTick+0x1c>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	461a      	mov	r2, r3
 8008932:	4b05      	ldr	r3, [pc, #20]	; (8008948 <HAL_IncTick+0x20>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4413      	add	r3, r2
 8008938:	4a03      	ldr	r2, [pc, #12]	; (8008948 <HAL_IncTick+0x20>)
 800893a:	6013      	str	r3, [r2, #0]
}
 800893c:	bf00      	nop
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr
 8008944:	20000070 	.word	0x20000070
 8008948:	20000a50 	.word	0x20000a50

0800894c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800894c:	b480      	push	{r7}
 800894e:	af00      	add	r7, sp, #0
  return uwTick;
 8008950:	4b02      	ldr	r3, [pc, #8]	; (800895c <HAL_GetTick+0x10>)
 8008952:	681b      	ldr	r3, [r3, #0]
}
 8008954:	4618      	mov	r0, r3
 8008956:	46bd      	mov	sp, r7
 8008958:	bc80      	pop	{r7}
 800895a:	4770      	bx	lr
 800895c:	20000a50 	.word	0x20000a50

08008960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008968:	f7ff fff0 	bl	800894c <HAL_GetTick>
 800896c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008978:	d005      	beq.n	8008986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <HAL_Delay+0x44>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008986:	bf00      	nop
 8008988:	f7ff ffe0 	bl	800894c <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	429a      	cmp	r2, r3
 8008996:	d8f7      	bhi.n	8008988 <HAL_Delay+0x28>
  {
  }
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20000070 	.word	0x20000070

080089a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80089b8:	4b0c      	ldr	r3, [pc, #48]	; (80089ec <__NVIC_SetPriorityGrouping+0x44>)
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80089c4:	4013      	ands	r3, r2
 80089c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80089da:	4a04      	ldr	r2, [pc, #16]	; (80089ec <__NVIC_SetPriorityGrouping+0x44>)
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	60d3      	str	r3, [r2, #12]
}
 80089e0:	bf00      	nop
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bc80      	pop	{r7}
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	e000ed00 	.word	0xe000ed00

080089f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089f4:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <__NVIC_GetPriorityGrouping+0x18>)
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	0a1b      	lsrs	r3, r3, #8
 80089fa:	f003 0307 	and.w	r3, r3, #7
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bc80      	pop	{r7}
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	e000ed00 	.word	0xe000ed00

08008a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	db0b      	blt.n	8008a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	f003 021f 	and.w	r2, r3, #31
 8008a24:	4906      	ldr	r1, [pc, #24]	; (8008a40 <__NVIC_EnableIRQ+0x34>)
 8008a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a2a:	095b      	lsrs	r3, r3, #5
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8008a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bc80      	pop	{r7}
 8008a3e:	4770      	bx	lr
 8008a40:	e000e100 	.word	0xe000e100

08008a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	6039      	str	r1, [r7, #0]
 8008a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	db0a      	blt.n	8008a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	490c      	ldr	r1, [pc, #48]	; (8008a90 <__NVIC_SetPriority+0x4c>)
 8008a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a62:	0112      	lsls	r2, r2, #4
 8008a64:	b2d2      	uxtb	r2, r2
 8008a66:	440b      	add	r3, r1
 8008a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a6c:	e00a      	b.n	8008a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	4908      	ldr	r1, [pc, #32]	; (8008a94 <__NVIC_SetPriority+0x50>)
 8008a74:	79fb      	ldrb	r3, [r7, #7]
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	3b04      	subs	r3, #4
 8008a7c:	0112      	lsls	r2, r2, #4
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	440b      	add	r3, r1
 8008a82:	761a      	strb	r2, [r3, #24]
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bc80      	pop	{r7}
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	e000e100 	.word	0xe000e100
 8008a94:	e000ed00 	.word	0xe000ed00

08008a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b089      	sub	sp, #36	; 0x24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	f1c3 0307 	rsb	r3, r3, #7
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	bf28      	it	cs
 8008ab6:	2304      	movcs	r3, #4
 8008ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	3304      	adds	r3, #4
 8008abe:	2b06      	cmp	r3, #6
 8008ac0:	d902      	bls.n	8008ac8 <NVIC_EncodePriority+0x30>
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	3b03      	subs	r3, #3
 8008ac6:	e000      	b.n	8008aca <NVIC_EncodePriority+0x32>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008acc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad6:	43da      	mvns	r2, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	401a      	ands	r2, r3
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aea:	43d9      	mvns	r1, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008af0:	4313      	orrs	r3, r2
         );
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3724      	adds	r7, #36	; 0x24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bc80      	pop	{r7}
 8008afa:	4770      	bx	lr

08008afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b0c:	d301      	bcc.n	8008b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e00f      	b.n	8008b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b12:	4a0a      	ldr	r2, [pc, #40]	; (8008b3c <SysTick_Config+0x40>)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b1a:	210f      	movs	r1, #15
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	f7ff ff90 	bl	8008a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b24:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <SysTick_Config+0x40>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b2a:	4b04      	ldr	r3, [pc, #16]	; (8008b3c <SysTick_Config+0x40>)
 8008b2c:	2207      	movs	r2, #7
 8008b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	e000e010 	.word	0xe000e010

08008b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ff2d 	bl	80089a8 <__NVIC_SetPriorityGrouping>
}
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b086      	sub	sp, #24
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b68:	f7ff ff42 	bl	80089f0 <__NVIC_GetPriorityGrouping>
 8008b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	68b9      	ldr	r1, [r7, #8]
 8008b72:	6978      	ldr	r0, [r7, #20]
 8008b74:	f7ff ff90 	bl	8008a98 <NVIC_EncodePriority>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b7e:	4611      	mov	r1, r2
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff ff5f 	bl	8008a44 <__NVIC_SetPriority>
}
 8008b86:	bf00      	nop
 8008b88:	3718      	adds	r7, #24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	4603      	mov	r3, r0
 8008b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff ff35 	bl	8008a0c <__NVIC_EnableIRQ>
}
 8008ba2:	bf00      	nop
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff ffa2 	bl	8008afc <SysTick_Config>
 8008bb8:	4603      	mov	r3, r0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d005      	beq.n	8008be8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2204      	movs	r2, #4
 8008be0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	73fb      	strb	r3, [r7, #15]
 8008be6:	e051      	b.n	8008c8c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 020e 	bic.w	r2, r2, #14
 8008bf6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 0201 	bic.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a22      	ldr	r2, [pc, #136]	; (8008c98 <HAL_DMA_Abort_IT+0xd4>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d029      	beq.n	8008c66 <HAL_DMA_Abort_IT+0xa2>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a21      	ldr	r2, [pc, #132]	; (8008c9c <HAL_DMA_Abort_IT+0xd8>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d022      	beq.n	8008c62 <HAL_DMA_Abort_IT+0x9e>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a1f      	ldr	r2, [pc, #124]	; (8008ca0 <HAL_DMA_Abort_IT+0xdc>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d01a      	beq.n	8008c5c <HAL_DMA_Abort_IT+0x98>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ca4 <HAL_DMA_Abort_IT+0xe0>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d012      	beq.n	8008c56 <HAL_DMA_Abort_IT+0x92>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1c      	ldr	r2, [pc, #112]	; (8008ca8 <HAL_DMA_Abort_IT+0xe4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d00a      	beq.n	8008c50 <HAL_DMA_Abort_IT+0x8c>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1b      	ldr	r2, [pc, #108]	; (8008cac <HAL_DMA_Abort_IT+0xe8>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d102      	bne.n	8008c4a <HAL_DMA_Abort_IT+0x86>
 8008c44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c48:	e00e      	b.n	8008c68 <HAL_DMA_Abort_IT+0xa4>
 8008c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c4e:	e00b      	b.n	8008c68 <HAL_DMA_Abort_IT+0xa4>
 8008c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c54:	e008      	b.n	8008c68 <HAL_DMA_Abort_IT+0xa4>
 8008c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c5a:	e005      	b.n	8008c68 <HAL_DMA_Abort_IT+0xa4>
 8008c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c60:	e002      	b.n	8008c68 <HAL_DMA_Abort_IT+0xa4>
 8008c62:	2310      	movs	r3, #16
 8008c64:	e000      	b.n	8008c68 <HAL_DMA_Abort_IT+0xa4>
 8008c66:	2301      	movs	r3, #1
 8008c68:	4a11      	ldr	r2, [pc, #68]	; (8008cb0 <HAL_DMA_Abort_IT+0xec>)
 8008c6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	4798      	blx	r3
    } 
  }
  return status;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	40020008 	.word	0x40020008
 8008c9c:	4002001c 	.word	0x4002001c
 8008ca0:	40020030 	.word	0x40020030
 8008ca4:	40020044 	.word	0x40020044
 8008ca8:	40020058 	.word	0x40020058
 8008cac:	4002006c 	.word	0x4002006c
 8008cb0:	40020000 	.word	0x40020000

08008cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b08b      	sub	sp, #44	; 0x2c
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008cc6:	e169      	b.n	8008f9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008cc8:	2201      	movs	r2, #1
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	f040 8158 	bne.w	8008f96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	4a9a      	ldr	r2, [pc, #616]	; (8008f54 <HAL_GPIO_Init+0x2a0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d05e      	beq.n	8008dae <HAL_GPIO_Init+0xfa>
 8008cf0:	4a98      	ldr	r2, [pc, #608]	; (8008f54 <HAL_GPIO_Init+0x2a0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d875      	bhi.n	8008de2 <HAL_GPIO_Init+0x12e>
 8008cf6:	4a98      	ldr	r2, [pc, #608]	; (8008f58 <HAL_GPIO_Init+0x2a4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d058      	beq.n	8008dae <HAL_GPIO_Init+0xfa>
 8008cfc:	4a96      	ldr	r2, [pc, #600]	; (8008f58 <HAL_GPIO_Init+0x2a4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d86f      	bhi.n	8008de2 <HAL_GPIO_Init+0x12e>
 8008d02:	4a96      	ldr	r2, [pc, #600]	; (8008f5c <HAL_GPIO_Init+0x2a8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d052      	beq.n	8008dae <HAL_GPIO_Init+0xfa>
 8008d08:	4a94      	ldr	r2, [pc, #592]	; (8008f5c <HAL_GPIO_Init+0x2a8>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d869      	bhi.n	8008de2 <HAL_GPIO_Init+0x12e>
 8008d0e:	4a94      	ldr	r2, [pc, #592]	; (8008f60 <HAL_GPIO_Init+0x2ac>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d04c      	beq.n	8008dae <HAL_GPIO_Init+0xfa>
 8008d14:	4a92      	ldr	r2, [pc, #584]	; (8008f60 <HAL_GPIO_Init+0x2ac>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d863      	bhi.n	8008de2 <HAL_GPIO_Init+0x12e>
 8008d1a:	4a92      	ldr	r2, [pc, #584]	; (8008f64 <HAL_GPIO_Init+0x2b0>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d046      	beq.n	8008dae <HAL_GPIO_Init+0xfa>
 8008d20:	4a90      	ldr	r2, [pc, #576]	; (8008f64 <HAL_GPIO_Init+0x2b0>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d85d      	bhi.n	8008de2 <HAL_GPIO_Init+0x12e>
 8008d26:	2b12      	cmp	r3, #18
 8008d28:	d82a      	bhi.n	8008d80 <HAL_GPIO_Init+0xcc>
 8008d2a:	2b12      	cmp	r3, #18
 8008d2c:	d859      	bhi.n	8008de2 <HAL_GPIO_Init+0x12e>
 8008d2e:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <HAL_GPIO_Init+0x80>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008daf 	.word	0x08008daf
 8008d38:	08008d89 	.word	0x08008d89
 8008d3c:	08008d9b 	.word	0x08008d9b
 8008d40:	08008ddd 	.word	0x08008ddd
 8008d44:	08008de3 	.word	0x08008de3
 8008d48:	08008de3 	.word	0x08008de3
 8008d4c:	08008de3 	.word	0x08008de3
 8008d50:	08008de3 	.word	0x08008de3
 8008d54:	08008de3 	.word	0x08008de3
 8008d58:	08008de3 	.word	0x08008de3
 8008d5c:	08008de3 	.word	0x08008de3
 8008d60:	08008de3 	.word	0x08008de3
 8008d64:	08008de3 	.word	0x08008de3
 8008d68:	08008de3 	.word	0x08008de3
 8008d6c:	08008de3 	.word	0x08008de3
 8008d70:	08008de3 	.word	0x08008de3
 8008d74:	08008de3 	.word	0x08008de3
 8008d78:	08008d91 	.word	0x08008d91
 8008d7c:	08008da5 	.word	0x08008da5
 8008d80:	4a79      	ldr	r2, [pc, #484]	; (8008f68 <HAL_GPIO_Init+0x2b4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d013      	beq.n	8008dae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008d86:	e02c      	b.n	8008de2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	623b      	str	r3, [r7, #32]
          break;
 8008d8e:	e029      	b.n	8008de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	3304      	adds	r3, #4
 8008d96:	623b      	str	r3, [r7, #32]
          break;
 8008d98:	e024      	b.n	8008de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	623b      	str	r3, [r7, #32]
          break;
 8008da2:	e01f      	b.n	8008de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	330c      	adds	r3, #12
 8008daa:	623b      	str	r3, [r7, #32]
          break;
 8008dac:	e01a      	b.n	8008de4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008db6:	2304      	movs	r3, #4
 8008db8:	623b      	str	r3, [r7, #32]
          break;
 8008dba:	e013      	b.n	8008de4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d105      	bne.n	8008dd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008dc4:	2308      	movs	r3, #8
 8008dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	611a      	str	r2, [r3, #16]
          break;
 8008dce:	e009      	b.n	8008de4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	615a      	str	r2, [r3, #20]
          break;
 8008dda:	e003      	b.n	8008de4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	623b      	str	r3, [r7, #32]
          break;
 8008de0:	e000      	b.n	8008de4 <HAL_GPIO_Init+0x130>
          break;
 8008de2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	2bff      	cmp	r3, #255	; 0xff
 8008de8:	d801      	bhi.n	8008dee <HAL_GPIO_Init+0x13a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	e001      	b.n	8008df2 <HAL_GPIO_Init+0x13e>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3304      	adds	r3, #4
 8008df2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	2bff      	cmp	r3, #255	; 0xff
 8008df8:	d802      	bhi.n	8008e00 <HAL_GPIO_Init+0x14c>
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	e002      	b.n	8008e06 <HAL_GPIO_Init+0x152>
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	3b08      	subs	r3, #8
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	210f      	movs	r1, #15
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	fa01 f303 	lsl.w	r3, r1, r3
 8008e14:	43db      	mvns	r3, r3
 8008e16:	401a      	ands	r2, r3
 8008e18:	6a39      	ldr	r1, [r7, #32]
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e20:	431a      	orrs	r2, r3
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 80b1 	beq.w	8008f96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008e34:	4b4d      	ldr	r3, [pc, #308]	; (8008f6c <HAL_GPIO_Init+0x2b8>)
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	4a4c      	ldr	r2, [pc, #304]	; (8008f6c <HAL_GPIO_Init+0x2b8>)
 8008e3a:	f043 0301 	orr.w	r3, r3, #1
 8008e3e:	6193      	str	r3, [r2, #24]
 8008e40:	4b4a      	ldr	r3, [pc, #296]	; (8008f6c <HAL_GPIO_Init+0x2b8>)
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	60bb      	str	r3, [r7, #8]
 8008e4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008e4c:	4a48      	ldr	r2, [pc, #288]	; (8008f70 <HAL_GPIO_Init+0x2bc>)
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	089b      	lsrs	r3, r3, #2
 8008e52:	3302      	adds	r3, #2
 8008e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	f003 0303 	and.w	r3, r3, #3
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	220f      	movs	r2, #15
 8008e64:	fa02 f303 	lsl.w	r3, r2, r3
 8008e68:	43db      	mvns	r3, r3
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a40      	ldr	r2, [pc, #256]	; (8008f74 <HAL_GPIO_Init+0x2c0>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d013      	beq.n	8008ea0 <HAL_GPIO_Init+0x1ec>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a3f      	ldr	r2, [pc, #252]	; (8008f78 <HAL_GPIO_Init+0x2c4>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00d      	beq.n	8008e9c <HAL_GPIO_Init+0x1e8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a3e      	ldr	r2, [pc, #248]	; (8008f7c <HAL_GPIO_Init+0x2c8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d007      	beq.n	8008e98 <HAL_GPIO_Init+0x1e4>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a3d      	ldr	r2, [pc, #244]	; (8008f80 <HAL_GPIO_Init+0x2cc>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d101      	bne.n	8008e94 <HAL_GPIO_Init+0x1e0>
 8008e90:	2303      	movs	r3, #3
 8008e92:	e006      	b.n	8008ea2 <HAL_GPIO_Init+0x1ee>
 8008e94:	2304      	movs	r3, #4
 8008e96:	e004      	b.n	8008ea2 <HAL_GPIO_Init+0x1ee>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e002      	b.n	8008ea2 <HAL_GPIO_Init+0x1ee>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e000      	b.n	8008ea2 <HAL_GPIO_Init+0x1ee>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea4:	f002 0203 	and.w	r2, r2, #3
 8008ea8:	0092      	lsls	r2, r2, #2
 8008eaa:	4093      	lsls	r3, r2
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008eb2:	492f      	ldr	r1, [pc, #188]	; (8008f70 <HAL_GPIO_Init+0x2bc>)
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	089b      	lsrs	r3, r3, #2
 8008eb8:	3302      	adds	r3, #2
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d006      	beq.n	8008eda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008ecc:	4b2d      	ldr	r3, [pc, #180]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	492c      	ldr	r1, [pc, #176]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	608b      	str	r3, [r1, #8]
 8008ed8:	e006      	b.n	8008ee8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008eda:	4b2a      	ldr	r3, [pc, #168]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	43db      	mvns	r3, r3
 8008ee2:	4928      	ldr	r1, [pc, #160]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d006      	beq.n	8008f02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008ef4:	4b23      	ldr	r3, [pc, #140]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008ef6:	68da      	ldr	r2, [r3, #12]
 8008ef8:	4922      	ldr	r1, [pc, #136]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	60cb      	str	r3, [r1, #12]
 8008f00:	e006      	b.n	8008f10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008f02:	4b20      	ldr	r3, [pc, #128]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	491e      	ldr	r1, [pc, #120]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d006      	beq.n	8008f2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008f1c:	4b19      	ldr	r3, [pc, #100]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	4918      	ldr	r1, [pc, #96]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	604b      	str	r3, [r1, #4]
 8008f28:	e006      	b.n	8008f38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008f2a:	4b16      	ldr	r3, [pc, #88]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	43db      	mvns	r3, r3
 8008f32:	4914      	ldr	r1, [pc, #80]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d021      	beq.n	8008f88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008f44:	4b0f      	ldr	r3, [pc, #60]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	490e      	ldr	r1, [pc, #56]	; (8008f84 <HAL_GPIO_Init+0x2d0>)
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	600b      	str	r3, [r1, #0]
 8008f50:	e021      	b.n	8008f96 <HAL_GPIO_Init+0x2e2>
 8008f52:	bf00      	nop
 8008f54:	10320000 	.word	0x10320000
 8008f58:	10310000 	.word	0x10310000
 8008f5c:	10220000 	.word	0x10220000
 8008f60:	10210000 	.word	0x10210000
 8008f64:	10120000 	.word	0x10120000
 8008f68:	10110000 	.word	0x10110000
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	40010000 	.word	0x40010000
 8008f74:	40010800 	.word	0x40010800
 8008f78:	40010c00 	.word	0x40010c00
 8008f7c:	40011000 	.word	0x40011000
 8008f80:	40011400 	.word	0x40011400
 8008f84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008f88:	4b0b      	ldr	r3, [pc, #44]	; (8008fb8 <HAL_GPIO_Init+0x304>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	43db      	mvns	r3, r3
 8008f90:	4909      	ldr	r1, [pc, #36]	; (8008fb8 <HAL_GPIO_Init+0x304>)
 8008f92:	4013      	ands	r3, r2
 8008f94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	3301      	adds	r3, #1
 8008f9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f47f ae8e 	bne.w	8008cc8 <HAL_GPIO_Init+0x14>
  }
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	372c      	adds	r7, #44	; 0x2c
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr
 8008fb8:	40010400 	.word	0x40010400

08008fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	807b      	strh	r3, [r7, #2]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fcc:	787b      	ldrb	r3, [r7, #1]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fd2:	887a      	ldrh	r2, [r7, #2]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008fd8:	e003      	b.n	8008fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008fda:	887b      	ldrh	r3, [r7, #2]
 8008fdc:	041a      	lsls	r2, r3, #16
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	611a      	str	r2, [r3, #16]
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr

08008fec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e0e8      	b.n	80091d0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff face 	bl	80085b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2203      	movs	r2, #3
 800901c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4618      	mov	r0, r3
 800902c:	f003 fb7d 	bl	800c72a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3304      	adds	r3, #4
 8009038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800903a:	f003 fb69 	bl	800c710 <USB_CoreInit>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d005      	beq.n	8009050 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e0bf      	b.n	80091d0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2100      	movs	r1, #0
 8009056:	4618      	mov	r0, r3
 8009058:	f003 fb81 	bl	800c75e <USB_SetCurrentMode>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d005      	beq.n	800906e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2202      	movs	r2, #2
 8009066:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e0b0      	b.n	80091d0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]
 8009072:	e03e      	b.n	80090f2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009074:	7bfa      	ldrb	r2, [r7, #15]
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	4613      	mov	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	440b      	add	r3, r1
 8009082:	3311      	adds	r3, #17
 8009084:	2201      	movs	r2, #1
 8009086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009088:	7bfa      	ldrb	r2, [r7, #15]
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	4613      	mov	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	440b      	add	r3, r1
 8009096:	3310      	adds	r3, #16
 8009098:	7bfa      	ldrb	r2, [r7, #15]
 800909a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800909c:	7bfa      	ldrb	r2, [r7, #15]
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	440b      	add	r3, r1
 80090aa:	3313      	adds	r3, #19
 80090ac:	2200      	movs	r2, #0
 80090ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80090b0:	7bfa      	ldrb	r2, [r7, #15]
 80090b2:	6879      	ldr	r1, [r7, #4]
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	440b      	add	r3, r1
 80090be:	3320      	adds	r3, #32
 80090c0:	2200      	movs	r2, #0
 80090c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80090c4:	7bfa      	ldrb	r2, [r7, #15]
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	440b      	add	r3, r1
 80090d2:	3324      	adds	r3, #36	; 0x24
 80090d4:	2200      	movs	r2, #0
 80090d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	00db      	lsls	r3, r3, #3
 80090e6:	440b      	add	r3, r1
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	3301      	adds	r3, #1
 80090f0:	73fb      	strb	r3, [r7, #15]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	791b      	ldrb	r3, [r3, #4]
 80090f6:	7bfa      	ldrb	r2, [r7, #15]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d3bb      	bcc.n	8009074 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090fc:	2300      	movs	r3, #0
 80090fe:	73fb      	strb	r3, [r7, #15]
 8009100:	e044      	b.n	800918c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009102:	7bfa      	ldrb	r2, [r7, #15]
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	440b      	add	r3, r1
 8009110:	f203 1351 	addw	r3, r3, #337	; 0x151
 8009114:	2200      	movs	r2, #0
 8009116:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009118:	7bfa      	ldrb	r2, [r7, #15]
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	440b      	add	r3, r1
 8009126:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800912a:	7bfa      	ldrb	r2, [r7, #15]
 800912c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800912e:	7bfa      	ldrb	r2, [r7, #15]
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	4613      	mov	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	440b      	add	r3, r1
 800913c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009144:	7bfa      	ldrb	r2, [r7, #15]
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	440b      	add	r3, r1
 8009152:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800915a:	7bfa      	ldrb	r2, [r7, #15]
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	440b      	add	r3, r1
 8009168:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009170:	7bfa      	ldrb	r2, [r7, #15]
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	440b      	add	r3, r1
 800917e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	3301      	adds	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	791b      	ldrb	r3, [r3, #4]
 8009190:	7bfa      	ldrb	r2, [r7, #15]
 8009192:	429a      	cmp	r2, r3
 8009194:	d3b5      	bcc.n	8009102 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	3304      	adds	r3, #4
 800919e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091a0:	f003 fae9 	bl	800c776 <USB_DevInit>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d005      	beq.n	80091b6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2202      	movs	r2, #2
 80091ae:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e00c      	b.n	80091d0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f004 fc50 	bl	800da6e <USB_DevDisconnect>

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f004 fc4c 	bl	800da82 <USB_ReadInterrupts>
 80091ea:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f987 	bl	800950a <PCD_EP_ISR_Handler>

    return;
 80091fc:	e11b      	b.n	8009436 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009204:	2b00      	cmp	r3, #0
 8009206:	d013      	beq.n	8009230 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009210:	b29a      	uxth	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800921a:	b292      	uxth	r2, r2
 800921c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f933 	bl	800948c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009226:	2100      	movs	r1, #0
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f94a 	bl	80094c2 <HAL_PCD_SetAddress>

    return;
 800922e:	e102      	b.n	8009436 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00c      	beq.n	8009254 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800924c:	b292      	uxth	r2, r2
 800924e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009252:	e0f0      	b.n	8009436 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00c      	beq.n	8009278 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009266:	b29a      	uxth	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009270:	b292      	uxth	r2, r2
 8009272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009276:	e0de      	b.n	8009436 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d027      	beq.n	80092d2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800928a:	b29a      	uxth	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0204 	bic.w	r2, r2, #4
 8009294:	b292      	uxth	r2, r2
 8009296:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f022 0208 	bic.w	r2, r2, #8
 80092ac:	b292      	uxth	r2, r2
 80092ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f8fc 	bl	80094b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092ca:	b292      	uxth	r2, r2
 80092cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80092d0:	e0b1      	b.n	8009436 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8085 	beq.w	80093e8 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80092de:	2300      	movs	r3, #0
 80092e0:	77fb      	strb	r3, [r7, #31]
 80092e2:	e011      	b.n	8009308 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	461a      	mov	r2, r3
 80092ea:	7ffb      	ldrb	r3, [r7, #31]
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	441a      	add	r2, r3
 80092f0:	7ffb      	ldrb	r3, [r7, #31]
 80092f2:	8812      	ldrh	r2, [r2, #0]
 80092f4:	b292      	uxth	r2, r2
 80092f6:	005b      	lsls	r3, r3, #1
 80092f8:	f107 0120 	add.w	r1, r7, #32
 80092fc:	440b      	add	r3, r1
 80092fe:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8009302:	7ffb      	ldrb	r3, [r7, #31]
 8009304:	3301      	adds	r3, #1
 8009306:	77fb      	strb	r3, [r7, #31]
 8009308:	7ffb      	ldrb	r3, [r7, #31]
 800930a:	2b07      	cmp	r3, #7
 800930c:	d9ea      	bls.n	80092e4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f042 0201 	orr.w	r2, r2, #1
 8009320:	b292      	uxth	r2, r2
 8009322:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800932e:	b29a      	uxth	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0201 	bic.w	r2, r2, #1
 8009338:	b292      	uxth	r2, r2
 800933a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800933e:	bf00      	nop
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009348:	b29b      	uxth	r3, r3
 800934a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0f6      	beq.n	8009340 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009364:	b292      	uxth	r2, r2
 8009366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800936a:	2300      	movs	r3, #0
 800936c:	77fb      	strb	r3, [r7, #31]
 800936e:	e010      	b.n	8009392 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8009370:	7ffb      	ldrb	r3, [r7, #31]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6812      	ldr	r2, [r2, #0]
 8009376:	4611      	mov	r1, r2
 8009378:	7ffa      	ldrb	r2, [r7, #31]
 800937a:	0092      	lsls	r2, r2, #2
 800937c:	440a      	add	r2, r1
 800937e:	005b      	lsls	r3, r3, #1
 8009380:	f107 0120 	add.w	r1, r7, #32
 8009384:	440b      	add	r3, r1
 8009386:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800938a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800938c:	7ffb      	ldrb	r3, [r7, #31]
 800938e:	3301      	adds	r3, #1
 8009390:	77fb      	strb	r3, [r7, #31]
 8009392:	7ffb      	ldrb	r3, [r7, #31]
 8009394:	2b07      	cmp	r3, #7
 8009396:	d9eb      	bls.n	8009370 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0208 	orr.w	r2, r2, #8
 80093aa:	b292      	uxth	r2, r2
 80093ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093c2:	b292      	uxth	r2, r2
 80093c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0204 	orr.w	r2, r2, #4
 80093da:	b292      	uxth	r2, r2
 80093dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f85c 	bl	800949e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80093e6:	e026      	b.n	8009436 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00f      	beq.n	8009412 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009404:	b292      	uxth	r2, r2
 8009406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f835 	bl	800947a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009410:	e011      	b.n	8009436 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00c      	beq.n	8009436 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009424:	b29a      	uxth	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800942e:	b292      	uxth	r2, r2
 8009430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009434:	bf00      	nop
  }
}
 8009436:	3720      	adds	r7, #32
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	bc80      	pop	{r7}
 8009450:	4770      	bx	lr

08009452 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	460b      	mov	r3, r1
 800945c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	bc80      	pop	{r7}
 8009466:	4770      	bx	lr

08009468 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	bc80      	pop	{r7}
 8009478:	4770      	bx	lr

0800947a <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr

0800948c <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	bc80      	pop	{r7}
 800949c:	4770      	bx	lr

0800949e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bc80      	pop	{r7}
 80094ae:	4770      	bx	lr

080094b0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr

080094c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d101      	bne.n	80094dc <HAL_PCD_SetAddress+0x1a>
 80094d8:	2302      	movs	r3, #2
 80094da:	e012      	b.n	8009502 <HAL_PCD_SetAddress+0x40>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f004 faa8 	bl	800da48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b096      	sub	sp, #88	; 0x58
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009512:	e3bc      	b.n	8009c8e <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800951c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009520:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009524:	b2db      	uxtb	r3, r3
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800952e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009532:	2b00      	cmp	r3, #0
 8009534:	f040 8176 	bne.w	8009824 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800953c:	f003 0310 	and.w	r3, r3, #16
 8009540:	2b00      	cmp	r3, #0
 8009542:	d14f      	bne.n	80095e4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009554:	81fb      	strh	r3, [r7, #14]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	89fb      	ldrh	r3, [r7, #14]
 800955c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009564:	b29b      	uxth	r3, r3
 8009566:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	3310      	adds	r3, #16
 800956c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009576:	b29b      	uxth	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4413      	add	r3, r2
 8009582:	3302      	adds	r3, #2
 8009584:	005b      	lsls	r3, r3, #1
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	6812      	ldr	r2, [r2, #0]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009598:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800959a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800959c:	695a      	ldr	r2, [r3, #20]
 800959e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	441a      	add	r2, r3
 80095a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80095a8:	2100      	movs	r1, #0
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff ff51 	bl	8009452 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	7b5b      	ldrb	r3, [r3, #13]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 8369 	beq.w	8009c8e <PCD_EP_ISR_Handler+0x784>
 80095bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f040 8364 	bne.w	8009c8e <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	7b5b      	ldrb	r3, [r3, #13]
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	b292      	uxth	r2, r2
 80095d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	735a      	strb	r2, [r3, #13]
 80095e2:	e354      	b.n	8009c8e <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095ea:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	881b      	ldrh	r3, [r3, #0]
 80095f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80095f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80095fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d034      	beq.n	800966c <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800960a:	b29b      	uxth	r3, r3
 800960c:	461a      	mov	r2, r3
 800960e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	4413      	add	r3, r2
 8009616:	3306      	adds	r3, #6
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	6812      	ldr	r2, [r2, #0]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800962a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800962c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8009638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800963a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800963c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800963e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009640:	b29b      	uxth	r3, r3
 8009642:	f004 fa72 	bl	800db2a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	b29a      	uxth	r2, r3
 800964e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009652:	4013      	ands	r3, r2
 8009654:	823b      	strh	r3, [r7, #16]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	8a3a      	ldrh	r2, [r7, #16]
 800965c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009660:	b292      	uxth	r2, r2
 8009662:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff feff 	bl	8009468 <HAL_PCD_SetupStageCallback>
 800966a:	e310      	b.n	8009c8e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800966c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009670:	2b00      	cmp	r3, #0
 8009672:	f280 830c 	bge.w	8009c8e <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	b29a      	uxth	r2, r3
 800967e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009682:	4013      	ands	r3, r2
 8009684:	83fb      	strh	r3, [r7, #30]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	8bfa      	ldrh	r2, [r7, #30]
 800968c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009690:	b292      	uxth	r2, r2
 8009692:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800969c:	b29b      	uxth	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	4413      	add	r3, r2
 80096a8:	3306      	adds	r3, #6
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	6812      	ldr	r2, [r2, #0]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80096bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80096c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d019      	beq.n	80096fc <PCD_EP_ISR_Handler+0x1f2>
 80096c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d015      	beq.n	80096fc <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6818      	ldr	r0, [r3, #0]
 80096d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d6:	6959      	ldr	r1, [r3, #20]
 80096d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80096dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	f004 fa22 	bl	800db2a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80096e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e8:	695a      	ldr	r2, [r3, #20]
 80096ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	441a      	add	r2, r3
 80096f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80096f4:	2100      	movs	r1, #0
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff fea0 	bl	800943c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009706:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800970a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800970e:	2b00      	cmp	r3, #0
 8009710:	f040 82bd 	bne.w	8009c8e <PCD_EP_ISR_Handler+0x784>
 8009714:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009718:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800971c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009720:	f000 82b5 	beq.w	8009c8e <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	61bb      	str	r3, [r7, #24]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009732:	b29b      	uxth	r3, r3
 8009734:	461a      	mov	r2, r3
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	4413      	add	r3, r2
 800973a:	61bb      	str	r3, [r7, #24]
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	b29b      	uxth	r3, r3
 800974a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800974e:	b29a      	uxth	r2, r3
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	801a      	strh	r2, [r3, #0]
 8009754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	2b3e      	cmp	r3, #62	; 0x3e
 800975a:	d91d      	bls.n	8009798 <PCD_EP_ISR_Handler+0x28e>
 800975c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	095b      	lsrs	r3, r3, #5
 8009762:	647b      	str	r3, [r7, #68]	; 0x44
 8009764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	f003 031f 	and.w	r3, r3, #31
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <PCD_EP_ISR_Handler+0x26c>
 8009770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009772:	3b01      	subs	r3, #1
 8009774:	647b      	str	r3, [r7, #68]	; 0x44
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	b29a      	uxth	r2, r3
 800977c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800977e:	b29b      	uxth	r3, r3
 8009780:	029b      	lsls	r3, r3, #10
 8009782:	b29b      	uxth	r3, r3
 8009784:	4313      	orrs	r3, r2
 8009786:	b29b      	uxth	r3, r3
 8009788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800978c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009790:	b29a      	uxth	r2, r3
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	801a      	strh	r2, [r3, #0]
 8009796:	e026      	b.n	80097e6 <PCD_EP_ISR_Handler+0x2dc>
 8009798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10a      	bne.n	80097b6 <PCD_EP_ISR_Handler+0x2ac>
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	801a      	strh	r2, [r3, #0]
 80097b4:	e017      	b.n	80097e6 <PCD_EP_ISR_Handler+0x2dc>
 80097b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	085b      	lsrs	r3, r3, #1
 80097bc:	647b      	str	r3, [r7, #68]	; 0x44
 80097be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <PCD_EP_ISR_Handler+0x2c6>
 80097ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097cc:	3301      	adds	r3, #1
 80097ce:	647b      	str	r3, [r7, #68]	; 0x44
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d8:	b29b      	uxth	r3, r3
 80097da:	029b      	lsls	r3, r3, #10
 80097dc:	b29b      	uxth	r3, r3
 80097de:	4313      	orrs	r3, r2
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f6:	827b      	strh	r3, [r7, #18]
 80097f8:	8a7b      	ldrh	r3, [r7, #18]
 80097fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097fe:	827b      	strh	r3, [r7, #18]
 8009800:	8a7b      	ldrh	r3, [r7, #18]
 8009802:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009806:	827b      	strh	r3, [r7, #18]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	8a7b      	ldrh	r3, [r7, #18]
 800980e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800981a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800981e:	b29b      	uxth	r3, r3
 8009820:	8013      	strh	r3, [r2, #0]
 8009822:	e234      	b.n	8009c8e <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	461a      	mov	r2, r3
 800982a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009838:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800983c:	2b00      	cmp	r3, #0
 800983e:	f280 80fc 	bge.w	8009a3a <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b29a      	uxth	r2, r3
 8009854:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009858:	4013      	ands	r3, r2
 800985a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8009870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009874:	b292      	uxth	r2, r2
 8009876:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009878:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	4413      	add	r3, r2
 800988c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800988e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009890:	7b1b      	ldrb	r3, [r3, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d125      	bne.n	80098e2 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800989e:	b29b      	uxth	r3, r3
 80098a0:	461a      	mov	r2, r3
 80098a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	4413      	add	r3, r2
 80098aa:	3306      	adds	r3, #6
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	6812      	ldr	r2, [r2, #0]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80098c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 8092 	beq.w	80099f0 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d2:	6959      	ldr	r1, [r3, #20]
 80098d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d6:	88da      	ldrh	r2, [r3, #6]
 80098d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80098dc:	f004 f925 	bl	800db2a <USB_ReadPMA>
 80098e0:	e086      	b.n	80099f0 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80098e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e4:	78db      	ldrb	r3, [r3, #3]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d10a      	bne.n	8009900 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80098ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80098ee:	461a      	mov	r2, r3
 80098f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f9d9 	bl	8009caa <HAL_PCD_EP_DB_Receive>
 80098f8:	4603      	mov	r3, r0
 80098fa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80098fe:	e077      	b.n	80099f0 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	b29b      	uxth	r3, r3
 8009912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	441a      	add	r2, r3
 800992c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800993c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009940:	b29b      	uxth	r3, r3
 8009942:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	461a      	mov	r2, r3
 800994a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	b29b      	uxth	r3, r3
 8009956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d024      	beq.n	80099a8 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009966:	b29b      	uxth	r3, r3
 8009968:	461a      	mov	r2, r3
 800996a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	4413      	add	r3, r2
 8009972:	3302      	adds	r3, #2
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	6812      	ldr	r2, [r2, #0]
 800997a:	4413      	add	r3, r2
 800997c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009986:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800998a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800998e:	2b00      	cmp	r3, #0
 8009990:	d02e      	beq.n	80099f0 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009998:	6959      	ldr	r1, [r3, #20]
 800999a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800999c:	891a      	ldrh	r2, [r3, #8]
 800999e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80099a2:	f004 f8c2 	bl	800db2a <USB_ReadPMA>
 80099a6:	e023      	b.n	80099f0 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	461a      	mov	r2, r3
 80099b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	00db      	lsls	r3, r3, #3
 80099ba:	4413      	add	r3, r2
 80099bc:	3306      	adds	r3, #6
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	6812      	ldr	r2, [r2, #0]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80099d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d009      	beq.n	80099f0 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6818      	ldr	r0, [r3, #0]
 80099e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099e2:	6959      	ldr	r1, [r3, #20]
 80099e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099e6:	895a      	ldrh	r2, [r3, #10]
 80099e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80099ec:	f004 f89d 	bl	800db2a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80099f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099f2:	69da      	ldr	r2, [r3, #28]
 80099f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80099f8:	441a      	add	r2, r3
 80099fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80099fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a00:	695a      	ldr	r2, [r3, #20]
 8009a02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a06:	441a      	add	r2, r3
 8009a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a0a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d005      	beq.n	8009a20 <PCD_EP_ISR_Handler+0x516>
 8009a14:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d206      	bcs.n	8009a2e <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7ff fd08 	bl	800943c <HAL_PCD_DataOutStageCallback>
 8009a2c:	e005      	b.n	8009a3a <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a34:	4618      	mov	r0, r3
 8009a36:	f002 febb 	bl	800c7b0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009a3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 8123 	beq.w	8009c8e <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8009a48:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	3310      	adds	r3, #16
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	4413      	add	r3, r2
 8009a5a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	461a      	mov	r2, r3
 8009a62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	441a      	add	r2, r3
 8009a88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a9a:	78db      	ldrb	r3, [r3, #3]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	f040 80a2 	bne.w	8009be6 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8009aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aaa:	7b1b      	ldrb	r3, [r3, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 8093 	beq.w	8009bd8 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009ab2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d046      	beq.n	8009b4c <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac0:	785b      	ldrb	r3, [r3, #1]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d126      	bne.n	8009b14 <PCD_EP_ISR_Handler+0x60a>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	4413      	add	r3, r2
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	011a      	lsls	r2, r3, #4
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009aec:	623b      	str	r3, [r7, #32]
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	801a      	strh	r2, [r3, #0]
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	801a      	strh	r2, [r3, #0]
 8009b12:	e061      	b.n	8009bd8 <PCD_EP_ISR_Handler+0x6ce>
 8009b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b16:	785b      	ldrb	r3, [r3, #1]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d15d      	bne.n	8009bd8 <PCD_EP_ISR_Handler+0x6ce>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b30:	4413      	add	r3, r2
 8009b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	011a      	lsls	r2, r3, #4
 8009b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b46:	2200      	movs	r2, #0
 8009b48:	801a      	strh	r2, [r3, #0]
 8009b4a:	e045      	b.n	8009bd8 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b54:	785b      	ldrb	r3, [r3, #1]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d126      	bne.n	8009ba8 <PCD_EP_ISR_Handler+0x69e>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6e:	4413      	add	r3, r2
 8009b70:	637b      	str	r3, [r7, #52]	; 0x34
 8009b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	011a      	lsls	r2, r3, #4
 8009b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b80:	633b      	str	r3, [r7, #48]	; 0x30
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	801a      	strh	r2, [r3, #0]
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba4:	801a      	strh	r2, [r3, #0]
 8009ba6:	e017      	b.n	8009bd8 <PCD_EP_ISR_Handler+0x6ce>
 8009ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009baa:	785b      	ldrb	r3, [r3, #1]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d113      	bne.n	8009bd8 <PCD_EP_ISR_Handler+0x6ce>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	461a      	mov	r2, r3
 8009bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bbe:	4413      	add	r3, r2
 8009bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	011a      	lsls	r2, r3, #4
 8009bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bca:	4413      	add	r3, r2
 8009bcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fc37 	bl	8009452 <HAL_PCD_DataInStageCallback>
 8009be4:	e053      	b.n	8009c8e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009be6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d146      	bne.n	8009c80 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	4413      	add	r3, r2
 8009c06:	3302      	adds	r3, #2
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	6812      	ldr	r2, [r2, #0]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c20:	699a      	ldr	r2, [r3, #24]
 8009c22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d907      	bls.n	8009c3a <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8009c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c2c:	699a      	ldr	r2, [r3, #24]
 8009c2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c32:	1ad2      	subs	r2, r2, r3
 8009c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c36:	619a      	str	r2, [r3, #24]
 8009c38:	e002      	b.n	8009c40 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8009c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d106      	bne.n	8009c56 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff fbff 	bl	8009452 <HAL_PCD_DataInStageCallback>
 8009c54:	e01b      	b.n	8009c8e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c58:	695a      	ldr	r2, [r3, #20]
 8009c5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c5e:	441a      	add	r2, r3
 8009c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c62:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c66:	69da      	ldr	r2, [r3, #28]
 8009c68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c6c:	441a      	add	r2, r3
 8009c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c70:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f002 fd99 	bl	800c7b0 <USB_EPStartXfer>
 8009c7e:	e006      	b.n	8009c8e <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009c80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c84:	461a      	mov	r2, r3
 8009c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f91b 	bl	8009ec4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	b21b      	sxth	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f6ff ac3a 	blt.w	8009514 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3758      	adds	r7, #88	; 0x58
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b088      	sub	sp, #32
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009cb8:	88fb      	ldrh	r3, [r7, #6]
 8009cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d07e      	beq.n	8009dc0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	461a      	mov	r2, r3
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	00db      	lsls	r3, r3, #3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	6812      	ldr	r2, [r2, #0]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	699a      	ldr	r2, [r3, #24]
 8009cf0:	8b7b      	ldrh	r3, [r7, #26]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d306      	bcc.n	8009d04 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	699a      	ldr	r2, [r3, #24]
 8009cfa:	8b7b      	ldrh	r3, [r7, #26]
 8009cfc:	1ad2      	subs	r2, r2, r3
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	619a      	str	r2, [r3, #24]
 8009d02:	e002      	b.n	8009d0a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2200      	movs	r2, #0
 8009d08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d123      	bne.n	8009d5a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	881b      	ldrh	r3, [r3, #0]
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d2c:	833b      	strh	r3, [r7, #24]
 8009d2e:	8b3b      	ldrh	r3, [r7, #24]
 8009d30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d34:	833b      	strh	r3, [r7, #24]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	441a      	add	r2, r3
 8009d44:	8b3b      	ldrh	r3, [r7, #24]
 8009d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009d5a:	88fb      	ldrh	r3, [r7, #6]
 8009d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d01f      	beq.n	8009da4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d7e:	82fb      	strh	r3, [r7, #22]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	441a      	add	r2, r3
 8009d8e:	8afb      	ldrh	r3, [r7, #22]
 8009d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009da4:	8b7b      	ldrh	r3, [r7, #26]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 8087 	beq.w	8009eba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6818      	ldr	r0, [r3, #0]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	6959      	ldr	r1, [r3, #20]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	891a      	ldrh	r2, [r3, #8]
 8009db8:	8b7b      	ldrh	r3, [r7, #26]
 8009dba:	f003 feb6 	bl	800db2a <USB_ReadPMA>
 8009dbe:	e07c      	b.n	8009eba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	461a      	mov	r2, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	00db      	lsls	r3, r3, #3
 8009dd2:	4413      	add	r3, r2
 8009dd4:	3306      	adds	r3, #6
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	6812      	ldr	r2, [r2, #0]
 8009ddc:	4413      	add	r3, r2
 8009dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009de8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	699a      	ldr	r2, [r3, #24]
 8009dee:	8b7b      	ldrh	r3, [r7, #26]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d306      	bcc.n	8009e02 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	699a      	ldr	r2, [r3, #24]
 8009df8:	8b7b      	ldrh	r3, [r7, #26]
 8009dfa:	1ad2      	subs	r2, r2, r3
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	619a      	str	r2, [r3, #24]
 8009e00:	e002      	b.n	8009e08 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2200      	movs	r2, #0
 8009e06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d123      	bne.n	8009e58 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e2a:	83fb      	strh	r3, [r7, #30]
 8009e2c:	8bfb      	ldrh	r3, [r7, #30]
 8009e2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e32:	83fb      	strh	r3, [r7, #30]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	441a      	add	r2, r3
 8009e42:	8bfb      	ldrh	r3, [r7, #30]
 8009e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009e58:	88fb      	ldrh	r3, [r7, #6]
 8009e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d11f      	bne.n	8009ea2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e7c:	83bb      	strh	r3, [r7, #28]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	441a      	add	r2, r3
 8009e8c:	8bbb      	ldrh	r3, [r7, #28]
 8009e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009ea2:	8b7b      	ldrh	r3, [r7, #26]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d008      	beq.n	8009eba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	6959      	ldr	r1, [r3, #20]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	895a      	ldrh	r2, [r3, #10]
 8009eb4:	8b7b      	ldrh	r3, [r7, #26]
 8009eb6:	f003 fe38 	bl	800db2a <USB_ReadPMA>
    }
  }

  return count;
 8009eba:	8b7b      	ldrh	r3, [r7, #26]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3720      	adds	r7, #32
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b0a4      	sub	sp, #144	; 0x90
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009ed2:	88fb      	ldrh	r3, [r7, #6]
 8009ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 81dd 	beq.w	800a298 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	4413      	add	r3, r2
 8009ef2:	3302      	adds	r3, #2
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	6812      	ldr	r2, [r2, #0]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f06:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	699a      	ldr	r2, [r3, #24]
 8009f0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d907      	bls.n	8009f26 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	699a      	ldr	r2, [r3, #24]
 8009f1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f1e:	1ad2      	subs	r2, r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	619a      	str	r2, [r3, #24]
 8009f24:	e002      	b.n	8009f2c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f040 80b9 	bne.w	800a0a8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	785b      	ldrb	r3, [r3, #1]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d126      	bne.n	8009f8c <HAL_PCD_EP_DB_Transmit+0xc8>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	461a      	mov	r2, r3
 8009f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f52:	4413      	add	r3, r2
 8009f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	011a      	lsls	r2, r3, #4
 8009f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5e:	4413      	add	r3, r2
 8009f60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f74:	801a      	strh	r2, [r3, #0]
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	e01a      	b.n	8009fc2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	785b      	ldrb	r3, [r3, #1]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d116      	bne.n	8009fc2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	637b      	str	r3, [r7, #52]	; 0x34
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa8:	4413      	add	r3, r2
 8009faa:	637b      	str	r3, [r7, #52]	; 0x34
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	011a      	lsls	r2, r3, #4
 8009fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009fba:	633b      	str	r3, [r7, #48]	; 0x30
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	785b      	ldrb	r3, [r3, #1]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d126      	bne.n	800a01e <HAL_PCD_EP_DB_Transmit+0x15a>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	61fb      	str	r3, [r7, #28]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	61fb      	str	r3, [r7, #28]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	011a      	lsls	r2, r3, #4
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ff6:	61bb      	str	r3, [r7, #24]
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a002:	b29a      	uxth	r2, r3
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	801a      	strh	r2, [r3, #0]
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a016:	b29a      	uxth	r2, r3
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	801a      	strh	r2, [r3, #0]
 800a01c:	e017      	b.n	800a04e <HAL_PCD_EP_DB_Transmit+0x18a>
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	785b      	ldrb	r3, [r3, #1]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d113      	bne.n	800a04e <HAL_PCD_EP_DB_Transmit+0x18a>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a02e:	b29b      	uxth	r3, r3
 800a030:	461a      	mov	r2, r3
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	4413      	add	r3, r2
 800a036:	627b      	str	r3, [r7, #36]	; 0x24
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	011a      	lsls	r2, r3, #4
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	4413      	add	r3, r2
 800a042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a046:	623b      	str	r3, [r7, #32]
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	2200      	movs	r2, #0
 800a04c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	4619      	mov	r1, r3
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7ff f9fc 	bl	8009452 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 82fc 	beq.w	800a65e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	b29b      	uxth	r3, r3
 800a078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a07c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a080:	82fb      	strh	r3, [r7, #22]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	441a      	add	r2, r3
 800a090:	8afb      	ldrh	r3, [r7, #22]
 800a092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a09a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	8013      	strh	r3, [r2, #0]
 800a0a6:	e2da      	b.n	800a65e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a0a8:	88fb      	ldrh	r3, [r7, #6]
 800a0aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d021      	beq.n	800a0f6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	441a      	add	r2, r3
 800a0de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a0e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	f040 82ae 	bne.w	800a65e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	695a      	ldr	r2, [r3, #20]
 800a106:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a10a:	441a      	add	r2, r3
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	69da      	ldr	r2, [r3, #28]
 800a114:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a118:	441a      	add	r2, r3
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	6a1a      	ldr	r2, [r3, #32]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	429a      	cmp	r2, r3
 800a128:	d30b      	bcc.n	800a142 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	6a1a      	ldr	r2, [r3, #32]
 800a136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a13a:	1ad2      	subs	r2, r2, r3
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	621a      	str	r2, [r3, #32]
 800a140:	e017      	b.n	800a172 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d108      	bne.n	800a15c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800a14a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a14e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a15a:	e00a      	b.n	800a172 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2200      	movs	r2, #0
 800a170:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	785b      	ldrb	r3, [r3, #1]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d165      	bne.n	800a246 <HAL_PCD_EP_DB_Transmit+0x382>
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a188:	b29b      	uxth	r3, r3
 800a18a:	461a      	mov	r2, r3
 800a18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18e:	4413      	add	r3, r2
 800a190:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	011a      	lsls	r2, r3, #4
 800a198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19a:	4413      	add	r3, r2
 800a19c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a1a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b0:	801a      	strh	r2, [r3, #0]
 800a1b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1b6:	2b3e      	cmp	r3, #62	; 0x3e
 800a1b8:	d91d      	bls.n	800a1f6 <HAL_PCD_EP_DB_Transmit+0x332>
 800a1ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1c6:	f003 031f 	and.w	r3, r3, #31
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d102      	bne.n	800a1d4 <HAL_PCD_EP_DB_Transmit+0x310>
 800a1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	029b      	lsls	r3, r3, #10
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	801a      	strh	r2, [r3, #0]
 800a1f4:	e044      	b.n	800a280 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a1f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10a      	bne.n	800a214 <HAL_PCD_EP_DB_Transmit+0x350>
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	b29b      	uxth	r3, r3
 800a204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	801a      	strh	r2, [r3, #0]
 800a212:	e035      	b.n	800a280 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a218:	085b      	lsrs	r3, r3, #1
 800a21a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a21c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <HAL_PCD_EP_DB_Transmit+0x36a>
 800a228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a22a:	3301      	adds	r3, #1
 800a22c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	b29a      	uxth	r2, r3
 800a234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a236:	b29b      	uxth	r3, r3
 800a238:	029b      	lsls	r3, r3, #10
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	4313      	orrs	r3, r2
 800a23e:	b29a      	uxth	r2, r3
 800a240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a242:	801a      	strh	r2, [r3, #0]
 800a244:	e01c      	b.n	800a280 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	785b      	ldrb	r3, [r3, #1]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d118      	bne.n	800a280 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	647b      	str	r3, [r7, #68]	; 0x44
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	461a      	mov	r2, r3
 800a260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a262:	4413      	add	r3, r2
 800a264:	647b      	str	r3, [r7, #68]	; 0x44
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	011a      	lsls	r2, r3, #4
 800a26c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a26e:	4413      	add	r3, r2
 800a270:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a274:	643b      	str	r3, [r7, #64]	; 0x40
 800a276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a27e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6818      	ldr	r0, [r3, #0]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	6959      	ldr	r1, [r3, #20]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	891a      	ldrh	r2, [r3, #8]
 800a28c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a290:	b29b      	uxth	r3, r3
 800a292:	f003 fc05 	bl	800daa0 <USB_WritePMA>
 800a296:	e1e2      	b.n	800a65e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	00db      	lsls	r3, r3, #3
 800a2aa:	4413      	add	r3, r2
 800a2ac:	3306      	adds	r3, #6
 800a2ae:	005b      	lsls	r3, r3, #1
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	6812      	ldr	r2, [r2, #0]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2c0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	699a      	ldr	r2, [r3, #24]
 800a2c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d307      	bcc.n	800a2e0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	699a      	ldr	r2, [r3, #24]
 800a2d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a2d8:	1ad2      	subs	r2, r2, r3
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	619a      	str	r2, [r3, #24]
 800a2de:	e002      	b.n	800a2e6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f040 80c0 	bne.w	800a470 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	785b      	ldrb	r3, [r3, #1]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d126      	bne.n	800a346 <HAL_PCD_EP_DB_Transmit+0x482>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a306:	b29b      	uxth	r3, r3
 800a308:	461a      	mov	r2, r3
 800a30a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a30c:	4413      	add	r3, r2
 800a30e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	011a      	lsls	r2, r3, #4
 800a316:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a318:	4413      	add	r3, r2
 800a31a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a31e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	b29b      	uxth	r3, r3
 800a326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a32e:	801a      	strh	r2, [r3, #0]
 800a330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	b29b      	uxth	r3, r3
 800a336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a33a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a33e:	b29a      	uxth	r2, r3
 800a340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a342:	801a      	strh	r2, [r3, #0]
 800a344:	e01a      	b.n	800a37c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	785b      	ldrb	r3, [r3, #1]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d116      	bne.n	800a37c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	667b      	str	r3, [r7, #100]	; 0x64
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	461a      	mov	r2, r3
 800a360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a362:	4413      	add	r3, r2
 800a364:	667b      	str	r3, [r7, #100]	; 0x64
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	011a      	lsls	r2, r3, #4
 800a36c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a36e:	4413      	add	r3, r2
 800a370:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a374:	663b      	str	r3, [r7, #96]	; 0x60
 800a376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a378:	2200      	movs	r2, #0
 800a37a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	677b      	str	r3, [r7, #116]	; 0x74
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	785b      	ldrb	r3, [r3, #1]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d12b      	bne.n	800a3e2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a398:	b29b      	uxth	r3, r3
 800a39a:	461a      	mov	r2, r3
 800a39c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a39e:	4413      	add	r3, r2
 800a3a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	011a      	lsls	r2, r3, #4
 800a3a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3b8:	881b      	ldrh	r3, [r3, #0]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3c6:	801a      	strh	r2, [r3, #0]
 800a3c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3de:	801a      	strh	r2, [r3, #0]
 800a3e0:	e017      	b.n	800a412 <HAL_PCD_EP_DB_Transmit+0x54e>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	785b      	ldrb	r3, [r3, #1]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d113      	bne.n	800a412 <HAL_PCD_EP_DB_Transmit+0x54e>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3f8:	4413      	add	r3, r2
 800a3fa:	677b      	str	r3, [r7, #116]	; 0x74
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	011a      	lsls	r2, r3, #4
 800a402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a404:	4413      	add	r3, r2
 800a406:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a40a:	673b      	str	r3, [r7, #112]	; 0x70
 800a40c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a40e:	2200      	movs	r2, #0
 800a410:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	4619      	mov	r1, r3
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7ff f81a 	bl	8009452 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a41e:	88fb      	ldrh	r3, [r7, #6]
 800a420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a424:	2b00      	cmp	r3, #0
 800a426:	f040 811a 	bne.w	800a65e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4413      	add	r3, r2
 800a438:	881b      	ldrh	r3, [r3, #0]
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a444:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	461a      	mov	r2, r3
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	441a      	add	r2, r3
 800a456:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800a45a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a45e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	8013      	strh	r3, [r2, #0]
 800a46e:	e0f6      	b.n	800a65e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a470:	88fb      	ldrh	r3, [r7, #6]
 800a472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d121      	bne.n	800a4be <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4413      	add	r3, r2
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a494:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	461a      	mov	r2, r3
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	441a      	add	r2, r3
 800a4a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	f040 80ca 	bne.w	800a65e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	695a      	ldr	r2, [r3, #20]
 800a4ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a4d2:	441a      	add	r2, r3
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	69da      	ldr	r2, [r3, #28]
 800a4dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a4e0:	441a      	add	r2, r3
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	6a1a      	ldr	r2, [r3, #32]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d30b      	bcc.n	800a50a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	6a1a      	ldr	r2, [r3, #32]
 800a4fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a502:	1ad2      	subs	r2, r2, r3
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	621a      	str	r2, [r3, #32]
 800a508:	e017      	b.n	800a53a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d108      	bne.n	800a524 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800a512:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a522:	e00a      	b.n	800a53a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2200      	movs	r2, #0
 800a530:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	657b      	str	r3, [r7, #84]	; 0x54
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	785b      	ldrb	r3, [r3, #1]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d165      	bne.n	800a614 <HAL_PCD_EP_DB_Transmit+0x750>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a556:	b29b      	uxth	r3, r3
 800a558:	461a      	mov	r2, r3
 800a55a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a55c:	4413      	add	r3, r2
 800a55e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	011a      	lsls	r2, r3, #4
 800a566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a568:	4413      	add	r3, r2
 800a56a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a56e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	b29b      	uxth	r3, r3
 800a576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a57e:	801a      	strh	r2, [r3, #0]
 800a580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a584:	2b3e      	cmp	r3, #62	; 0x3e
 800a586:	d91d      	bls.n	800a5c4 <HAL_PCD_EP_DB_Transmit+0x700>
 800a588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a58c:	095b      	lsrs	r3, r3, #5
 800a58e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a594:	f003 031f 	and.w	r3, r3, #31
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d102      	bne.n	800a5a2 <HAL_PCD_EP_DB_Transmit+0x6de>
 800a59c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	029b      	lsls	r3, r3, #10
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5c0:	801a      	strh	r2, [r3, #0]
 800a5c2:	e041      	b.n	800a648 <HAL_PCD_EP_DB_Transmit+0x784>
 800a5c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10a      	bne.n	800a5e2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800a5cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5de:	801a      	strh	r2, [r3, #0]
 800a5e0:	e032      	b.n	800a648 <HAL_PCD_EP_DB_Transmit+0x784>
 800a5e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5e6:	085b      	lsrs	r3, r3, #1
 800a5e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <HAL_PCD_EP_DB_Transmit+0x738>
 800a5f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	b29a      	uxth	r2, r3
 800a602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a604:	b29b      	uxth	r3, r3
 800a606:	029b      	lsls	r3, r3, #10
 800a608:	b29b      	uxth	r3, r3
 800a60a:	4313      	orrs	r3, r2
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a610:	801a      	strh	r2, [r3, #0]
 800a612:	e019      	b.n	800a648 <HAL_PCD_EP_DB_Transmit+0x784>
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	785b      	ldrb	r3, [r3, #1]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d115      	bne.n	800a648 <HAL_PCD_EP_DB_Transmit+0x784>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a624:	b29b      	uxth	r3, r3
 800a626:	461a      	mov	r2, r3
 800a628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a62a:	4413      	add	r3, r2
 800a62c:	657b      	str	r3, [r7, #84]	; 0x54
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	011a      	lsls	r2, r3, #4
 800a634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a636:	4413      	add	r3, r2
 800a638:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a63c:	653b      	str	r3, [r7, #80]	; 0x50
 800a63e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a642:	b29a      	uxth	r2, r3
 800a644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a646:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6818      	ldr	r0, [r3, #0]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	6959      	ldr	r1, [r3, #20]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	895a      	ldrh	r2, [r3, #10]
 800a654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a658:	b29b      	uxth	r3, r3
 800a65a:	f003 fa21 	bl	800daa0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a678:	82bb      	strh	r3, [r7, #20]
 800a67a:	8abb      	ldrh	r3, [r7, #20]
 800a67c:	f083 0310 	eor.w	r3, r3, #16
 800a680:	82bb      	strh	r3, [r7, #20]
 800a682:	8abb      	ldrh	r3, [r7, #20]
 800a684:	f083 0320 	eor.w	r3, r3, #32
 800a688:	82bb      	strh	r3, [r7, #20]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	441a      	add	r2, r3
 800a698:	8abb      	ldrh	r3, [r7, #20]
 800a69a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a69e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3790      	adds	r7, #144	; 0x90
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800a6bc:	4b03      	ldr	r3, [pc, #12]	; (800a6cc <HAL_PWR_EnableBkUpAccess+0x14>)
 800a6be:	2201      	movs	r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]
}
 800a6c2:	bf00      	nop
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bc80      	pop	{r7}
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	420e0020 	.word	0x420e0020

0800a6d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e26c      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 8087 	beq.w	800a7fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a6f0:	4b92      	ldr	r3, [pc, #584]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	f003 030c 	and.w	r3, r3, #12
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d00c      	beq.n	800a716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a6fc:	4b8f      	ldr	r3, [pc, #572]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	f003 030c 	and.w	r3, r3, #12
 800a704:	2b08      	cmp	r3, #8
 800a706:	d112      	bne.n	800a72e <HAL_RCC_OscConfig+0x5e>
 800a708:	4b8c      	ldr	r3, [pc, #560]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a714:	d10b      	bne.n	800a72e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a716:	4b89      	ldr	r3, [pc, #548]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d06c      	beq.n	800a7fc <HAL_RCC_OscConfig+0x12c>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d168      	bne.n	800a7fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e246      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a736:	d106      	bne.n	800a746 <HAL_RCC_OscConfig+0x76>
 800a738:	4b80      	ldr	r3, [pc, #512]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a7f      	ldr	r2, [pc, #508]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a73e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	e02e      	b.n	800a7a4 <HAL_RCC_OscConfig+0xd4>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10c      	bne.n	800a768 <HAL_RCC_OscConfig+0x98>
 800a74e:	4b7b      	ldr	r3, [pc, #492]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a7a      	ldr	r2, [pc, #488]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	4b78      	ldr	r3, [pc, #480]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a77      	ldr	r2, [pc, #476]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	e01d      	b.n	800a7a4 <HAL_RCC_OscConfig+0xd4>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a770:	d10c      	bne.n	800a78c <HAL_RCC_OscConfig+0xbc>
 800a772:	4b72      	ldr	r3, [pc, #456]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a71      	ldr	r2, [pc, #452]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	4b6f      	ldr	r3, [pc, #444]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a6e      	ldr	r2, [pc, #440]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	e00b      	b.n	800a7a4 <HAL_RCC_OscConfig+0xd4>
 800a78c:	4b6b      	ldr	r3, [pc, #428]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a6a      	ldr	r2, [pc, #424]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	4b68      	ldr	r3, [pc, #416]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a67      	ldr	r2, [pc, #412]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a79e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d013      	beq.n	800a7d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7ac:	f7fe f8ce 	bl	800894c <HAL_GetTick>
 800a7b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7b4:	f7fe f8ca 	bl	800894c <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b64      	cmp	r3, #100	; 0x64
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e1fa      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7c6:	4b5d      	ldr	r3, [pc, #372]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0f0      	beq.n	800a7b4 <HAL_RCC_OscConfig+0xe4>
 800a7d2:	e014      	b.n	800a7fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7d4:	f7fe f8ba 	bl	800894c <HAL_GetTick>
 800a7d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7da:	e008      	b.n	800a7ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7dc:	f7fe f8b6 	bl	800894c <HAL_GetTick>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	2b64      	cmp	r3, #100	; 0x64
 800a7e8:	d901      	bls.n	800a7ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e1e6      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7ee:	4b53      	ldr	r3, [pc, #332]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1f0      	bne.n	800a7dc <HAL_RCC_OscConfig+0x10c>
 800a7fa:	e000      	b.n	800a7fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 0302 	and.w	r3, r3, #2
 800a806:	2b00      	cmp	r3, #0
 800a808:	d063      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a80a:	4b4c      	ldr	r3, [pc, #304]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	f003 030c 	and.w	r3, r3, #12
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00b      	beq.n	800a82e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a816:	4b49      	ldr	r3, [pc, #292]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f003 030c 	and.w	r3, r3, #12
 800a81e:	2b08      	cmp	r3, #8
 800a820:	d11c      	bne.n	800a85c <HAL_RCC_OscConfig+0x18c>
 800a822:	4b46      	ldr	r3, [pc, #280]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d116      	bne.n	800a85c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a82e:	4b43      	ldr	r3, [pc, #268]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <HAL_RCC_OscConfig+0x176>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d001      	beq.n	800a846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e1ba      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a846:	4b3d      	ldr	r3, [pc, #244]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	4939      	ldr	r1, [pc, #228]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a856:	4313      	orrs	r3, r2
 800a858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a85a:	e03a      	b.n	800a8d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d020      	beq.n	800a8a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a864:	4b36      	ldr	r3, [pc, #216]	; (800a940 <HAL_RCC_OscConfig+0x270>)
 800a866:	2201      	movs	r2, #1
 800a868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a86a:	f7fe f86f 	bl	800894c <HAL_GetTick>
 800a86e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a870:	e008      	b.n	800a884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a872:	f7fe f86b 	bl	800894c <HAL_GetTick>
 800a876:	4602      	mov	r2, r0
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d901      	bls.n	800a884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a880:	2303      	movs	r3, #3
 800a882:	e19b      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a884:	4b2d      	ldr	r3, [pc, #180]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0302 	and.w	r3, r3, #2
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0f0      	beq.n	800a872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a890:	4b2a      	ldr	r3, [pc, #168]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	00db      	lsls	r3, r3, #3
 800a89e:	4927      	ldr	r1, [pc, #156]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	600b      	str	r3, [r1, #0]
 800a8a4:	e015      	b.n	800a8d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8a6:	4b26      	ldr	r3, [pc, #152]	; (800a940 <HAL_RCC_OscConfig+0x270>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8ac:	f7fe f84e 	bl	800894c <HAL_GetTick>
 800a8b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8b2:	e008      	b.n	800a8c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8b4:	f7fe f84a 	bl	800894c <HAL_GetTick>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d901      	bls.n	800a8c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	e17a      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8c6:	4b1d      	ldr	r3, [pc, #116]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0302 	and.w	r3, r3, #2
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1f0      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0308 	and.w	r3, r3, #8
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d03a      	beq.n	800a954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d019      	beq.n	800a91a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8e6:	4b17      	ldr	r3, [pc, #92]	; (800a944 <HAL_RCC_OscConfig+0x274>)
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8ec:	f7fe f82e 	bl	800894c <HAL_GetTick>
 800a8f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8f2:	e008      	b.n	800a906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8f4:	f7fe f82a 	bl	800894c <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d901      	bls.n	800a906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e15a      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a906:	4b0d      	ldr	r3, [pc, #52]	; (800a93c <HAL_RCC_OscConfig+0x26c>)
 800a908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90a:	f003 0302 	and.w	r3, r3, #2
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0f0      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a912:	2001      	movs	r0, #1
 800a914:	f000 facc 	bl	800aeb0 <RCC_Delay>
 800a918:	e01c      	b.n	800a954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a91a:	4b0a      	ldr	r3, [pc, #40]	; (800a944 <HAL_RCC_OscConfig+0x274>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a920:	f7fe f814 	bl	800894c <HAL_GetTick>
 800a924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a926:	e00f      	b.n	800a948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a928:	f7fe f810 	bl	800894c <HAL_GetTick>
 800a92c:	4602      	mov	r2, r0
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	2b02      	cmp	r3, #2
 800a934:	d908      	bls.n	800a948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	e140      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
 800a93a:	bf00      	nop
 800a93c:	40021000 	.word	0x40021000
 800a940:	42420000 	.word	0x42420000
 800a944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a948:	4b9e      	ldr	r3, [pc, #632]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1e9      	bne.n	800a928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 80a6 	beq.w	800aaae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a962:	2300      	movs	r3, #0
 800a964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a966:	4b97      	ldr	r3, [pc, #604]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10d      	bne.n	800a98e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a972:	4b94      	ldr	r3, [pc, #592]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	4a93      	ldr	r2, [pc, #588]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a97c:	61d3      	str	r3, [r2, #28]
 800a97e:	4b91      	ldr	r3, [pc, #580]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a986:	60bb      	str	r3, [r7, #8]
 800a988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a98a:	2301      	movs	r3, #1
 800a98c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a98e:	4b8e      	ldr	r3, [pc, #568]	; (800abc8 <HAL_RCC_OscConfig+0x4f8>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a996:	2b00      	cmp	r3, #0
 800a998:	d118      	bne.n	800a9cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a99a:	4b8b      	ldr	r3, [pc, #556]	; (800abc8 <HAL_RCC_OscConfig+0x4f8>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a8a      	ldr	r2, [pc, #552]	; (800abc8 <HAL_RCC_OscConfig+0x4f8>)
 800a9a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9a6:	f7fd ffd1 	bl	800894c <HAL_GetTick>
 800a9aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ac:	e008      	b.n	800a9c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9ae:	f7fd ffcd 	bl	800894c <HAL_GetTick>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	2b64      	cmp	r3, #100	; 0x64
 800a9ba:	d901      	bls.n	800a9c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	e0fd      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9c0:	4b81      	ldr	r3, [pc, #516]	; (800abc8 <HAL_RCC_OscConfig+0x4f8>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d0f0      	beq.n	800a9ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d106      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x312>
 800a9d4:	4b7b      	ldr	r3, [pc, #492]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	4a7a      	ldr	r2, [pc, #488]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a9da:	f043 0301 	orr.w	r3, r3, #1
 800a9de:	6213      	str	r3, [r2, #32]
 800a9e0:	e02d      	b.n	800aa3e <HAL_RCC_OscConfig+0x36e>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10c      	bne.n	800aa04 <HAL_RCC_OscConfig+0x334>
 800a9ea:	4b76      	ldr	r3, [pc, #472]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	4a75      	ldr	r2, [pc, #468]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a9f0:	f023 0301 	bic.w	r3, r3, #1
 800a9f4:	6213      	str	r3, [r2, #32]
 800a9f6:	4b73      	ldr	r3, [pc, #460]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	4a72      	ldr	r2, [pc, #456]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800a9fc:	f023 0304 	bic.w	r3, r3, #4
 800aa00:	6213      	str	r3, [r2, #32]
 800aa02:	e01c      	b.n	800aa3e <HAL_RCC_OscConfig+0x36e>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	2b05      	cmp	r3, #5
 800aa0a:	d10c      	bne.n	800aa26 <HAL_RCC_OscConfig+0x356>
 800aa0c:	4b6d      	ldr	r3, [pc, #436]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	4a6c      	ldr	r2, [pc, #432]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aa12:	f043 0304 	orr.w	r3, r3, #4
 800aa16:	6213      	str	r3, [r2, #32]
 800aa18:	4b6a      	ldr	r3, [pc, #424]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	4a69      	ldr	r2, [pc, #420]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aa1e:	f043 0301 	orr.w	r3, r3, #1
 800aa22:	6213      	str	r3, [r2, #32]
 800aa24:	e00b      	b.n	800aa3e <HAL_RCC_OscConfig+0x36e>
 800aa26:	4b67      	ldr	r3, [pc, #412]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	4a66      	ldr	r2, [pc, #408]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aa2c:	f023 0301 	bic.w	r3, r3, #1
 800aa30:	6213      	str	r3, [r2, #32]
 800aa32:	4b64      	ldr	r3, [pc, #400]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	4a63      	ldr	r2, [pc, #396]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aa38:	f023 0304 	bic.w	r3, r3, #4
 800aa3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d015      	beq.n	800aa72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa46:	f7fd ff81 	bl	800894c <HAL_GetTick>
 800aa4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa4c:	e00a      	b.n	800aa64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa4e:	f7fd ff7d 	bl	800894c <HAL_GetTick>
 800aa52:	4602      	mov	r2, r0
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d901      	bls.n	800aa64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e0ab      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa64:	4b57      	ldr	r3, [pc, #348]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aa66:	6a1b      	ldr	r3, [r3, #32]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d0ee      	beq.n	800aa4e <HAL_RCC_OscConfig+0x37e>
 800aa70:	e014      	b.n	800aa9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa72:	f7fd ff6b 	bl	800894c <HAL_GetTick>
 800aa76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa78:	e00a      	b.n	800aa90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa7a:	f7fd ff67 	bl	800894c <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d901      	bls.n	800aa90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e095      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa90:	4b4c      	ldr	r3, [pc, #304]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	f003 0302 	and.w	r3, r3, #2
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1ee      	bne.n	800aa7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d105      	bne.n	800aaae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aaa2:	4b48      	ldr	r3, [pc, #288]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	4a47      	ldr	r2, [pc, #284]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aaa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aaac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 8081 	beq.w	800abba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aab8:	4b42      	ldr	r3, [pc, #264]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	f003 030c 	and.w	r3, r3, #12
 800aac0:	2b08      	cmp	r3, #8
 800aac2:	d061      	beq.n	800ab88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	69db      	ldr	r3, [r3, #28]
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d146      	bne.n	800ab5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aacc:	4b3f      	ldr	r3, [pc, #252]	; (800abcc <HAL_RCC_OscConfig+0x4fc>)
 800aace:	2200      	movs	r2, #0
 800aad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aad2:	f7fd ff3b 	bl	800894c <HAL_GetTick>
 800aad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aad8:	e008      	b.n	800aaec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aada:	f7fd ff37 	bl	800894c <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d901      	bls.n	800aaec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e067      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aaec:	4b35      	ldr	r3, [pc, #212]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1f0      	bne.n	800aada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a1b      	ldr	r3, [r3, #32]
 800aafc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab00:	d108      	bne.n	800ab14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ab02:	4b30      	ldr	r3, [pc, #192]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	492d      	ldr	r1, [pc, #180]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab14:	4b2b      	ldr	r3, [pc, #172]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a19      	ldr	r1, [r3, #32]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	430b      	orrs	r3, r1
 800ab26:	4927      	ldr	r1, [pc, #156]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab2c:	4b27      	ldr	r3, [pc, #156]	; (800abcc <HAL_RCC_OscConfig+0x4fc>)
 800ab2e:	2201      	movs	r2, #1
 800ab30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab32:	f7fd ff0b 	bl	800894c <HAL_GetTick>
 800ab36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab38:	e008      	b.n	800ab4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab3a:	f7fd ff07 	bl	800894c <HAL_GetTick>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d901      	bls.n	800ab4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e037      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab4c:	4b1d      	ldr	r3, [pc, #116]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d0f0      	beq.n	800ab3a <HAL_RCC_OscConfig+0x46a>
 800ab58:	e02f      	b.n	800abba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab5a:	4b1c      	ldr	r3, [pc, #112]	; (800abcc <HAL_RCC_OscConfig+0x4fc>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab60:	f7fd fef4 	bl	800894c <HAL_GetTick>
 800ab64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab66:	e008      	b.n	800ab7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab68:	f7fd fef0 	bl	800894c <HAL_GetTick>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	d901      	bls.n	800ab7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e020      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab7a:	4b12      	ldr	r3, [pc, #72]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1f0      	bne.n	800ab68 <HAL_RCC_OscConfig+0x498>
 800ab86:	e018      	b.n	800abba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d101      	bne.n	800ab94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e013      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ab94:	4b0b      	ldr	r3, [pc, #44]	; (800abc4 <HAL_RCC_OscConfig+0x4f4>)
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d106      	bne.n	800abb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d001      	beq.n	800abba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	40021000 	.word	0x40021000
 800abc8:	40007000 	.word	0x40007000
 800abcc:	42420060 	.word	0x42420060

0800abd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e0d0      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800abe4:	4b6a      	ldr	r3, [pc, #424]	; (800ad90 <HAL_RCC_ClockConfig+0x1c0>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0307 	and.w	r3, r3, #7
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d910      	bls.n	800ac14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abf2:	4b67      	ldr	r3, [pc, #412]	; (800ad90 <HAL_RCC_ClockConfig+0x1c0>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f023 0207 	bic.w	r2, r3, #7
 800abfa:	4965      	ldr	r1, [pc, #404]	; (800ad90 <HAL_RCC_ClockConfig+0x1c0>)
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac02:	4b63      	ldr	r3, [pc, #396]	; (800ad90 <HAL_RCC_ClockConfig+0x1c0>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d001      	beq.n	800ac14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e0b8      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0302 	and.w	r3, r3, #2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d020      	beq.n	800ac62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0304 	and.w	r3, r3, #4
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d005      	beq.n	800ac38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac2c:	4b59      	ldr	r3, [pc, #356]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	4a58      	ldr	r2, [pc, #352]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ac32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ac36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f003 0308 	and.w	r3, r3, #8
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac44:	4b53      	ldr	r3, [pc, #332]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	4a52      	ldr	r2, [pc, #328]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ac4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ac4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac50:	4b50      	ldr	r3, [pc, #320]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	494d      	ldr	r1, [pc, #308]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d040      	beq.n	800acf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d107      	bne.n	800ac86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac76:	4b47      	ldr	r3, [pc, #284]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d115      	bne.n	800acae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e07f      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d107      	bne.n	800ac9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac8e:	4b41      	ldr	r3, [pc, #260]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d109      	bne.n	800acae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e073      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac9e:	4b3d      	ldr	r3, [pc, #244]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0302 	and.w	r3, r3, #2
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e06b      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800acae:	4b39      	ldr	r3, [pc, #228]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f023 0203 	bic.w	r2, r3, #3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	4936      	ldr	r1, [pc, #216]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800acbc:	4313      	orrs	r3, r2
 800acbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800acc0:	f7fd fe44 	bl	800894c <HAL_GetTick>
 800acc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acc6:	e00a      	b.n	800acde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acc8:	f7fd fe40 	bl	800894c <HAL_GetTick>
 800accc:	4602      	mov	r2, r0
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d901      	bls.n	800acde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e053      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acde:	4b2d      	ldr	r3, [pc, #180]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f003 020c 	and.w	r2, r3, #12
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	429a      	cmp	r2, r3
 800acee:	d1eb      	bne.n	800acc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800acf0:	4b27      	ldr	r3, [pc, #156]	; (800ad90 <HAL_RCC_ClockConfig+0x1c0>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0307 	and.w	r3, r3, #7
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d210      	bcs.n	800ad20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acfe:	4b24      	ldr	r3, [pc, #144]	; (800ad90 <HAL_RCC_ClockConfig+0x1c0>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f023 0207 	bic.w	r2, r3, #7
 800ad06:	4922      	ldr	r1, [pc, #136]	; (800ad90 <HAL_RCC_ClockConfig+0x1c0>)
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad0e:	4b20      	ldr	r3, [pc, #128]	; (800ad90 <HAL_RCC_ClockConfig+0x1c0>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d001      	beq.n	800ad20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e032      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0304 	and.w	r3, r3, #4
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d008      	beq.n	800ad3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad2c:	4b19      	ldr	r3, [pc, #100]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	4916      	ldr	r1, [pc, #88]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0308 	and.w	r3, r3, #8
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d009      	beq.n	800ad5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad4a:	4b12      	ldr	r3, [pc, #72]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	490e      	ldr	r1, [pc, #56]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad5e:	f000 f821 	bl	800ada4 <HAL_RCC_GetSysClockFreq>
 800ad62:	4602      	mov	r2, r0
 800ad64:	4b0b      	ldr	r3, [pc, #44]	; (800ad94 <HAL_RCC_ClockConfig+0x1c4>)
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	091b      	lsrs	r3, r3, #4
 800ad6a:	f003 030f 	and.w	r3, r3, #15
 800ad6e:	490a      	ldr	r1, [pc, #40]	; (800ad98 <HAL_RCC_ClockConfig+0x1c8>)
 800ad70:	5ccb      	ldrb	r3, [r1, r3]
 800ad72:	fa22 f303 	lsr.w	r3, r2, r3
 800ad76:	4a09      	ldr	r2, [pc, #36]	; (800ad9c <HAL_RCC_ClockConfig+0x1cc>)
 800ad78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ad7a:	4b09      	ldr	r3, [pc, #36]	; (800ada0 <HAL_RCC_ClockConfig+0x1d0>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fd fda2 	bl	80088c8 <HAL_InitTick>

  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	40022000 	.word	0x40022000
 800ad94:	40021000 	.word	0x40021000
 800ad98:	0800f7c8 	.word	0x0800f7c8
 800ad9c:	20000068 	.word	0x20000068
 800ada0:	2000006c 	.word	0x2000006c

0800ada4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
 800adae:	2300      	movs	r3, #0
 800adb0:	60bb      	str	r3, [r7, #8]
 800adb2:	2300      	movs	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]
 800adb6:	2300      	movs	r3, #0
 800adb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800adba:	2300      	movs	r3, #0
 800adbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800adbe:	4b1e      	ldr	r3, [pc, #120]	; (800ae38 <HAL_RCC_GetSysClockFreq+0x94>)
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f003 030c 	and.w	r3, r3, #12
 800adca:	2b04      	cmp	r3, #4
 800adcc:	d002      	beq.n	800add4 <HAL_RCC_GetSysClockFreq+0x30>
 800adce:	2b08      	cmp	r3, #8
 800add0:	d003      	beq.n	800adda <HAL_RCC_GetSysClockFreq+0x36>
 800add2:	e027      	b.n	800ae24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800add4:	4b19      	ldr	r3, [pc, #100]	; (800ae3c <HAL_RCC_GetSysClockFreq+0x98>)
 800add6:	613b      	str	r3, [r7, #16]
      break;
 800add8:	e027      	b.n	800ae2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	0c9b      	lsrs	r3, r3, #18
 800adde:	f003 030f 	and.w	r3, r3, #15
 800ade2:	4a17      	ldr	r2, [pc, #92]	; (800ae40 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ade4:	5cd3      	ldrb	r3, [r2, r3]
 800ade6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d010      	beq.n	800ae14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800adf2:	4b11      	ldr	r3, [pc, #68]	; (800ae38 <HAL_RCC_GetSysClockFreq+0x94>)
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	0c5b      	lsrs	r3, r3, #17
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	4a11      	ldr	r2, [pc, #68]	; (800ae44 <HAL_RCC_GetSysClockFreq+0xa0>)
 800adfe:	5cd3      	ldrb	r3, [r2, r3]
 800ae00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a0d      	ldr	r2, [pc, #52]	; (800ae3c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae06:	fb02 f203 	mul.w	r2, r2, r3
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae10:	617b      	str	r3, [r7, #20]
 800ae12:	e004      	b.n	800ae1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a0c      	ldr	r2, [pc, #48]	; (800ae48 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ae18:	fb02 f303 	mul.w	r3, r2, r3
 800ae1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	613b      	str	r3, [r7, #16]
      break;
 800ae22:	e002      	b.n	800ae2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ae24:	4b05      	ldr	r3, [pc, #20]	; (800ae3c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae26:	613b      	str	r3, [r7, #16]
      break;
 800ae28:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae2a:	693b      	ldr	r3, [r7, #16]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	371c      	adds	r7, #28
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bc80      	pop	{r7}
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	40021000 	.word	0x40021000
 800ae3c:	007a1200 	.word	0x007a1200
 800ae40:	0800f7e0 	.word	0x0800f7e0
 800ae44:	0800f7f0 	.word	0x0800f7f0
 800ae48:	003d0900 	.word	0x003d0900

0800ae4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae50:	4b02      	ldr	r3, [pc, #8]	; (800ae5c <HAL_RCC_GetHCLKFreq+0x10>)
 800ae52:	681b      	ldr	r3, [r3, #0]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bc80      	pop	{r7}
 800ae5a:	4770      	bx	lr
 800ae5c:	20000068 	.word	0x20000068

0800ae60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae64:	f7ff fff2 	bl	800ae4c <HAL_RCC_GetHCLKFreq>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	0a1b      	lsrs	r3, r3, #8
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	4903      	ldr	r1, [pc, #12]	; (800ae84 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae76:	5ccb      	ldrb	r3, [r1, r3]
 800ae78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	40021000 	.word	0x40021000
 800ae84:	0800f7d8 	.word	0x0800f7d8

0800ae88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ae8c:	f7ff ffde 	bl	800ae4c <HAL_RCC_GetHCLKFreq>
 800ae90:	4602      	mov	r2, r0
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	0adb      	lsrs	r3, r3, #11
 800ae98:	f003 0307 	and.w	r3, r3, #7
 800ae9c:	4903      	ldr	r1, [pc, #12]	; (800aeac <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae9e:	5ccb      	ldrb	r3, [r1, r3]
 800aea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	40021000 	.word	0x40021000
 800aeac:	0800f7d8 	.word	0x0800f7d8

0800aeb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aeb8:	4b0a      	ldr	r3, [pc, #40]	; (800aee4 <RCC_Delay+0x34>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a0a      	ldr	r2, [pc, #40]	; (800aee8 <RCC_Delay+0x38>)
 800aebe:	fba2 2303 	umull	r2, r3, r2, r3
 800aec2:	0a5b      	lsrs	r3, r3, #9
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	fb02 f303 	mul.w	r3, r2, r3
 800aeca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aecc:	bf00      	nop
  }
  while (Delay --);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	1e5a      	subs	r2, r3, #1
 800aed2:	60fa      	str	r2, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1f9      	bne.n	800aecc <RCC_Delay+0x1c>
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	3714      	adds	r7, #20
 800aede:	46bd      	mov	sp, r7
 800aee0:	bc80      	pop	{r7}
 800aee2:	4770      	bx	lr
 800aee4:	20000068 	.word	0x20000068
 800aee8:	10624dd3 	.word	0x10624dd3

0800aeec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	613b      	str	r3, [r7, #16]
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d07d      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800af08:	2300      	movs	r3, #0
 800af0a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af0c:	4b4f      	ldr	r3, [pc, #316]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10d      	bne.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af18:	4b4c      	ldr	r3, [pc, #304]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af1a:	69db      	ldr	r3, [r3, #28]
 800af1c:	4a4b      	ldr	r2, [pc, #300]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af22:	61d3      	str	r3, [r2, #28]
 800af24:	4b49      	ldr	r3, [pc, #292]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af2c:	60bb      	str	r3, [r7, #8]
 800af2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af30:	2301      	movs	r3, #1
 800af32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af34:	4b46      	ldr	r3, [pc, #280]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d118      	bne.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af40:	4b43      	ldr	r3, [pc, #268]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a42      	ldr	r2, [pc, #264]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af4c:	f7fd fcfe 	bl	800894c <HAL_GetTick>
 800af50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af52:	e008      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af54:	f7fd fcfa 	bl	800894c <HAL_GetTick>
 800af58:	4602      	mov	r2, r0
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	2b64      	cmp	r3, #100	; 0x64
 800af60:	d901      	bls.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e06d      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af66:	4b3a      	ldr	r3, [pc, #232]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0f0      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800af72:	4b36      	ldr	r3, [pc, #216]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d02e      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d027      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af90:	4b2e      	ldr	r3, [pc, #184]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af92:	6a1b      	ldr	r3, [r3, #32]
 800af94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800af9a:	4b2e      	ldr	r3, [pc, #184]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800af9c:	2201      	movs	r2, #1
 800af9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800afa0:	4b2c      	ldr	r3, [pc, #176]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800afa6:	4a29      	ldr	r2, [pc, #164]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d014      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afb6:	f7fd fcc9 	bl	800894c <HAL_GetTick>
 800afba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afbc:	e00a      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afbe:	f7fd fcc5 	bl	800894c <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afcc:	4293      	cmp	r3, r2
 800afce:	d901      	bls.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e036      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd4:	4b1d      	ldr	r3, [pc, #116]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	f003 0302 	and.w	r3, r3, #2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0ee      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afe0:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afe2:	6a1b      	ldr	r3, [r3, #32]
 800afe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	4917      	ldr	r1, [pc, #92]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aff2:	7dfb      	ldrb	r3, [r7, #23]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d105      	bne.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aff8:	4b14      	ldr	r3, [pc, #80]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800affa:	69db      	ldr	r3, [r3, #28]
 800affc:	4a13      	ldr	r2, [pc, #76]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800affe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b002:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0302 	and.w	r3, r3, #2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d008      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b010:	4b0e      	ldr	r3, [pc, #56]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	490b      	ldr	r1, [pc, #44]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0310 	and.w	r3, r3, #16
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d008      	beq.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b02e:	4b07      	ldr	r3, [pc, #28]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	4904      	ldr	r1, [pc, #16]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3718      	adds	r7, #24
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	40021000 	.word	0x40021000
 800b050:	40007000 	.word	0x40007000
 800b054:	42420440 	.word	0x42420440

0800b058 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b088      	sub	sp, #32
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800b060:	2300      	movs	r3, #0
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	2300      	movs	r3, #0
 800b066:	61fb      	str	r3, [r7, #28]
 800b068:	2300      	movs	r3, #0
 800b06a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	2300      	movs	r3, #0
 800b072:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b10      	cmp	r3, #16
 800b078:	d00a      	beq.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b10      	cmp	r3, #16
 800b07e:	f200 808a 	bhi.w	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d045      	beq.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d075      	beq.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800b08e:	e082      	b.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800b090:	4b46      	ldr	r3, [pc, #280]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800b096:	4b45      	ldr	r3, [pc, #276]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d07b      	beq.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	0c9b      	lsrs	r3, r3, #18
 800b0a6:	f003 030f 	and.w	r3, r3, #15
 800b0aa:	4a41      	ldr	r2, [pc, #260]	; (800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800b0ac:	5cd3      	ldrb	r3, [r2, r3]
 800b0ae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d015      	beq.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b0ba:	4b3c      	ldr	r3, [pc, #240]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	0c5b      	lsrs	r3, r3, #17
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	4a3b      	ldr	r2, [pc, #236]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800b0c6:	5cd3      	ldrb	r3, [r2, r3]
 800b0c8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00d      	beq.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800b0d4:	4a38      	ldr	r2, [pc, #224]	; (800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	fbb2 f2f3 	udiv	r2, r2, r3
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	fb02 f303 	mul.w	r3, r2, r3
 800b0e2:	61fb      	str	r3, [r7, #28]
 800b0e4:	e004      	b.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	4a34      	ldr	r2, [pc, #208]	; (800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800b0ea:	fb02 f303 	mul.w	r3, r2, r3
 800b0ee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800b0f0:	4b2e      	ldr	r3, [pc, #184]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0fc:	d102      	bne.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	61bb      	str	r3, [r7, #24]
      break;
 800b102:	e04a      	b.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	4a2d      	ldr	r2, [pc, #180]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800b10a:	fba2 2303 	umull	r2, r3, r2, r3
 800b10e:	085b      	lsrs	r3, r3, #1
 800b110:	61bb      	str	r3, [r7, #24]
      break;
 800b112:	e042      	b.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800b114:	4b25      	ldr	r3, [pc, #148]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b116:	6a1b      	ldr	r3, [r3, #32]
 800b118:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b124:	d108      	bne.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800b130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b134:	61bb      	str	r3, [r7, #24]
 800b136:	e01f      	b.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b13e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b142:	d109      	bne.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800b144:	4b19      	ldr	r3, [pc, #100]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b148:	f003 0302 	and.w	r3, r3, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800b150:	f649 4340 	movw	r3, #40000	; 0x9c40
 800b154:	61bb      	str	r3, [r7, #24]
 800b156:	e00f      	b.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b15e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b162:	d11c      	bne.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800b164:	4b11      	ldr	r3, [pc, #68]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d016      	beq.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800b170:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b174:	61bb      	str	r3, [r7, #24]
      break;
 800b176:	e012      	b.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800b178:	e011      	b.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800b17a:	f7ff fe85 	bl	800ae88 <HAL_RCC_GetPCLK2Freq>
 800b17e:	4602      	mov	r2, r0
 800b180:	4b0a      	ldr	r3, [pc, #40]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	0b9b      	lsrs	r3, r3, #14
 800b186:	f003 0303 	and.w	r3, r3, #3
 800b18a:	3301      	adds	r3, #1
 800b18c:	005b      	lsls	r3, r3, #1
 800b18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b192:	61bb      	str	r3, [r7, #24]
      break;
 800b194:	e004      	b.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b196:	bf00      	nop
 800b198:	e002      	b.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b19a:	bf00      	nop
 800b19c:	e000      	b.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b19e:	bf00      	nop
    }
  }
  return (frequency);
 800b1a0:	69bb      	ldr	r3, [r7, #24]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3720      	adds	r7, #32
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40021000 	.word	0x40021000
 800b1b0:	0800f7f4 	.word	0x0800f7f4
 800b1b4:	0800f804 	.word	0x0800f804
 800b1b8:	007a1200 	.word	0x007a1200
 800b1bc:	003d0900 	.word	0x003d0900
 800b1c0:	aaaaaaab 	.word	0xaaaaaaab

0800b1c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d101      	bne.n	800b1da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e07a      	b.n	800b2d0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	7c5b      	ldrb	r3, [r3, #17]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d105      	bne.n	800b1f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7fd f89c 	bl	8008328 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f870 	bl	800b2dc <HAL_RTC_WaitForSynchro>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d004      	beq.n	800b20c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2204      	movs	r2, #4
 800b206:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e061      	b.n	800b2d0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f892 	bl	800b336 <RTC_EnterInitMode>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d004      	beq.n	800b222 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2204      	movs	r2, #4
 800b21c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e056      	b.n	800b2d0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f022 0207 	bic.w	r2, r2, #7
 800b230:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d005      	beq.n	800b246 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800b23a:	4b27      	ldr	r3, [pc, #156]	; (800b2d8 <HAL_RTC_Init+0x114>)
 800b23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23e:	4a26      	ldr	r2, [pc, #152]	; (800b2d8 <HAL_RTC_Init+0x114>)
 800b240:	f023 0301 	bic.w	r3, r3, #1
 800b244:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800b246:	4b24      	ldr	r3, [pc, #144]	; (800b2d8 <HAL_RTC_Init+0x114>)
 800b248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	4921      	ldr	r1, [pc, #132]	; (800b2d8 <HAL_RTC_Init+0x114>)
 800b254:	4313      	orrs	r3, r2
 800b256:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b260:	d003      	beq.n	800b26a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	e00e      	b.n	800b288 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800b26a:	2001      	movs	r0, #1
 800b26c:	f7ff fef4 	bl	800b058 <HAL_RCCEx_GetPeriphCLKFreq>
 800b270:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d104      	bne.n	800b282 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2204      	movs	r2, #4
 800b27c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e026      	b.n	800b2d0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3b01      	subs	r3, #1
 800b286:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	0c1a      	lsrs	r2, r3, #16
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f002 020f 	and.w	r2, r2, #15
 800b294:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	b292      	uxth	r2, r2
 800b29e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f870 	bl	800b386 <RTC_ExitInitMode>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d004      	beq.n	800b2b6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2204      	movs	r2, #4
 800b2b0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e00c      	b.n	800b2d0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
  }
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	40006c00 	.word	0x40006c00

0800b2dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e01d      	b.n	800b32e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f022 0208 	bic.w	r2, r2, #8
 800b300:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800b302:	f7fd fb23 	bl	800894c <HAL_GetTick>
 800b306:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800b308:	e009      	b.n	800b31e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b30a:	f7fd fb1f 	bl	800894c <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b318:	d901      	bls.n	800b31e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800b31a:	2303      	movs	r3, #3
 800b31c:	e007      	b.n	800b32e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f003 0308 	and.w	r3, r3, #8
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d0ee      	beq.n	800b30a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b084      	sub	sp, #16
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b33e:	2300      	movs	r3, #0
 800b340:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800b342:	f7fd fb03 	bl	800894c <HAL_GetTick>
 800b346:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b348:	e009      	b.n	800b35e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b34a:	f7fd faff 	bl	800894c <HAL_GetTick>
 800b34e:	4602      	mov	r2, r0
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b358:	d901      	bls.n	800b35e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e00f      	b.n	800b37e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	f003 0320 	and.w	r3, r3, #32
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d0ee      	beq.n	800b34a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	685a      	ldr	r2, [r3, #4]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f042 0210 	orr.w	r2, r2, #16
 800b37a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f022 0210 	bic.w	r2, r2, #16
 800b3a0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800b3a2:	f7fd fad3 	bl	800894c <HAL_GetTick>
 800b3a6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b3a8:	e009      	b.n	800b3be <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b3aa:	f7fd facf 	bl	800894c <HAL_GetTick>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3b8:	d901      	bls.n	800b3be <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	e007      	b.n	800b3ce <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	f003 0320 	and.w	r3, r3, #32
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d0ee      	beq.n	800b3aa <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0301 	and.w	r3, r3, #1
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d027      	beq.n	800b43c <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d020      	beq.n	800b43c <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f824 	bl	800b456 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f06f 0204 	mvn.w	r2, #4
 800b416:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2204      	movs	r2, #4
 800b41c:	745a      	strb	r2, [r3, #17]
 800b41e:	e005      	b.n	800b42c <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f80f 	bl	800b444 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f022 0201 	bic.w	r2, r2, #1
 800b43a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800b43c:	bf00      	nop
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	bc80      	pop	{r7}
 800b454:	4770      	bx	lr

0800b456 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800b456:	b480      	push	{r7}
 800b458:	b083      	sub	sp, #12
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 800b45e:	bf00      	nop
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	bc80      	pop	{r7}
 800b466:	4770      	bx	lr

0800b468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e076      	b.n	800b568 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d108      	bne.n	800b494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b48a:	d009      	beq.n	800b4a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	61da      	str	r2, [r3, #28]
 800b492:	e005      	b.n	800b4a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d106      	bne.n	800b4c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7fc ff60 	bl	8008380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4f2:	431a      	orrs	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	f003 0302 	and.w	r3, r3, #2
 800b4fc:	431a      	orrs	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	431a      	orrs	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b510:	431a      	orrs	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	69db      	ldr	r3, [r3, #28]
 800b516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b51a:	431a      	orrs	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b524:	ea42 0103 	orr.w	r1, r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	430a      	orrs	r2, r1
 800b536:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	0c1a      	lsrs	r2, r3, #16
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f002 0204 	and.w	r2, r2, #4
 800b546:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	69da      	ldr	r2, [r3, #28]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b556:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b088      	sub	sp, #32
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	603b      	str	r3, [r7, #0]
 800b57c:	4613      	mov	r3, r2
 800b57e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b580:	f7fd f9e4 	bl	800894c <HAL_GetTick>
 800b584:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b01      	cmp	r3, #1
 800b594:	d001      	beq.n	800b59a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b596:	2302      	movs	r3, #2
 800b598:	e12a      	b.n	800b7f0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <HAL_SPI_Transmit+0x36>
 800b5a0:	88fb      	ldrh	r3, [r7, #6]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e122      	b.n	800b7f0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d101      	bne.n	800b5b8 <HAL_SPI_Transmit+0x48>
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	e11b      	b.n	800b7f0 <HAL_SPI_Transmit+0x280>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	88fa      	ldrh	r2, [r7, #6]
 800b5d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	88fa      	ldrh	r2, [r7, #6]
 800b5de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b606:	d10f      	bne.n	800b628 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b616:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b626:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b632:	2b40      	cmp	r3, #64	; 0x40
 800b634:	d007      	beq.n	800b646 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b644:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b64e:	d152      	bne.n	800b6f6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <HAL_SPI_Transmit+0xee>
 800b658:	8b7b      	ldrh	r3, [r7, #26]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d145      	bne.n	800b6ea <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b662:	881a      	ldrh	r2, [r3, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66e:	1c9a      	adds	r2, r3, #2
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b678:	b29b      	uxth	r3, r3
 800b67a:	3b01      	subs	r3, #1
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b682:	e032      	b.n	800b6ea <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d112      	bne.n	800b6b8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b696:	881a      	ldrh	r2, [r3, #0]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a2:	1c9a      	adds	r2, r3, #2
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	86da      	strh	r2, [r3, #54]	; 0x36
 800b6b6:	e018      	b.n	800b6ea <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6b8:	f7fd f948 	bl	800894c <HAL_GetTick>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d803      	bhi.n	800b6d0 <HAL_SPI_Transmit+0x160>
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ce:	d102      	bne.n	800b6d6 <HAL_SPI_Transmit+0x166>
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d109      	bne.n	800b6ea <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	e082      	b.n	800b7f0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1c7      	bne.n	800b684 <HAL_SPI_Transmit+0x114>
 800b6f4:	e053      	b.n	800b79e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d002      	beq.n	800b704 <HAL_SPI_Transmit+0x194>
 800b6fe:	8b7b      	ldrh	r3, [r7, #26]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d147      	bne.n	800b794 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	330c      	adds	r3, #12
 800b70e:	7812      	ldrb	r2, [r2, #0]
 800b710:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b716:	1c5a      	adds	r2, r3, #1
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b720:	b29b      	uxth	r3, r3
 800b722:	3b01      	subs	r3, #1
 800b724:	b29a      	uxth	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b72a:	e033      	b.n	800b794 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	f003 0302 	and.w	r3, r3, #2
 800b736:	2b02      	cmp	r3, #2
 800b738:	d113      	bne.n	800b762 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	330c      	adds	r3, #12
 800b744:	7812      	ldrb	r2, [r2, #0]
 800b746:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74c:	1c5a      	adds	r2, r3, #1
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b756:	b29b      	uxth	r3, r3
 800b758:	3b01      	subs	r3, #1
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b760:	e018      	b.n	800b794 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b762:	f7fd f8f3 	bl	800894c <HAL_GetTick>
 800b766:	4602      	mov	r2, r0
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d803      	bhi.n	800b77a <HAL_SPI_Transmit+0x20a>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b778:	d102      	bne.n	800b780 <HAL_SPI_Transmit+0x210>
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d109      	bne.n	800b794 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800b790:	2303      	movs	r3, #3
 800b792:	e02d      	b.n	800b7f0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b798:	b29b      	uxth	r3, r3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1c6      	bne.n	800b72c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b79e:	69fa      	ldr	r2, [r7, #28]
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f000 fcc8 	bl	800c138 <SPI_EndRxTxTransaction>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d002      	beq.n	800b7b4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2220      	movs	r2, #32
 800b7b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10a      	bne.n	800b7d2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7bc:	2300      	movs	r3, #0
 800b7be:	617b      	str	r3, [r7, #20]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	617b      	str	r3, [r7, #20]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e000      	b.n	800b7f0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
  }
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3720      	adds	r7, #32
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af02      	add	r7, sp, #8
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	603b      	str	r3, [r7, #0]
 800b804:	4613      	mov	r3, r2
 800b806:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b01      	cmp	r3, #1
 800b812:	d001      	beq.n	800b818 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b814:	2302      	movs	r3, #2
 800b816:	e104      	b.n	800ba22 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b820:	d112      	bne.n	800b848 <HAL_SPI_Receive+0x50>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10e      	bne.n	800b848 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2204      	movs	r2, #4
 800b82e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b832:	88fa      	ldrh	r2, [r7, #6]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	4613      	mov	r3, r2
 800b83a:	68ba      	ldr	r2, [r7, #8]
 800b83c:	68b9      	ldr	r1, [r7, #8]
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 f8f3 	bl	800ba2a <HAL_SPI_TransmitReceive>
 800b844:	4603      	mov	r3, r0
 800b846:	e0ec      	b.n	800ba22 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b848:	f7fd f880 	bl	800894c <HAL_GetTick>
 800b84c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <HAL_SPI_Receive+0x62>
 800b854:	88fb      	ldrh	r3, [r7, #6]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e0e1      	b.n	800ba22 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b864:	2b01      	cmp	r3, #1
 800b866:	d101      	bne.n	800b86c <HAL_SPI_Receive+0x74>
 800b868:	2302      	movs	r3, #2
 800b86a:	e0da      	b.n	800ba22 <HAL_SPI_Receive+0x22a>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2204      	movs	r2, #4
 800b878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	88fa      	ldrh	r2, [r7, #6]
 800b88c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	88fa      	ldrh	r2, [r7, #6]
 800b892:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8ba:	d10f      	bne.n	800b8dc <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b8da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e6:	2b40      	cmp	r3, #64	; 0x40
 800b8e8:	d007      	beq.n	800b8fa <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d170      	bne.n	800b9e4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b902:	e035      	b.n	800b970 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	f003 0301 	and.w	r3, r3, #1
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d115      	bne.n	800b93e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f103 020c 	add.w	r2, r3, #12
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91e:	7812      	ldrb	r2, [r2, #0]
 800b920:	b2d2      	uxtb	r2, r2
 800b922:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b932:	b29b      	uxth	r3, r3
 800b934:	3b01      	subs	r3, #1
 800b936:	b29a      	uxth	r2, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b93c:	e018      	b.n	800b970 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b93e:	f7fd f805 	bl	800894c <HAL_GetTick>
 800b942:	4602      	mov	r2, r0
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	683a      	ldr	r2, [r7, #0]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d803      	bhi.n	800b956 <HAL_SPI_Receive+0x15e>
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b954:	d102      	bne.n	800b95c <HAL_SPI_Receive+0x164>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d109      	bne.n	800b970 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2200      	movs	r2, #0
 800b968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e058      	b.n	800ba22 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b974:	b29b      	uxth	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1c4      	bne.n	800b904 <HAL_SPI_Receive+0x10c>
 800b97a:	e038      	b.n	800b9ee <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	2b01      	cmp	r3, #1
 800b988:	d113      	bne.n	800b9b2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68da      	ldr	r2, [r3, #12]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b994:	b292      	uxth	r2, r2
 800b996:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99c:	1c9a      	adds	r2, r3, #2
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b9b0:	e018      	b.n	800b9e4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9b2:	f7fc ffcb 	bl	800894c <HAL_GetTick>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	683a      	ldr	r2, [r7, #0]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d803      	bhi.n	800b9ca <HAL_SPI_Receive+0x1d2>
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c8:	d102      	bne.n	800b9d0 <HAL_SPI_Receive+0x1d8>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d109      	bne.n	800b9e4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	e01e      	b.n	800ba22 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1c6      	bne.n	800b97c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	6839      	ldr	r1, [r7, #0]
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f000 fb4e 	bl	800c094 <SPI_EndRxTransaction>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d002      	beq.n	800ba04 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2220      	movs	r2, #32
 800ba02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e000      	b.n	800ba22 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800ba20:	2300      	movs	r3, #0
  }
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b08a      	sub	sp, #40	; 0x28
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	60f8      	str	r0, [r7, #12]
 800ba32:	60b9      	str	r1, [r7, #8]
 800ba34:	607a      	str	r2, [r7, #4]
 800ba36:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba3c:	f7fc ff86 	bl	800894c <HAL_GetTick>
 800ba40:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba48:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ba50:	887b      	ldrh	r3, [r7, #2]
 800ba52:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ba54:	7ffb      	ldrb	r3, [r7, #31]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d00c      	beq.n	800ba74 <HAL_SPI_TransmitReceive+0x4a>
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba60:	d106      	bne.n	800ba70 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <HAL_SPI_TransmitReceive+0x46>
 800ba6a:	7ffb      	ldrb	r3, [r7, #31]
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	d001      	beq.n	800ba74 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800ba70:	2302      	movs	r3, #2
 800ba72:	e17f      	b.n	800bd74 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d005      	beq.n	800ba86 <HAL_SPI_TransmitReceive+0x5c>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <HAL_SPI_TransmitReceive+0x5c>
 800ba80:	887b      	ldrh	r3, [r7, #2]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e174      	b.n	800bd74 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d101      	bne.n	800ba98 <HAL_SPI_TransmitReceive+0x6e>
 800ba94:	2302      	movs	r3, #2
 800ba96:	e16d      	b.n	800bd74 <HAL_SPI_TransmitReceive+0x34a>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b04      	cmp	r3, #4
 800baaa:	d003      	beq.n	800bab4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2205      	movs	r2, #5
 800bab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	887a      	ldrh	r2, [r7, #2]
 800bac4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	887a      	ldrh	r2, [r7, #2]
 800baca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	887a      	ldrh	r2, [r7, #2]
 800bad6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	887a      	ldrh	r2, [r7, #2]
 800badc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2200      	movs	r2, #0
 800bae2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2200      	movs	r2, #0
 800bae8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf4:	2b40      	cmp	r3, #64	; 0x40
 800baf6:	d007      	beq.n	800bb08 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb10:	d17e      	bne.n	800bc10 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d002      	beq.n	800bb20 <HAL_SPI_TransmitReceive+0xf6>
 800bb1a:	8afb      	ldrh	r3, [r7, #22]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d16c      	bne.n	800bbfa <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb24:	881a      	ldrh	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb30:	1c9a      	adds	r2, r3, #2
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb44:	e059      	b.n	800bbfa <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	f003 0302 	and.w	r3, r3, #2
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d11b      	bne.n	800bb8c <HAL_SPI_TransmitReceive+0x162>
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d016      	beq.n	800bb8c <HAL_SPI_TransmitReceive+0x162>
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d113      	bne.n	800bb8c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb68:	881a      	ldrh	r2, [r3, #0]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb74:	1c9a      	adds	r2, r3, #2
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	3b01      	subs	r3, #1
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d119      	bne.n	800bbce <HAL_SPI_TransmitReceive+0x1a4>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d014      	beq.n	800bbce <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68da      	ldr	r2, [r3, #12]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbae:	b292      	uxth	r2, r2
 800bbb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb6:	1c9a      	adds	r2, r3, #2
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bbce:	f7fc febd 	bl	800894c <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d80d      	bhi.n	800bbfa <HAL_SPI_TransmitReceive+0x1d0>
 800bbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe4:	d009      	beq.n	800bbfa <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	e0bc      	b.n	800bd74 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1a0      	bne.n	800bb46 <HAL_SPI_TransmitReceive+0x11c>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d19b      	bne.n	800bb46 <HAL_SPI_TransmitReceive+0x11c>
 800bc0e:	e082      	b.n	800bd16 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d002      	beq.n	800bc1e <HAL_SPI_TransmitReceive+0x1f4>
 800bc18:	8afb      	ldrh	r3, [r7, #22]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d171      	bne.n	800bd02 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	330c      	adds	r3, #12
 800bc28:	7812      	ldrb	r2, [r2, #0]
 800bc2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc44:	e05d      	b.n	800bd02 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	f003 0302 	and.w	r3, r3, #2
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d11c      	bne.n	800bc8e <HAL_SPI_TransmitReceive+0x264>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d017      	beq.n	800bc8e <HAL_SPI_TransmitReceive+0x264>
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d114      	bne.n	800bc8e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	330c      	adds	r3, #12
 800bc6e:	7812      	ldrb	r2, [r2, #0]
 800bc70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc76:	1c5a      	adds	r2, r3, #1
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	3b01      	subs	r3, #1
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	f003 0301 	and.w	r3, r3, #1
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d119      	bne.n	800bcd0 <HAL_SPI_TransmitReceive+0x2a6>
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d014      	beq.n	800bcd0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68da      	ldr	r2, [r3, #12]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb0:	b2d2      	uxtb	r2, r2
 800bcb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb8:	1c5a      	adds	r2, r3, #1
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bccc:	2301      	movs	r3, #1
 800bcce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bcd0:	f7fc fe3c 	bl	800894c <HAL_GetTick>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	1ad3      	subs	r3, r2, r3
 800bcda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d803      	bhi.n	800bce8 <HAL_SPI_TransmitReceive+0x2be>
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce6:	d102      	bne.n	800bcee <HAL_SPI_TransmitReceive+0x2c4>
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d109      	bne.n	800bd02 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e038      	b.n	800bd74 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d19c      	bne.n	800bc46 <HAL_SPI_TransmitReceive+0x21c>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d197      	bne.n	800bc46 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd16:	6a3a      	ldr	r2, [r7, #32]
 800bd18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f000 fa0c 	bl	800c138 <SPI_EndRxTxTransaction>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d008      	beq.n	800bd38 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2220      	movs	r2, #32
 800bd2a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e01d      	b.n	800bd74 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10a      	bne.n	800bd56 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd40:	2300      	movs	r3, #0
 800bd42:	613b      	str	r3, [r7, #16]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	613b      	str	r3, [r7, #16]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	613b      	str	r3, [r7, #16]
 800bd54:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e000      	b.n	800bd74 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800bd72:	2300      	movs	r3, #0
  }
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3728      	adds	r7, #40	; 0x28
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b088      	sub	sp, #32
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	099b      	lsrs	r3, r3, #6
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10f      	bne.n	800bdc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00a      	beq.n	800bdc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	099b      	lsrs	r3, r3, #6
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d004      	beq.n	800bdc0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	4798      	blx	r3
    return;
 800bdbe:	e0be      	b.n	800bf3e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	085b      	lsrs	r3, r3, #1
 800bdc4:	f003 0301 	and.w	r3, r3, #1
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00a      	beq.n	800bde2 <HAL_SPI_IRQHandler+0x66>
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	09db      	lsrs	r3, r3, #7
 800bdd0:	f003 0301 	and.w	r3, r3, #1
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d004      	beq.n	800bde2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	4798      	blx	r3
    return;
 800bde0:	e0ad      	b.n	800bf3e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	095b      	lsrs	r3, r3, #5
 800bde6:	f003 0301 	and.w	r3, r3, #1
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d106      	bne.n	800bdfc <HAL_SPI_IRQHandler+0x80>
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	099b      	lsrs	r3, r3, #6
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 80a1 	beq.w	800bf3e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	095b      	lsrs	r3, r3, #5
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 809a 	beq.w	800bf3e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	099b      	lsrs	r3, r3, #6
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	2b00      	cmp	r3, #0
 800be14:	d023      	beq.n	800be5e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d011      	beq.n	800be46 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be26:	f043 0204 	orr.w	r2, r3, #4
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be2e:	2300      	movs	r3, #0
 800be30:	617b      	str	r3, [r7, #20]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	617b      	str	r3, [r7, #20]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	617b      	str	r3, [r7, #20]
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	e00b      	b.n	800be5e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be46:	2300      	movs	r3, #0
 800be48:	613b      	str	r3, [r7, #16]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	613b      	str	r3, [r7, #16]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	613b      	str	r3, [r7, #16]
 800be5a:	693b      	ldr	r3, [r7, #16]
        return;
 800be5c:	e06f      	b.n	800bf3e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	095b      	lsrs	r3, r3, #5
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	2b00      	cmp	r3, #0
 800be68:	d014      	beq.n	800be94 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6e:	f043 0201 	orr.w	r2, r3, #1
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800be76:	2300      	movs	r3, #0
 800be78:	60fb      	str	r3, [r7, #12]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	60fb      	str	r3, [r7, #12]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be90:	601a      	str	r2, [r3, #0]
 800be92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d04f      	beq.n	800bf3c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800beaa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	f003 0302 	and.w	r3, r3, #2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d104      	bne.n	800bec8 <HAL_SPI_IRQHandler+0x14c>
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d034      	beq.n	800bf32 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f022 0203 	bic.w	r2, r2, #3
 800bed6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d011      	beq.n	800bf04 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bee4:	4a17      	ldr	r2, [pc, #92]	; (800bf44 <HAL_SPI_IRQHandler+0x1c8>)
 800bee6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beec:	4618      	mov	r0, r3
 800beee:	f7fc fe69 	bl	8008bc4 <HAL_DMA_Abort_IT>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d005      	beq.n	800bf04 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d016      	beq.n	800bf3a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf10:	4a0c      	ldr	r2, [pc, #48]	; (800bf44 <HAL_SPI_IRQHandler+0x1c8>)
 800bf12:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fc fe53 	bl	8008bc4 <HAL_DMA_Abort_IT>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00a      	beq.n	800bf3a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bf30:	e003      	b.n	800bf3a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f808 	bl	800bf48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bf38:	e000      	b.n	800bf3c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800bf3a:	bf00      	nop
    return;
 800bf3c:	bf00      	nop
  }
}
 800bf3e:	3720      	adds	r7, #32
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	0800bf5b 	.word	0x0800bf5b

0800bf48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bc80      	pop	{r7}
 800bf58:	4770      	bx	lr

0800bf5a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf66:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f7ff ffe7 	bl	800bf48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bf7a:	bf00      	nop
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
	...

0800bf84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b088      	sub	sp, #32
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	603b      	str	r3, [r7, #0]
 800bf90:	4613      	mov	r3, r2
 800bf92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bf94:	f7fc fcda 	bl	800894c <HAL_GetTick>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9c:	1a9b      	subs	r3, r3, r2
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bfa4:	f7fc fcd2 	bl	800894c <HAL_GetTick>
 800bfa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bfaa:	4b39      	ldr	r3, [pc, #228]	; (800c090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	015b      	lsls	r3, r3, #5
 800bfb0:	0d1b      	lsrs	r3, r3, #20
 800bfb2:	69fa      	ldr	r2, [r7, #28]
 800bfb4:	fb02 f303 	mul.w	r3, r2, r3
 800bfb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bfba:	e054      	b.n	800c066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc2:	d050      	beq.n	800c066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bfc4:	f7fc fcc2 	bl	800894c <HAL_GetTick>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	69fa      	ldr	r2, [r7, #28]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d902      	bls.n	800bfda <SPI_WaitFlagStateUntilTimeout+0x56>
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d13d      	bne.n	800c056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	685a      	ldr	r2, [r3, #4]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bfe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bff2:	d111      	bne.n	800c018 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bffc:	d004      	beq.n	800c008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c006:	d107      	bne.n	800c018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c020:	d10f      	bne.n	800c042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2201      	movs	r2, #1
 800c046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c052:	2303      	movs	r3, #3
 800c054:	e017      	b.n	800c086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c05c:	2300      	movs	r3, #0
 800c05e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	3b01      	subs	r3, #1
 800c064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	689a      	ldr	r2, [r3, #8]
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4013      	ands	r3, r2
 800c070:	68ba      	ldr	r2, [r7, #8]
 800c072:	429a      	cmp	r2, r3
 800c074:	bf0c      	ite	eq
 800c076:	2301      	moveq	r3, #1
 800c078:	2300      	movne	r3, #0
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	461a      	mov	r2, r3
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	429a      	cmp	r2, r3
 800c082:	d19b      	bne.n	800bfbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3720      	adds	r7, #32
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	20000068 	.word	0x20000068

0800c094 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af02      	add	r7, sp, #8
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0a8:	d111      	bne.n	800c0ce <SPI_EndRxTransaction+0x3a>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0b2:	d004      	beq.n	800c0be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0bc:	d107      	bne.n	800c0ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0cc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0d6:	d117      	bne.n	800c108 <SPI_EndRxTransaction+0x74>
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0e0:	d112      	bne.n	800c108 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f7ff ff49 	bl	800bf84 <SPI_WaitFlagStateUntilTimeout>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d01a      	beq.n	800c12e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0fc:	f043 0220 	orr.w	r2, r3, #32
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c104:	2303      	movs	r3, #3
 800c106:	e013      	b.n	800c130 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2200      	movs	r2, #0
 800c110:	2180      	movs	r1, #128	; 0x80
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f7ff ff36 	bl	800bf84 <SPI_WaitFlagStateUntilTimeout>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d007      	beq.n	800c12e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c122:	f043 0220 	orr.w	r2, r3, #32
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e000      	b.n	800c130 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af02      	add	r7, sp, #8
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2201      	movs	r2, #1
 800c14c:	2102      	movs	r1, #2
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7ff ff18 	bl	800bf84 <SPI_WaitFlagStateUntilTimeout>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d007      	beq.n	800c16a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15e:	f043 0220 	orr.w	r2, r3, #32
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800c166:	2303      	movs	r3, #3
 800c168:	e013      	b.n	800c192 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2200      	movs	r2, #0
 800c172:	2180      	movs	r1, #128	; 0x80
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f7ff ff05 	bl	800bf84 <SPI_WaitFlagStateUntilTimeout>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d007      	beq.n	800c190 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c184:	f043 0220 	orr.w	r2, r3, #32
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e000      	b.n	800c192 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d101      	bne.n	800c1ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e042      	b.n	800c232 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d106      	bne.n	800c1c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7fc f973 	bl	80084ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2224      	movs	r2, #36	; 0x24
 800c1ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	68da      	ldr	r2, [r3, #12]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fa08 	bl	800c5f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	691a      	ldr	r2, [r3, #16]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	695a      	ldr	r2, [r3, #20]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c202:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68da      	ldr	r2, [r3, #12]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c212:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2220      	movs	r2, #32
 800c21e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2220      	movs	r2, #32
 800c226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b08a      	sub	sp, #40	; 0x28
 800c23e:	af02      	add	r7, sp, #8
 800c240:	60f8      	str	r0, [r7, #12]
 800c242:	60b9      	str	r1, [r7, #8]
 800c244:	603b      	str	r3, [r7, #0]
 800c246:	4613      	mov	r3, r2
 800c248:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c24a:	2300      	movs	r3, #0
 800c24c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b20      	cmp	r3, #32
 800c258:	d175      	bne.n	800c346 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <HAL_UART_Transmit+0x2c>
 800c260:	88fb      	ldrh	r3, [r7, #6]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e06e      	b.n	800c348 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2221      	movs	r2, #33	; 0x21
 800c274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c278:	f7fc fb68 	bl	800894c <HAL_GetTick>
 800c27c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	88fa      	ldrh	r2, [r7, #6]
 800c282:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	88fa      	ldrh	r2, [r7, #6]
 800c288:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c292:	d108      	bne.n	800c2a6 <HAL_UART_Transmit+0x6c>
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d104      	bne.n	800c2a6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c29c:	2300      	movs	r3, #0
 800c29e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	61bb      	str	r3, [r7, #24]
 800c2a4:	e003      	b.n	800c2ae <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c2ae:	e02e      	b.n	800c30e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2180      	movs	r1, #128	; 0x80
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f000 f8df 	bl	800c47e <UART_WaitOnFlagUntilTimeout>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d005      	beq.n	800c2d2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2220      	movs	r2, #32
 800c2ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	e03a      	b.n	800c348 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10b      	bne.n	800c2f0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	881b      	ldrh	r3, [r3, #0]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2e6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	3302      	adds	r3, #2
 800c2ec:	61bb      	str	r3, [r7, #24]
 800c2ee:	e007      	b.n	800c300 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	781a      	ldrb	r2, [r3, #0]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c304:	b29b      	uxth	r3, r3
 800c306:	3b01      	subs	r3, #1
 800c308:	b29a      	uxth	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c312:	b29b      	uxth	r3, r3
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1cb      	bne.n	800c2b0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	2200      	movs	r2, #0
 800c320:	2140      	movs	r1, #64	; 0x40
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f000 f8ab 	bl	800c47e <UART_WaitOnFlagUntilTimeout>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d005      	beq.n	800c33a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2220      	movs	r2, #32
 800c332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800c336:	2303      	movs	r3, #3
 800c338:	e006      	b.n	800c348 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2220      	movs	r2, #32
 800c33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	e000      	b.n	800c348 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c346:	2302      	movs	r3, #2
  }
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3720      	adds	r7, #32
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b08a      	sub	sp, #40	; 0x28
 800c354:	af02      	add	r7, sp, #8
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	603b      	str	r3, [r7, #0]
 800c35c:	4613      	mov	r3, r2
 800c35e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c360:	2300      	movs	r3, #0
 800c362:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2b20      	cmp	r3, #32
 800c36e:	f040 8081 	bne.w	800c474 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <HAL_UART_Receive+0x2e>
 800c378:	88fb      	ldrh	r3, [r7, #6]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	e079      	b.n	800c476 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2200      	movs	r2, #0
 800c386:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2222      	movs	r2, #34	; 0x22
 800c38c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c396:	f7fc fad9 	bl	800894c <HAL_GetTick>
 800c39a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	88fa      	ldrh	r2, [r7, #6]
 800c3a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	88fa      	ldrh	r2, [r7, #6]
 800c3a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3b0:	d108      	bne.n	800c3c4 <HAL_UART_Receive+0x74>
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d104      	bne.n	800c3c4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	61bb      	str	r3, [r7, #24]
 800c3c2:	e003      	b.n	800c3cc <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c3cc:	e047      	b.n	800c45e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	2120      	movs	r1, #32
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f850 	bl	800c47e <UART_WaitOnFlagUntilTimeout>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d005      	beq.n	800c3f0 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2220      	movs	r2, #32
 800c3e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	e042      	b.n	800c476 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10c      	bne.n	800c410 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c402:	b29a      	uxth	r2, r3
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	3302      	adds	r3, #2
 800c40c:	61bb      	str	r3, [r7, #24]
 800c40e:	e01f      	b.n	800c450 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c418:	d007      	beq.n	800c42a <HAL_UART_Receive+0xda>
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10a      	bne.n	800c438 <HAL_UART_Receive+0xe8>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d106      	bne.n	800c438 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	b2da      	uxtb	r2, r3
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	701a      	strb	r2, [r3, #0]
 800c436:	e008      	b.n	800c44a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c444:	b2da      	uxtb	r2, r3
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	3301      	adds	r3, #1
 800c44e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c454:	b29b      	uxth	r3, r3
 800c456:	3b01      	subs	r3, #1
 800c458:	b29a      	uxth	r2, r3
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c462:	b29b      	uxth	r3, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1b2      	bne.n	800c3ce <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2220      	movs	r2, #32
 800c46c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800c470:	2300      	movs	r3, #0
 800c472:	e000      	b.n	800c476 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800c474:	2302      	movs	r3, #2
  }
}
 800c476:	4618      	mov	r0, r3
 800c478:	3720      	adds	r7, #32
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b086      	sub	sp, #24
 800c482:	af00      	add	r7, sp, #0
 800c484:	60f8      	str	r0, [r7, #12]
 800c486:	60b9      	str	r1, [r7, #8]
 800c488:	603b      	str	r3, [r7, #0]
 800c48a:	4613      	mov	r3, r2
 800c48c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c48e:	e03b      	b.n	800c508 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c490:	6a3b      	ldr	r3, [r7, #32]
 800c492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c496:	d037      	beq.n	800c508 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c498:	f7fc fa58 	bl	800894c <HAL_GetTick>
 800c49c:	4602      	mov	r2, r0
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	6a3a      	ldr	r2, [r7, #32]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d302      	bcc.n	800c4ae <UART_WaitOnFlagUntilTimeout+0x30>
 800c4a8:	6a3b      	ldr	r3, [r7, #32]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d101      	bne.n	800c4b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e03a      	b.n	800c528 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	f003 0304 	and.w	r3, r3, #4
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d023      	beq.n	800c508 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	2b80      	cmp	r3, #128	; 0x80
 800c4c4:	d020      	beq.n	800c508 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2b40      	cmp	r3, #64	; 0x40
 800c4ca:	d01d      	beq.n	800c508 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 0308 	and.w	r3, r3, #8
 800c4d6:	2b08      	cmp	r3, #8
 800c4d8:	d116      	bne.n	800c508 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c4da:	2300      	movs	r3, #0
 800c4dc:	617b      	str	r3, [r7, #20]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	617b      	str	r3, [r7, #20]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	617b      	str	r3, [r7, #20]
 800c4ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f000 f81d 	bl	800c530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2208      	movs	r2, #8
 800c4fa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	e00f      	b.n	800c528 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	4013      	ands	r3, r2
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	429a      	cmp	r2, r3
 800c516:	bf0c      	ite	eq
 800c518:	2301      	moveq	r3, #1
 800c51a:	2300      	movne	r3, #0
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	461a      	mov	r2, r3
 800c520:	79fb      	ldrb	r3, [r7, #7]
 800c522:	429a      	cmp	r2, r3
 800c524:	d0b4      	beq.n	800c490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3718      	adds	r7, #24
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c530:	b480      	push	{r7}
 800c532:	b095      	sub	sp, #84	; 0x54
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	330c      	adds	r3, #12
 800c53e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c542:	e853 3f00 	ldrex	r3, [r3]
 800c546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c54e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	330c      	adds	r3, #12
 800c556:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c558:	643a      	str	r2, [r7, #64]	; 0x40
 800c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c55e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c560:	e841 2300 	strex	r3, r2, [r1]
 800c564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1e5      	bne.n	800c538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	3314      	adds	r3, #20
 800c572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c574:	6a3b      	ldr	r3, [r7, #32]
 800c576:	e853 3f00 	ldrex	r3, [r3]
 800c57a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	f023 0301 	bic.w	r3, r3, #1
 800c582:	64bb      	str	r3, [r7, #72]	; 0x48
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	3314      	adds	r3, #20
 800c58a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c58c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c58e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c594:	e841 2300 	strex	r3, r2, [r1]
 800c598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1e5      	bne.n	800c56c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d119      	bne.n	800c5dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	330c      	adds	r3, #12
 800c5ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	e853 3f00 	ldrex	r3, [r3]
 800c5b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f023 0310 	bic.w	r3, r3, #16
 800c5be:	647b      	str	r3, [r7, #68]	; 0x44
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	330c      	adds	r3, #12
 800c5c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5c8:	61ba      	str	r2, [r7, #24]
 800c5ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5cc:	6979      	ldr	r1, [r7, #20]
 800c5ce:	69ba      	ldr	r2, [r7, #24]
 800c5d0:	e841 2300 	strex	r3, r2, [r1]
 800c5d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1e5      	bne.n	800c5a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2220      	movs	r2, #32
 800c5e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c5ea:	bf00      	nop
 800c5ec:	3754      	adds	r7, #84	; 0x54
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bc80      	pop	{r7}
 800c5f2:	4770      	bx	lr

0800c5f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	691b      	ldr	r3, [r3, #16]
 800c602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	68da      	ldr	r2, [r3, #12]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	430a      	orrs	r2, r1
 800c610:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	689a      	ldr	r2, [r3, #8]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	691b      	ldr	r3, [r3, #16]
 800c61a:	431a      	orrs	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	695b      	ldr	r3, [r3, #20]
 800c620:	4313      	orrs	r3, r2
 800c622:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c62e:	f023 030c 	bic.w	r3, r3, #12
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	6812      	ldr	r2, [r2, #0]
 800c636:	68b9      	ldr	r1, [r7, #8]
 800c638:	430b      	orrs	r3, r1
 800c63a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	699a      	ldr	r2, [r3, #24]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	430a      	orrs	r2, r1
 800c650:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a2c      	ldr	r2, [pc, #176]	; (800c708 <UART_SetConfig+0x114>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d103      	bne.n	800c664 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c65c:	f7fe fc14 	bl	800ae88 <HAL_RCC_GetPCLK2Freq>
 800c660:	60f8      	str	r0, [r7, #12]
 800c662:	e002      	b.n	800c66a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c664:	f7fe fbfc 	bl	800ae60 <HAL_RCC_GetPCLK1Freq>
 800c668:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	4613      	mov	r3, r2
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	4413      	add	r3, r2
 800c672:	009a      	lsls	r2, r3, #2
 800c674:	441a      	add	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c680:	4a22      	ldr	r2, [pc, #136]	; (800c70c <UART_SetConfig+0x118>)
 800c682:	fba2 2303 	umull	r2, r3, r2, r3
 800c686:	095b      	lsrs	r3, r3, #5
 800c688:	0119      	lsls	r1, r3, #4
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	4613      	mov	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	009a      	lsls	r2, r3, #2
 800c694:	441a      	add	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6a0:	4b1a      	ldr	r3, [pc, #104]	; (800c70c <UART_SetConfig+0x118>)
 800c6a2:	fba3 0302 	umull	r0, r3, r3, r2
 800c6a6:	095b      	lsrs	r3, r3, #5
 800c6a8:	2064      	movs	r0, #100	; 0x64
 800c6aa:	fb00 f303 	mul.w	r3, r0, r3
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	011b      	lsls	r3, r3, #4
 800c6b2:	3332      	adds	r3, #50	; 0x32
 800c6b4:	4a15      	ldr	r2, [pc, #84]	; (800c70c <UART_SetConfig+0x118>)
 800c6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ba:	095b      	lsrs	r3, r3, #5
 800c6bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6c0:	4419      	add	r1, r3
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	4413      	add	r3, r2
 800c6ca:	009a      	lsls	r2, r3, #2
 800c6cc:	441a      	add	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6d8:	4b0c      	ldr	r3, [pc, #48]	; (800c70c <UART_SetConfig+0x118>)
 800c6da:	fba3 0302 	umull	r0, r3, r3, r2
 800c6de:	095b      	lsrs	r3, r3, #5
 800c6e0:	2064      	movs	r0, #100	; 0x64
 800c6e2:	fb00 f303 	mul.w	r3, r0, r3
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	011b      	lsls	r3, r3, #4
 800c6ea:	3332      	adds	r3, #50	; 0x32
 800c6ec:	4a07      	ldr	r2, [pc, #28]	; (800c70c <UART_SetConfig+0x118>)
 800c6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f2:	095b      	lsrs	r3, r3, #5
 800c6f4:	f003 020f 	and.w	r2, r3, #15
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	440a      	add	r2, r1
 800c6fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c700:	bf00      	nop
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	40013800 	.word	0x40013800
 800c70c:	51eb851f 	.word	0x51eb851f

0800c710 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	4638      	mov	r0, r7
 800c71a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	bc80      	pop	{r7}
 800c728:	4770      	bx	lr

0800c72a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b085      	sub	sp, #20
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c732:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c736:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c73e:	b29a      	uxth	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	b29b      	uxth	r3, r3
 800c744:	43db      	mvns	r3, r3
 800c746:	b29b      	uxth	r3, r3
 800c748:	4013      	ands	r3, r2
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	bc80      	pop	{r7}
 800c75c:	4770      	bx	lr

0800c75e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800c75e:	b480      	push	{r7}
 800c760:	b083      	sub	sp, #12
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	460b      	mov	r3, r1
 800c768:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	bc80      	pop	{r7}
 800c774:	4770      	bx	lr

0800c776 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c776:	b480      	push	{r7}
 800c778:	b085      	sub	sp, #20
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	4638      	mov	r0, r7
 800c780:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2201      	movs	r2, #1
 800c788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2200      	movs	r2, #0
 800c790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2200      	movs	r2, #0
 800c798:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3714      	adds	r7, #20
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bc80      	pop	{r7}
 800c7ae:	4770      	bx	lr

0800c7b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b0c2      	sub	sp, #264	; 0x108
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	1d3b      	adds	r3, r7, #4
 800c7b8:	6018      	str	r0, [r3, #0]
 800c7ba:	463b      	mov	r3, r7
 800c7bc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c7be:	463b      	mov	r3, r7
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	785b      	ldrb	r3, [r3, #1]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	f040 8545 	bne.w	800d254 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c7ca:	463b      	mov	r3, r7
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	699a      	ldr	r2, [r3, #24]
 800c7d0:	463b      	mov	r3, r7
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d905      	bls.n	800c7e6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800c7da:	463b      	mov	r3, r7
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c7e4:	e004      	b.n	800c7f0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800c7e6:	463b      	mov	r3, r7
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c7f0:	463b      	mov	r3, r7
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	7b1b      	ldrb	r3, [r3, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d128      	bne.n	800c84c <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c7fa:	463b      	mov	r3, r7
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6959      	ldr	r1, [r3, #20]
 800c800:	463b      	mov	r3, r7
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	88da      	ldrh	r2, [r3, #6]
 800c806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	1d38      	adds	r0, r7, #4
 800c80e:	6800      	ldr	r0, [r0, #0]
 800c810:	f001 f946 	bl	800daa0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c814:	1d3b      	adds	r3, r7, #4
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	613b      	str	r3, [r7, #16]
 800c81a:	1d3b      	adds	r3, r7, #4
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c822:	b29b      	uxth	r3, r3
 800c824:	461a      	mov	r2, r3
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	4413      	add	r3, r2
 800c82a:	613b      	str	r3, [r7, #16]
 800c82c:	463b      	mov	r3, r7
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	011a      	lsls	r2, r3, #4
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	4413      	add	r3, r2
 800c838:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c83c:	60fb      	str	r3, [r7, #12]
 800c83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c842:	b29a      	uxth	r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	801a      	strh	r2, [r3, #0]
 800c848:	f000 bcdb 	b.w	800d202 <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c84c:	463b      	mov	r3, r7
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	78db      	ldrb	r3, [r3, #3]
 800c852:	2b02      	cmp	r3, #2
 800c854:	f040 836f 	bne.w	800cf36 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c858:	463b      	mov	r3, r7
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	6a1a      	ldr	r2, [r3, #32]
 800c85e:	463b      	mov	r3, r7
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	691b      	ldr	r3, [r3, #16]
 800c864:	429a      	cmp	r2, r3
 800c866:	f240 8313 	bls.w	800ce90 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c86a:	1d3b      	adds	r3, r7, #4
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	463b      	mov	r3, r7
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c884:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c888:	1d3b      	adds	r3, r7, #4
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	463b      	mov	r3, r7
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	441a      	add	r2, r3
 800c896:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c89a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c89e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c8a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c8ae:	463b      	mov	r3, r7
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	6a1a      	ldr	r2, [r3, #32]
 800c8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8b8:	1ad2      	subs	r2, r2, r3
 800c8ba:	463b      	mov	r3, r7
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c8c0:	1d3b      	adds	r3, r7, #4
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	463b      	mov	r3, r7
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	881b      	ldrh	r3, [r3, #0]
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 816d 	beq.w	800cbb6 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c8dc:	1d3b      	adds	r3, r7, #4
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	633b      	str	r3, [r7, #48]	; 0x30
 800c8e2:	463b      	mov	r3, r7
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	785b      	ldrb	r3, [r3, #1]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d16e      	bne.n	800c9ca <USB_EPStartXfer+0x21a>
 800c8ec:	1d3b      	adds	r3, r7, #4
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8f2:	1d3b      	adds	r3, r7, #4
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	4413      	add	r3, r2
 800c902:	62bb      	str	r3, [r7, #40]	; 0x28
 800c904:	463b      	mov	r3, r7
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	011a      	lsls	r2, r3, #4
 800c90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90e:	4413      	add	r3, r2
 800c910:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c914:	627b      	str	r3, [r7, #36]	; 0x24
 800c916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c920:	b29a      	uxth	r2, r3
 800c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c924:	801a      	strh	r2, [r3, #0]
 800c926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c92a:	2b3e      	cmp	r3, #62	; 0x3e
 800c92c:	d921      	bls.n	800c972 <USB_EPStartXfer+0x1c2>
 800c92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c932:	095b      	lsrs	r3, r3, #5
 800c934:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c93c:	f003 031f 	and.w	r3, r3, #31
 800c940:	2b00      	cmp	r3, #0
 800c942:	d104      	bne.n	800c94e <USB_EPStartXfer+0x19e>
 800c944:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c948:	3b01      	subs	r3, #1
 800c94a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c950:	881b      	ldrh	r3, [r3, #0]
 800c952:	b29a      	uxth	r2, r3
 800c954:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c958:	b29b      	uxth	r3, r3
 800c95a:	029b      	lsls	r3, r3, #10
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	4313      	orrs	r3, r2
 800c960:	b29b      	uxth	r3, r3
 800c962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	801a      	strh	r2, [r3, #0]
 800c970:	e047      	b.n	800ca02 <USB_EPStartXfer+0x252>
 800c972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10a      	bne.n	800c990 <USB_EPStartXfer+0x1e0>
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	b29b      	uxth	r3, r3
 800c980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c988:	b29a      	uxth	r2, r3
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	801a      	strh	r2, [r3, #0]
 800c98e:	e038      	b.n	800ca02 <USB_EPStartXfer+0x252>
 800c990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c994:	085b      	lsrs	r3, r3, #1
 800c996:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d004      	beq.n	800c9b0 <USB_EPStartXfer+0x200>
 800c9a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	881b      	ldrh	r3, [r3, #0]
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	029b      	lsls	r3, r3, #10
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	801a      	strh	r2, [r3, #0]
 800c9c8:	e01b      	b.n	800ca02 <USB_EPStartXfer+0x252>
 800c9ca:	463b      	mov	r3, r7
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	785b      	ldrb	r3, [r3, #1]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d116      	bne.n	800ca02 <USB_EPStartXfer+0x252>
 800c9d4:	1d3b      	adds	r3, r7, #4
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	461a      	mov	r2, r3
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e2:	4413      	add	r3, r2
 800c9e4:	633b      	str	r3, [r7, #48]	; 0x30
 800c9e6:	463b      	mov	r3, r7
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	011a      	lsls	r2, r3, #4
 800c9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ca02:	463b      	mov	r3, r7
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	895b      	ldrh	r3, [r3, #10]
 800ca08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca0c:	463b      	mov	r3, r7
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6959      	ldr	r1, [r3, #20]
 800ca12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ca1c:	1d38      	adds	r0, r7, #4
 800ca1e:	6800      	ldr	r0, [r0, #0]
 800ca20:	f001 f83e 	bl	800daa0 <USB_WritePMA>
            ep->xfer_buff += len;
 800ca24:	463b      	mov	r3, r7
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	695a      	ldr	r2, [r3, #20]
 800ca2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca2e:	441a      	add	r2, r3
 800ca30:	463b      	mov	r3, r7
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ca36:	463b      	mov	r3, r7
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	6a1a      	ldr	r2, [r3, #32]
 800ca3c:	463b      	mov	r3, r7
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d909      	bls.n	800ca5a <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 800ca46:	463b      	mov	r3, r7
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	6a1a      	ldr	r2, [r3, #32]
 800ca4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca50:	1ad2      	subs	r2, r2, r3
 800ca52:	463b      	mov	r3, r7
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	621a      	str	r2, [r3, #32]
 800ca58:	e008      	b.n	800ca6c <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 800ca5a:	463b      	mov	r3, r7
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	6a1b      	ldr	r3, [r3, #32]
 800ca60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ca64:	463b      	mov	r3, r7
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ca6c:	463b      	mov	r3, r7
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	785b      	ldrb	r3, [r3, #1]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d16e      	bne.n	800cb54 <USB_EPStartXfer+0x3a4>
 800ca76:	1d3b      	adds	r3, r7, #4
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	61bb      	str	r3, [r7, #24]
 800ca7c:	1d3b      	adds	r3, r7, #4
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	461a      	mov	r2, r3
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	61bb      	str	r3, [r7, #24]
 800ca8e:	463b      	mov	r3, r7
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	011a      	lsls	r2, r3, #4
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	4413      	add	r3, r2
 800ca9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ca9e:	617b      	str	r3, [r7, #20]
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	881b      	ldrh	r3, [r3, #0]
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800caaa:	b29a      	uxth	r2, r3
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	801a      	strh	r2, [r3, #0]
 800cab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cab4:	2b3e      	cmp	r3, #62	; 0x3e
 800cab6:	d921      	bls.n	800cafc <USB_EPStartXfer+0x34c>
 800cab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cabc:	095b      	lsrs	r3, r3, #5
 800cabe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cac6:	f003 031f 	and.w	r3, r3, #31
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d104      	bne.n	800cad8 <USB_EPStartXfer+0x328>
 800cace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cad2:	3b01      	subs	r3, #1
 800cad4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	881b      	ldrh	r3, [r3, #0]
 800cadc:	b29a      	uxth	r2, r3
 800cade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	029b      	lsls	r3, r3, #10
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	4313      	orrs	r3, r2
 800caea:	b29b      	uxth	r3, r3
 800caec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	801a      	strh	r2, [r3, #0]
 800cafa:	e04a      	b.n	800cb92 <USB_EPStartXfer+0x3e2>
 800cafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <USB_EPStartXfer+0x36a>
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	801a      	strh	r2, [r3, #0]
 800cb18:	e03b      	b.n	800cb92 <USB_EPStartXfer+0x3e2>
 800cb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb1e:	085b      	lsrs	r3, r3, #1
 800cb20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb28:	f003 0301 	and.w	r3, r3, #1
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d004      	beq.n	800cb3a <USB_EPStartXfer+0x38a>
 800cb30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb34:	3301      	adds	r3, #1
 800cb36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	881b      	ldrh	r3, [r3, #0]
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	029b      	lsls	r3, r3, #10
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	801a      	strh	r2, [r3, #0]
 800cb52:	e01e      	b.n	800cb92 <USB_EPStartXfer+0x3e2>
 800cb54:	463b      	mov	r3, r7
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	785b      	ldrb	r3, [r3, #1]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d119      	bne.n	800cb92 <USB_EPStartXfer+0x3e2>
 800cb5e:	1d3b      	adds	r3, r7, #4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	623b      	str	r3, [r7, #32]
 800cb64:	1d3b      	adds	r3, r7, #4
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	461a      	mov	r2, r3
 800cb70:	6a3b      	ldr	r3, [r7, #32]
 800cb72:	4413      	add	r3, r2
 800cb74:	623b      	str	r3, [r7, #32]
 800cb76:	463b      	mov	r3, r7
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	011a      	lsls	r2, r3, #4
 800cb7e:	6a3b      	ldr	r3, [r7, #32]
 800cb80:	4413      	add	r3, r2
 800cb82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cb86:	61fb      	str	r3, [r7, #28]
 800cb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cb92:	463b      	mov	r3, r7
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	891b      	ldrh	r3, [r3, #8]
 800cb98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb9c:	463b      	mov	r3, r7
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6959      	ldr	r1, [r3, #20]
 800cba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cbac:	1d38      	adds	r0, r7, #4
 800cbae:	6800      	ldr	r0, [r0, #0]
 800cbb0:	f000 ff76 	bl	800daa0 <USB_WritePMA>
 800cbb4:	e325      	b.n	800d202 <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cbb6:	463b      	mov	r3, r7
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	785b      	ldrb	r3, [r3, #1]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d16e      	bne.n	800cc9e <USB_EPStartXfer+0x4ee>
 800cbc0:	1d3b      	adds	r3, r7, #4
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbc6:	1d3b      	adds	r3, r7, #4
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbd4:	4413      	add	r3, r2
 800cbd6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbd8:	463b      	mov	r3, r7
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	011a      	lsls	r2, r3, #4
 800cbe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cbe8:	647b      	str	r3, [r7, #68]	; 0x44
 800cbea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbf8:	801a      	strh	r2, [r3, #0]
 800cbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbfe:	2b3e      	cmp	r3, #62	; 0x3e
 800cc00:	d921      	bls.n	800cc46 <USB_EPStartXfer+0x496>
 800cc02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc06:	095b      	lsrs	r3, r3, #5
 800cc08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc10:	f003 031f 	and.w	r3, r3, #31
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d104      	bne.n	800cc22 <USB_EPStartXfer+0x472>
 800cc18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cc22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	b29a      	uxth	r2, r3
 800cc28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	029b      	lsls	r3, r3, #10
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	4313      	orrs	r3, r2
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc42:	801a      	strh	r2, [r3, #0]
 800cc44:	e04a      	b.n	800ccdc <USB_EPStartXfer+0x52c>
 800cc46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10a      	bne.n	800cc64 <USB_EPStartXfer+0x4b4>
 800cc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc50:	881b      	ldrh	r3, [r3, #0]
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc60:	801a      	strh	r2, [r3, #0]
 800cc62:	e03b      	b.n	800ccdc <USB_EPStartXfer+0x52c>
 800cc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc68:	085b      	lsrs	r3, r3, #1
 800cc6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d004      	beq.n	800cc84 <USB_EPStartXfer+0x4d4>
 800cc7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cc7e:	3301      	adds	r3, #1
 800cc80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cc84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	029b      	lsls	r3, r3, #10
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	4313      	orrs	r3, r2
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc9a:	801a      	strh	r2, [r3, #0]
 800cc9c:	e01e      	b.n	800ccdc <USB_EPStartXfer+0x52c>
 800cc9e:	463b      	mov	r3, r7
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	785b      	ldrb	r3, [r3, #1]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d119      	bne.n	800ccdc <USB_EPStartXfer+0x52c>
 800cca8:	1d3b      	adds	r3, r7, #4
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	653b      	str	r3, [r7, #80]	; 0x50
 800ccae:	1d3b      	adds	r3, r7, #4
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	461a      	mov	r2, r3
 800ccba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccbc:	4413      	add	r3, r2
 800ccbe:	653b      	str	r3, [r7, #80]	; 0x50
 800ccc0:	463b      	mov	r3, r7
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	011a      	lsls	r2, r3, #4
 800ccc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccca:	4413      	add	r3, r2
 800cccc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ccd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ccdc:	463b      	mov	r3, r7
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	891b      	ldrh	r3, [r3, #8]
 800cce2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cce6:	463b      	mov	r3, r7
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	6959      	ldr	r1, [r3, #20]
 800ccec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ccf6:	1d38      	adds	r0, r7, #4
 800ccf8:	6800      	ldr	r0, [r0, #0]
 800ccfa:	f000 fed1 	bl	800daa0 <USB_WritePMA>
            ep->xfer_buff += len;
 800ccfe:	463b      	mov	r3, r7
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	695a      	ldr	r2, [r3, #20]
 800cd04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd08:	441a      	add	r2, r3
 800cd0a:	463b      	mov	r3, r7
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cd10:	463b      	mov	r3, r7
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6a1a      	ldr	r2, [r3, #32]
 800cd16:	463b      	mov	r3, r7
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d909      	bls.n	800cd34 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 800cd20:	463b      	mov	r3, r7
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6a1a      	ldr	r2, [r3, #32]
 800cd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd2a:	1ad2      	subs	r2, r2, r3
 800cd2c:	463b      	mov	r3, r7
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	621a      	str	r2, [r3, #32]
 800cd32:	e008      	b.n	800cd46 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 800cd34:	463b      	mov	r3, r7
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800cd3e:	463b      	mov	r3, r7
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2200      	movs	r2, #0
 800cd44:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cd46:	1d3b      	adds	r3, r7, #4
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	643b      	str	r3, [r7, #64]	; 0x40
 800cd4c:	463b      	mov	r3, r7
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	785b      	ldrb	r3, [r3, #1]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d16e      	bne.n	800ce34 <USB_EPStartXfer+0x684>
 800cd56:	1d3b      	adds	r3, r7, #4
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd5c:	1d3b      	adds	r3, r7, #4
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	461a      	mov	r2, r3
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	4413      	add	r3, r2
 800cd6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd6e:	463b      	mov	r3, r7
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	011a      	lsls	r2, r3, #4
 800cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd78:	4413      	add	r3, r2
 800cd7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cd7e:	637b      	str	r3, [r7, #52]	; 0x34
 800cd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd82:	881b      	ldrh	r3, [r3, #0]
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8e:	801a      	strh	r2, [r3, #0]
 800cd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd94:	2b3e      	cmp	r3, #62	; 0x3e
 800cd96:	d921      	bls.n	800cddc <USB_EPStartXfer+0x62c>
 800cd98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd9c:	095b      	lsrs	r3, r3, #5
 800cd9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cda2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cda6:	f003 031f 	and.w	r3, r3, #31
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d104      	bne.n	800cdb8 <USB_EPStartXfer+0x608>
 800cdae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdb2:	3b01      	subs	r3, #1
 800cdb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdba:	881b      	ldrh	r3, [r3, #0]
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	029b      	lsls	r3, r3, #10
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd8:	801a      	strh	r2, [r3, #0]
 800cdda:	e047      	b.n	800ce6c <USB_EPStartXfer+0x6bc>
 800cddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10a      	bne.n	800cdfa <USB_EPStartXfer+0x64a>
 800cde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde6:	881b      	ldrh	r3, [r3, #0]
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf6:	801a      	strh	r2, [r3, #0]
 800cdf8:	e038      	b.n	800ce6c <USB_EPStartXfer+0x6bc>
 800cdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdfe:	085b      	lsrs	r3, r3, #1
 800ce00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ce04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce08:	f003 0301 	and.w	r3, r3, #1
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d004      	beq.n	800ce1a <USB_EPStartXfer+0x66a>
 800ce10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce14:	3301      	adds	r3, #1
 800ce16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ce1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1c:	881b      	ldrh	r3, [r3, #0]
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	029b      	lsls	r3, r3, #10
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce30:	801a      	strh	r2, [r3, #0]
 800ce32:	e01b      	b.n	800ce6c <USB_EPStartXfer+0x6bc>
 800ce34:	463b      	mov	r3, r7
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	785b      	ldrb	r3, [r3, #1]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d116      	bne.n	800ce6c <USB_EPStartXfer+0x6bc>
 800ce3e:	1d3b      	adds	r3, r7, #4
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	461a      	mov	r2, r3
 800ce4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce4c:	4413      	add	r3, r2
 800ce4e:	643b      	str	r3, [r7, #64]	; 0x40
 800ce50:	463b      	mov	r3, r7
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	011a      	lsls	r2, r3, #4
 800ce58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ce60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ce6c:	463b      	mov	r3, r7
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	895b      	ldrh	r3, [r3, #10]
 800ce72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce76:	463b      	mov	r3, r7
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	6959      	ldr	r1, [r3, #20]
 800ce7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ce86:	1d38      	adds	r0, r7, #4
 800ce88:	6800      	ldr	r0, [r0, #0]
 800ce8a:	f000 fe09 	bl	800daa0 <USB_WritePMA>
 800ce8e:	e1b8      	b.n	800d202 <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ce90:	463b      	mov	r3, r7
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	6a1b      	ldr	r3, [r3, #32]
 800ce96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ce9a:	1d3b      	adds	r3, r7, #4
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	463b      	mov	r3, r7
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4413      	add	r3, r2
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ceb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceb4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ceb8:	1d3b      	adds	r3, r7, #4
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	463b      	mov	r3, r7
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	441a      	add	r2, r3
 800cec6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ceca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ced2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ced6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cede:	1d3b      	adds	r3, r7, #4
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cee4:	1d3b      	adds	r3, r7, #4
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	461a      	mov	r2, r3
 800cef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cef2:	4413      	add	r3, r2
 800cef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cef6:	463b      	mov	r3, r7
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	011a      	lsls	r2, r3, #4
 800cefe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf00:	4413      	add	r3, r2
 800cf02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cf06:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cf12:	463b      	mov	r3, r7
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	891b      	ldrh	r3, [r3, #8]
 800cf18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf1c:	463b      	mov	r3, r7
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6959      	ldr	r1, [r3, #20]
 800cf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cf2c:	1d38      	adds	r0, r7, #4
 800cf2e:	6800      	ldr	r0, [r0, #0]
 800cf30:	f000 fdb6 	bl	800daa0 <USB_WritePMA>
 800cf34:	e165      	b.n	800d202 <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cf36:	463b      	mov	r3, r7
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6a1a      	ldr	r2, [r3, #32]
 800cf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf40:	1ad2      	subs	r2, r2, r3
 800cf42:	463b      	mov	r3, r7
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cf48:	1d3b      	adds	r3, r7, #4
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	463b      	mov	r3, r7
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	881b      	ldrh	r3, [r3, #0]
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 80a5 	beq.w	800d0ae <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cf64:	1d3b      	adds	r3, r7, #4
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	673b      	str	r3, [r7, #112]	; 0x70
 800cf6a:	463b      	mov	r3, r7
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	785b      	ldrb	r3, [r3, #1]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d16e      	bne.n	800d052 <USB_EPStartXfer+0x8a2>
 800cf74:	1d3b      	adds	r3, r7, #4
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf7a:	1d3b      	adds	r3, r7, #4
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	461a      	mov	r2, r3
 800cf86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf88:	4413      	add	r3, r2
 800cf8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf8c:	463b      	mov	r3, r7
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	011a      	lsls	r2, r3, #4
 800cf94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf96:	4413      	add	r3, r2
 800cf98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cf9c:	667b      	str	r3, [r7, #100]	; 0x64
 800cf9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfac:	801a      	strh	r2, [r3, #0]
 800cfae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfb2:	2b3e      	cmp	r3, #62	; 0x3e
 800cfb4:	d921      	bls.n	800cffa <USB_EPStartXfer+0x84a>
 800cfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfba:	095b      	lsrs	r3, r3, #5
 800cfbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfc4:	f003 031f 	and.w	r3, r3, #31
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d104      	bne.n	800cfd6 <USB_EPStartXfer+0x826>
 800cfcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cfd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfd8:	881b      	ldrh	r3, [r3, #0]
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	029b      	lsls	r3, r3, #10
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cff6:	801a      	strh	r2, [r3, #0]
 800cff8:	e047      	b.n	800d08a <USB_EPStartXfer+0x8da>
 800cffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10a      	bne.n	800d018 <USB_EPStartXfer+0x868>
 800d002:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d004:	881b      	ldrh	r3, [r3, #0]
 800d006:	b29b      	uxth	r3, r3
 800d008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d010:	b29a      	uxth	r2, r3
 800d012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d014:	801a      	strh	r2, [r3, #0]
 800d016:	e038      	b.n	800d08a <USB_EPStartXfer+0x8da>
 800d018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d01c:	085b      	lsrs	r3, r3, #1
 800d01e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d026:	f003 0301 	and.w	r3, r3, #1
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d004      	beq.n	800d038 <USB_EPStartXfer+0x888>
 800d02e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d032:	3301      	adds	r3, #1
 800d034:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d03a:	881b      	ldrh	r3, [r3, #0]
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d042:	b29b      	uxth	r3, r3
 800d044:	029b      	lsls	r3, r3, #10
 800d046:	b29b      	uxth	r3, r3
 800d048:	4313      	orrs	r3, r2
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d04e:	801a      	strh	r2, [r3, #0]
 800d050:	e01b      	b.n	800d08a <USB_EPStartXfer+0x8da>
 800d052:	463b      	mov	r3, r7
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	785b      	ldrb	r3, [r3, #1]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d116      	bne.n	800d08a <USB_EPStartXfer+0x8da>
 800d05c:	1d3b      	adds	r3, r7, #4
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d064:	b29b      	uxth	r3, r3
 800d066:	461a      	mov	r2, r3
 800d068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d06a:	4413      	add	r3, r2
 800d06c:	673b      	str	r3, [r7, #112]	; 0x70
 800d06e:	463b      	mov	r3, r7
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	011a      	lsls	r2, r3, #4
 800d076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d078:	4413      	add	r3, r2
 800d07a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d07e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d084:	b29a      	uxth	r2, r3
 800d086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d088:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d08a:	463b      	mov	r3, r7
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	895b      	ldrh	r3, [r3, #10]
 800d090:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d094:	463b      	mov	r3, r7
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6959      	ldr	r1, [r3, #20]
 800d09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d0a4:	1d38      	adds	r0, r7, #4
 800d0a6:	6800      	ldr	r0, [r0, #0]
 800d0a8:	f000 fcfa 	bl	800daa0 <USB_WritePMA>
 800d0ac:	e0a9      	b.n	800d202 <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d0ae:	463b      	mov	r3, r7
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	785b      	ldrb	r3, [r3, #1]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d16e      	bne.n	800d196 <USB_EPStartXfer+0x9e6>
 800d0b8:	1d3b      	adds	r3, r7, #4
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d0be:	1d3b      	adds	r3, r7, #4
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d0cc:	4413      	add	r3, r2
 800d0ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d0d0:	463b      	mov	r3, r7
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	011a      	lsls	r2, r3, #4
 800d0d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d0da:	4413      	add	r3, r2
 800d0dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d0e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800d0e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0e4:	881b      	ldrh	r3, [r3, #0]
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0f0:	801a      	strh	r2, [r3, #0]
 800d0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0f6:	2b3e      	cmp	r3, #62	; 0x3e
 800d0f8:	d921      	bls.n	800d13e <USB_EPStartXfer+0x98e>
 800d0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0fe:	095b      	lsrs	r3, r3, #5
 800d100:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d108:	f003 031f 	and.w	r3, r3, #31
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d104      	bne.n	800d11a <USB_EPStartXfer+0x96a>
 800d110:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d114:	3b01      	subs	r3, #1
 800d116:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d11a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	b29a      	uxth	r2, r3
 800d120:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d124:	b29b      	uxth	r3, r3
 800d126:	029b      	lsls	r3, r3, #10
 800d128:	b29b      	uxth	r3, r3
 800d12a:	4313      	orrs	r3, r2
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d136:	b29a      	uxth	r2, r3
 800d138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d13a:	801a      	strh	r2, [r3, #0]
 800d13c:	e050      	b.n	800d1e0 <USB_EPStartXfer+0xa30>
 800d13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10a      	bne.n	800d15c <USB_EPStartXfer+0x9ac>
 800d146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d148:	881b      	ldrh	r3, [r3, #0]
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d154:	b29a      	uxth	r2, r3
 800d156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d158:	801a      	strh	r2, [r3, #0]
 800d15a:	e041      	b.n	800d1e0 <USB_EPStartXfer+0xa30>
 800d15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d160:	085b      	lsrs	r3, r3, #1
 800d162:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d16a:	f003 0301 	and.w	r3, r3, #1
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d004      	beq.n	800d17c <USB_EPStartXfer+0x9cc>
 800d172:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d176:	3301      	adds	r3, #1
 800d178:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d17c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	b29a      	uxth	r2, r3
 800d182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d186:	b29b      	uxth	r3, r3
 800d188:	029b      	lsls	r3, r3, #10
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	4313      	orrs	r3, r2
 800d18e:	b29a      	uxth	r2, r3
 800d190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d192:	801a      	strh	r2, [r3, #0]
 800d194:	e024      	b.n	800d1e0 <USB_EPStartXfer+0xa30>
 800d196:	463b      	mov	r3, r7
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	785b      	ldrb	r3, [r3, #1]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d11f      	bne.n	800d1e0 <USB_EPStartXfer+0xa30>
 800d1a0:	1d3b      	adds	r3, r7, #4
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d1a8:	1d3b      	adds	r3, r7, #4
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d1be:	463b      	mov	r3, r7
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	011a      	lsls	r2, r3, #4
 800d1c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d1d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d1de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d1e0:	463b      	mov	r3, r7
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	891b      	ldrh	r3, [r3, #8]
 800d1e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1ea:	463b      	mov	r3, r7
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6959      	ldr	r1, [r3, #20]
 800d1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d1fa:	1d38      	adds	r0, r7, #4
 800d1fc:	6800      	ldr	r0, [r0, #0]
 800d1fe:	f000 fc4f 	bl	800daa0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d202:	1d3b      	adds	r3, r7, #4
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	463b      	mov	r3, r7
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	4413      	add	r3, r2
 800d210:	881b      	ldrh	r3, [r3, #0]
 800d212:	b29b      	uxth	r3, r3
 800d214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d21c:	817b      	strh	r3, [r7, #10]
 800d21e:	897b      	ldrh	r3, [r7, #10]
 800d220:	f083 0310 	eor.w	r3, r3, #16
 800d224:	817b      	strh	r3, [r7, #10]
 800d226:	897b      	ldrh	r3, [r7, #10]
 800d228:	f083 0320 	eor.w	r3, r3, #32
 800d22c:	817b      	strh	r3, [r7, #10]
 800d22e:	1d3b      	adds	r3, r7, #4
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	463b      	mov	r3, r7
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	441a      	add	r2, r3
 800d23c:	897b      	ldrh	r3, [r7, #10]
 800d23e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d24a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d24e:	b29b      	uxth	r3, r3
 800d250:	8013      	strh	r3, [r2, #0]
 800d252:	e3f3      	b.n	800da3c <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d254:	463b      	mov	r3, r7
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	7b1b      	ldrb	r3, [r3, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f040 809c 	bne.w	800d398 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d260:	463b      	mov	r3, r7
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	699a      	ldr	r2, [r3, #24]
 800d266:	463b      	mov	r3, r7
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d90e      	bls.n	800d28e <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 800d270:	463b      	mov	r3, r7
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800d27a:	463b      	mov	r3, r7
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	699a      	ldr	r2, [r3, #24]
 800d280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d284:	1ad2      	subs	r2, r2, r3
 800d286:	463b      	mov	r3, r7
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	619a      	str	r2, [r3, #24]
 800d28c:	e008      	b.n	800d2a0 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 800d28e:	463b      	mov	r3, r7
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800d298:	463b      	mov	r3, r7
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2200      	movs	r2, #0
 800d29e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d2a0:	1d3b      	adds	r3, r7, #4
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d2a8:	1d3b      	adds	r3, r7, #4
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d2b8:	4413      	add	r3, r2
 800d2ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d2be:	463b      	mov	r3, r7
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	011a      	lsls	r2, r3, #4
 800d2c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d2d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d2d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2e6:	801a      	strh	r2, [r3, #0]
 800d2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2ec:	2b3e      	cmp	r3, #62	; 0x3e
 800d2ee:	d923      	bls.n	800d338 <USB_EPStartXfer+0xb88>
 800d2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2f4:	095b      	lsrs	r3, r3, #5
 800d2f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2fe:	f003 031f 	and.w	r3, r3, #31
 800d302:	2b00      	cmp	r3, #0
 800d304:	d104      	bne.n	800d310 <USB_EPStartXfer+0xb60>
 800d306:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d30a:	3b01      	subs	r3, #1
 800d30c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d314:	881b      	ldrh	r3, [r3, #0]
 800d316:	b29a      	uxth	r2, r3
 800d318:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	029b      	lsls	r3, r3, #10
 800d320:	b29b      	uxth	r3, r3
 800d322:	4313      	orrs	r3, r2
 800d324:	b29b      	uxth	r3, r3
 800d326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d32a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d32e:	b29a      	uxth	r2, r3
 800d330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d334:	801a      	strh	r2, [r3, #0]
 800d336:	e353      	b.n	800d9e0 <USB_EPStartXfer+0x1230>
 800d338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10c      	bne.n	800d35a <USB_EPStartXfer+0xbaa>
 800d340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d344:	881b      	ldrh	r3, [r3, #0]
 800d346:	b29b      	uxth	r3, r3
 800d348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d34c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d350:	b29a      	uxth	r2, r3
 800d352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d356:	801a      	strh	r2, [r3, #0]
 800d358:	e342      	b.n	800d9e0 <USB_EPStartXfer+0x1230>
 800d35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d35e:	085b      	lsrs	r3, r3, #1
 800d360:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d368:	f003 0301 	and.w	r3, r3, #1
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d004      	beq.n	800d37a <USB_EPStartXfer+0xbca>
 800d370:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d374:	3301      	adds	r3, #1
 800d376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d37a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	b29a      	uxth	r2, r3
 800d382:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d386:	b29b      	uxth	r3, r3
 800d388:	029b      	lsls	r3, r3, #10
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	4313      	orrs	r3, r2
 800d38e:	b29a      	uxth	r2, r3
 800d390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d394:	801a      	strh	r2, [r3, #0]
 800d396:	e323      	b.n	800d9e0 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d398:	463b      	mov	r3, r7
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	78db      	ldrb	r3, [r3, #3]
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	f040 81a9 	bne.w	800d6f6 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d3a4:	463b      	mov	r3, r7
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	785b      	ldrb	r3, [r3, #1]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f040 8082 	bne.w	800d4b4 <USB_EPStartXfer+0xd04>
 800d3b0:	1d3b      	adds	r3, r7, #4
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d3b8:	1d3b      	adds	r3, r7, #4
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3c8:	4413      	add	r3, r2
 800d3ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d3ce:	463b      	mov	r3, r7
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	011a      	lsls	r2, r3, #4
 800d3d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3da:	4413      	add	r3, r2
 800d3dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d3e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d3e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3e8:	881b      	ldrh	r3, [r3, #0]
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3f6:	801a      	strh	r2, [r3, #0]
 800d3f8:	463b      	mov	r3, r7
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	691b      	ldr	r3, [r3, #16]
 800d3fe:	2b3e      	cmp	r3, #62	; 0x3e
 800d400:	d925      	bls.n	800d44e <USB_EPStartXfer+0xc9e>
 800d402:	463b      	mov	r3, r7
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	095b      	lsrs	r3, r3, #5
 800d40a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d40e:	463b      	mov	r3, r7
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	691b      	ldr	r3, [r3, #16]
 800d414:	f003 031f 	and.w	r3, r3, #31
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d104      	bne.n	800d426 <USB_EPStartXfer+0xc76>
 800d41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d420:	3b01      	subs	r3, #1
 800d422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d42a:	881b      	ldrh	r3, [r3, #0]
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d432:	b29b      	uxth	r3, r3
 800d434:	029b      	lsls	r3, r3, #10
 800d436:	b29b      	uxth	r3, r3
 800d438:	4313      	orrs	r3, r2
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d444:	b29a      	uxth	r2, r3
 800d446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d44a:	801a      	strh	r2, [r3, #0]
 800d44c:	e058      	b.n	800d500 <USB_EPStartXfer+0xd50>
 800d44e:	463b      	mov	r3, r7
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	691b      	ldr	r3, [r3, #16]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10c      	bne.n	800d472 <USB_EPStartXfer+0xcc2>
 800d458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d45c:	881b      	ldrh	r3, [r3, #0]
 800d45e:	b29b      	uxth	r3, r3
 800d460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d468:	b29a      	uxth	r2, r3
 800d46a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d46e:	801a      	strh	r2, [r3, #0]
 800d470:	e046      	b.n	800d500 <USB_EPStartXfer+0xd50>
 800d472:	463b      	mov	r3, r7
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	691b      	ldr	r3, [r3, #16]
 800d478:	085b      	lsrs	r3, r3, #1
 800d47a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d47e:	463b      	mov	r3, r7
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	f003 0301 	and.w	r3, r3, #1
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d004      	beq.n	800d496 <USB_EPStartXfer+0xce6>
 800d48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d490:	3301      	adds	r3, #1
 800d492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d49a:	881b      	ldrh	r3, [r3, #0]
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	029b      	lsls	r3, r3, #10
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d4b0:	801a      	strh	r2, [r3, #0]
 800d4b2:	e025      	b.n	800d500 <USB_EPStartXfer+0xd50>
 800d4b4:	463b      	mov	r3, r7
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	785b      	ldrb	r3, [r3, #1]
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d120      	bne.n	800d500 <USB_EPStartXfer+0xd50>
 800d4be:	1d3b      	adds	r3, r7, #4
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d4c6:	1d3b      	adds	r3, r7, #4
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d4dc:	463b      	mov	r3, r7
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	011a      	lsls	r2, r3, #4
 800d4e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d4ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d4f2:	463b      	mov	r3, r7
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d4fe:	801a      	strh	r2, [r3, #0]
 800d500:	1d3b      	adds	r3, r7, #4
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d508:	463b      	mov	r3, r7
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	785b      	ldrb	r3, [r3, #1]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f040 8082 	bne.w	800d618 <USB_EPStartXfer+0xe68>
 800d514:	1d3b      	adds	r3, r7, #4
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d51c:	1d3b      	adds	r3, r7, #4
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d524:	b29b      	uxth	r3, r3
 800d526:	461a      	mov	r2, r3
 800d528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d52c:	4413      	add	r3, r2
 800d52e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d532:	463b      	mov	r3, r7
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	011a      	lsls	r2, r3, #4
 800d53a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d53e:	4413      	add	r3, r2
 800d540:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d54c:	881b      	ldrh	r3, [r3, #0]
 800d54e:	b29b      	uxth	r3, r3
 800d550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d554:	b29a      	uxth	r2, r3
 800d556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d55a:	801a      	strh	r2, [r3, #0]
 800d55c:	463b      	mov	r3, r7
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	2b3e      	cmp	r3, #62	; 0x3e
 800d564:	d925      	bls.n	800d5b2 <USB_EPStartXfer+0xe02>
 800d566:	463b      	mov	r3, r7
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	095b      	lsrs	r3, r3, #5
 800d56e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d572:	463b      	mov	r3, r7
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	f003 031f 	and.w	r3, r3, #31
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d104      	bne.n	800d58a <USB_EPStartXfer+0xdda>
 800d580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d584:	3b01      	subs	r3, #1
 800d586:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d58a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	b29a      	uxth	r2, r3
 800d592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d596:	b29b      	uxth	r3, r3
 800d598:	029b      	lsls	r3, r3, #10
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	4313      	orrs	r3, r2
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5ae:	801a      	strh	r2, [r3, #0]
 800d5b0:	e054      	b.n	800d65c <USB_EPStartXfer+0xeac>
 800d5b2:	463b      	mov	r3, r7
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d10c      	bne.n	800d5d6 <USB_EPStartXfer+0xe26>
 800d5bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5c0:	881b      	ldrh	r3, [r3, #0]
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5cc:	b29a      	uxth	r2, r3
 800d5ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5d2:	801a      	strh	r2, [r3, #0]
 800d5d4:	e042      	b.n	800d65c <USB_EPStartXfer+0xeac>
 800d5d6:	463b      	mov	r3, r7
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	085b      	lsrs	r3, r3, #1
 800d5de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d5e2:	463b      	mov	r3, r7
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d004      	beq.n	800d5fa <USB_EPStartXfer+0xe4a>
 800d5f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d5fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5fe:	881b      	ldrh	r3, [r3, #0]
 800d600:	b29a      	uxth	r2, r3
 800d602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d606:	b29b      	uxth	r3, r3
 800d608:	029b      	lsls	r3, r3, #10
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	4313      	orrs	r3, r2
 800d60e:	b29a      	uxth	r2, r3
 800d610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d614:	801a      	strh	r2, [r3, #0]
 800d616:	e021      	b.n	800d65c <USB_EPStartXfer+0xeac>
 800d618:	463b      	mov	r3, r7
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	785b      	ldrb	r3, [r3, #1]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d11c      	bne.n	800d65c <USB_EPStartXfer+0xeac>
 800d622:	1d3b      	adds	r3, r7, #4
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	461a      	mov	r2, r3
 800d62e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d632:	4413      	add	r3, r2
 800d634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d638:	463b      	mov	r3, r7
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	011a      	lsls	r2, r3, #4
 800d640:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d644:	4413      	add	r3, r2
 800d646:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d64a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d64e:	463b      	mov	r3, r7
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	691b      	ldr	r3, [r3, #16]
 800d654:	b29a      	uxth	r2, r3
 800d656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d65a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d65c:	463b      	mov	r3, r7
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	69db      	ldr	r3, [r3, #28]
 800d662:	2b00      	cmp	r3, #0
 800d664:	f000 81bc 	beq.w	800d9e0 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d668:	1d3b      	adds	r3, r7, #4
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	463b      	mov	r3, r7
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4413      	add	r3, r2
 800d676:	881b      	ldrh	r3, [r3, #0]
 800d678:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d67c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d684:	2b00      	cmp	r3, #0
 800d686:	d005      	beq.n	800d694 <USB_EPStartXfer+0xee4>
 800d688:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10d      	bne.n	800d6b0 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d694:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f040 819f 	bne.w	800d9e0 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d6a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f040 8198 	bne.w	800d9e0 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d6b0:	1d3b      	adds	r3, r7, #4
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	463b      	mov	r3, r7
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	4413      	add	r3, r2
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6ca:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d6ce:	1d3b      	adds	r3, r7, #4
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	463b      	mov	r3, r7
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	441a      	add	r2, r3
 800d6dc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d6e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	8013      	strh	r3, [r2, #0]
 800d6f4:	e174      	b.n	800d9e0 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	78db      	ldrb	r3, [r3, #3]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	f040 816d 	bne.w	800d9dc <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d702:	463b      	mov	r3, r7
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	699a      	ldr	r2, [r3, #24]
 800d708:	463b      	mov	r3, r7
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d90e      	bls.n	800d730 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800d712:	463b      	mov	r3, r7
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	691b      	ldr	r3, [r3, #16]
 800d718:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d71c:	463b      	mov	r3, r7
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	699a      	ldr	r2, [r3, #24]
 800d722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d726:	1ad2      	subs	r2, r2, r3
 800d728:	463b      	mov	r3, r7
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	619a      	str	r2, [r3, #24]
 800d72e:	e008      	b.n	800d742 <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 800d730:	463b      	mov	r3, r7
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	699b      	ldr	r3, [r3, #24]
 800d736:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d73a:	463b      	mov	r3, r7
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2200      	movs	r2, #0
 800d740:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d742:	463b      	mov	r3, r7
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	785b      	ldrb	r3, [r3, #1]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d17b      	bne.n	800d844 <USB_EPStartXfer+0x1094>
 800d74c:	1d3b      	adds	r3, r7, #4
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d754:	1d3b      	adds	r3, r7, #4
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	461a      	mov	r2, r3
 800d760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d764:	4413      	add	r3, r2
 800d766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d76a:	463b      	mov	r3, r7
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	011a      	lsls	r2, r3, #4
 800d772:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d776:	4413      	add	r3, r2
 800d778:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d77c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d780:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d784:	881b      	ldrh	r3, [r3, #0]
 800d786:	b29b      	uxth	r3, r3
 800d788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d792:	801a      	strh	r2, [r3, #0]
 800d794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d798:	2b3e      	cmp	r3, #62	; 0x3e
 800d79a:	d923      	bls.n	800d7e4 <USB_EPStartXfer+0x1034>
 800d79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7a0:	095b      	lsrs	r3, r3, #5
 800d7a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7aa:	f003 031f 	and.w	r3, r3, #31
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d104      	bne.n	800d7bc <USB_EPStartXfer+0x100c>
 800d7b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d7bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	029b      	lsls	r3, r3, #10
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d7e0:	801a      	strh	r2, [r3, #0]
 800d7e2:	e054      	b.n	800d88e <USB_EPStartXfer+0x10de>
 800d7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d10c      	bne.n	800d806 <USB_EPStartXfer+0x1056>
 800d7ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d802:	801a      	strh	r2, [r3, #0]
 800d804:	e043      	b.n	800d88e <USB_EPStartXfer+0x10de>
 800d806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d80a:	085b      	lsrs	r3, r3, #1
 800d80c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d814:	f003 0301 	and.w	r3, r3, #1
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d004      	beq.n	800d826 <USB_EPStartXfer+0x1076>
 800d81c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d820:	3301      	adds	r3, #1
 800d822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d832:	b29b      	uxth	r3, r3
 800d834:	029b      	lsls	r3, r3, #10
 800d836:	b29b      	uxth	r3, r3
 800d838:	4313      	orrs	r3, r2
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d840:	801a      	strh	r2, [r3, #0]
 800d842:	e024      	b.n	800d88e <USB_EPStartXfer+0x10de>
 800d844:	463b      	mov	r3, r7
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	785b      	ldrb	r3, [r3, #1]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d11f      	bne.n	800d88e <USB_EPStartXfer+0x10de>
 800d84e:	1d3b      	adds	r3, r7, #4
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d856:	1d3b      	adds	r3, r7, #4
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d85e:	b29b      	uxth	r3, r3
 800d860:	461a      	mov	r2, r3
 800d862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d866:	4413      	add	r3, r2
 800d868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d86c:	463b      	mov	r3, r7
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	011a      	lsls	r2, r3, #4
 800d874:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d878:	4413      	add	r3, r2
 800d87a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d87e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d886:	b29a      	uxth	r2, r3
 800d888:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d88c:	801a      	strh	r2, [r3, #0]
 800d88e:	1d3b      	adds	r3, r7, #4
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d896:	463b      	mov	r3, r7
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	785b      	ldrb	r3, [r3, #1]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d17b      	bne.n	800d998 <USB_EPStartXfer+0x11e8>
 800d8a0:	1d3b      	adds	r3, r7, #4
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d8a8:	1d3b      	adds	r3, r7, #4
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d8b8:	4413      	add	r3, r2
 800d8ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d8be:	463b      	mov	r3, r7
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	011a      	lsls	r2, r3, #4
 800d8c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d8ca:	4413      	add	r3, r2
 800d8cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d8d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d8d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d8d8:	881b      	ldrh	r3, [r3, #0]
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8e0:	b29a      	uxth	r2, r3
 800d8e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d8e6:	801a      	strh	r2, [r3, #0]
 800d8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8ec:	2b3e      	cmp	r3, #62	; 0x3e
 800d8ee:	d923      	bls.n	800d938 <USB_EPStartXfer+0x1188>
 800d8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8f4:	095b      	lsrs	r3, r3, #5
 800d8f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8fe:	f003 031f 	and.w	r3, r3, #31
 800d902:	2b00      	cmp	r3, #0
 800d904:	d104      	bne.n	800d910 <USB_EPStartXfer+0x1160>
 800d906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d90a:	3b01      	subs	r3, #1
 800d90c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d910:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	b29a      	uxth	r2, r3
 800d918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	029b      	lsls	r3, r3, #10
 800d920:	b29b      	uxth	r3, r3
 800d922:	4313      	orrs	r3, r2
 800d924:	b29b      	uxth	r3, r3
 800d926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d92a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d92e:	b29a      	uxth	r2, r3
 800d930:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d934:	801a      	strh	r2, [r3, #0]
 800d936:	e053      	b.n	800d9e0 <USB_EPStartXfer+0x1230>
 800d938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10c      	bne.n	800d95a <USB_EPStartXfer+0x11aa>
 800d940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d944:	881b      	ldrh	r3, [r3, #0]
 800d946:	b29b      	uxth	r3, r3
 800d948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d94c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d950:	b29a      	uxth	r2, r3
 800d952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d956:	801a      	strh	r2, [r3, #0]
 800d958:	e042      	b.n	800d9e0 <USB_EPStartXfer+0x1230>
 800d95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d95e:	085b      	lsrs	r3, r3, #1
 800d960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d968:	f003 0301 	and.w	r3, r3, #1
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d004      	beq.n	800d97a <USB_EPStartXfer+0x11ca>
 800d970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d974:	3301      	adds	r3, #1
 800d976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d97a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d97e:	881b      	ldrh	r3, [r3, #0]
 800d980:	b29a      	uxth	r2, r3
 800d982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d986:	b29b      	uxth	r3, r3
 800d988:	029b      	lsls	r3, r3, #10
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	4313      	orrs	r3, r2
 800d98e:	b29a      	uxth	r2, r3
 800d990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d994:	801a      	strh	r2, [r3, #0]
 800d996:	e023      	b.n	800d9e0 <USB_EPStartXfer+0x1230>
 800d998:	463b      	mov	r3, r7
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	785b      	ldrb	r3, [r3, #1]
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d11e      	bne.n	800d9e0 <USB_EPStartXfer+0x1230>
 800d9a2:	1d3b      	adds	r3, r7, #4
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d9b2:	4413      	add	r3, r2
 800d9b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d9b8:	463b      	mov	r3, r7
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	011a      	lsls	r2, r3, #4
 800d9c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d9c4:	4413      	add	r3, r2
 800d9c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d9ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d9d8:	801a      	strh	r2, [r3, #0]
 800d9da:	e001      	b.n	800d9e0 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e02e      	b.n	800da3e <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d9e0:	1d3b      	adds	r3, r7, #4
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	463b      	mov	r3, r7
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4413      	add	r3, r2
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d9f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9fa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d9fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800da02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800da06:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800da0a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800da0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800da12:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800da16:	1d3b      	adds	r3, r7, #4
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	463b      	mov	r3, r7
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	441a      	add	r2, r3
 800da24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800da28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da38:	b29b      	uxth	r3, r3
 800da3a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	460b      	mov	r3, r1
 800da52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800da54:	78fb      	ldrb	r3, [r7, #3]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d103      	bne.n	800da62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2280      	movs	r2, #128	; 0x80
 800da5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	bc80      	pop	{r7}
 800da6c:	4770      	bx	lr

0800da6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800da6e:	b480      	push	{r7}
 800da70:	b083      	sub	sp, #12
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bc80      	pop	{r7}
 800da80:	4770      	bx	lr

0800da82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800da82:	b480      	push	{r7}
 800da84:	b085      	sub	sp, #20
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800da90:	b29b      	uxth	r3, r3
 800da92:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800da94:	68fb      	ldr	r3, [r7, #12]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bc80      	pop	{r7}
 800da9e:	4770      	bx	lr

0800daa0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b08b      	sub	sp, #44	; 0x2c
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	4611      	mov	r1, r2
 800daac:	461a      	mov	r2, r3
 800daae:	460b      	mov	r3, r1
 800dab0:	80fb      	strh	r3, [r7, #6]
 800dab2:	4613      	mov	r3, r2
 800dab4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800dab6:	88bb      	ldrh	r3, [r7, #4]
 800dab8:	3301      	adds	r3, #1
 800daba:	085b      	lsrs	r3, r3, #1
 800dabc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dac6:	88fb      	ldrh	r3, [r7, #6]
 800dac8:	005a      	lsls	r2, r3, #1
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	4413      	add	r3, r2
 800dace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dad2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	627b      	str	r3, [r7, #36]	; 0x24
 800dad8:	e01e      	b.n	800db18 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	3301      	adds	r3, #1
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	021b      	lsls	r3, r3, #8
 800dae8:	b21a      	sxth	r2, r3
 800daea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800daee:	4313      	orrs	r3, r2
 800daf0:	b21b      	sxth	r3, r3
 800daf2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800daf4:	6a3b      	ldr	r3, [r7, #32]
 800daf6:	8a7a      	ldrh	r2, [r7, #18]
 800daf8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800dafa:	6a3b      	ldr	r3, [r7, #32]
 800dafc:	3302      	adds	r3, #2
 800dafe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	3302      	adds	r3, #2
 800db04:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	3301      	adds	r3, #1
 800db0a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	3301      	adds	r3, #1
 800db10:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800db12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db14:	3b01      	subs	r3, #1
 800db16:	627b      	str	r3, [r7, #36]	; 0x24
 800db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1dd      	bne.n	800dada <USB_WritePMA+0x3a>
  }
}
 800db1e:	bf00      	nop
 800db20:	bf00      	nop
 800db22:	372c      	adds	r7, #44	; 0x2c
 800db24:	46bd      	mov	sp, r7
 800db26:	bc80      	pop	{r7}
 800db28:	4770      	bx	lr

0800db2a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800db2a:	b480      	push	{r7}
 800db2c:	b08b      	sub	sp, #44	; 0x2c
 800db2e:	af00      	add	r7, sp, #0
 800db30:	60f8      	str	r0, [r7, #12]
 800db32:	60b9      	str	r1, [r7, #8]
 800db34:	4611      	mov	r1, r2
 800db36:	461a      	mov	r2, r3
 800db38:	460b      	mov	r3, r1
 800db3a:	80fb      	strh	r3, [r7, #6]
 800db3c:	4613      	mov	r3, r2
 800db3e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800db40:	88bb      	ldrh	r3, [r7, #4]
 800db42:	085b      	lsrs	r3, r3, #1
 800db44:	b29b      	uxth	r3, r3
 800db46:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800db50:	88fb      	ldrh	r3, [r7, #6]
 800db52:	005a      	lsls	r2, r3, #1
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	4413      	add	r3, r2
 800db58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db5c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	627b      	str	r3, [r7, #36]	; 0x24
 800db62:	e01b      	b.n	800db9c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	881b      	ldrh	r3, [r3, #0]
 800db68:	b29b      	uxth	r3, r3
 800db6a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800db6c:	6a3b      	ldr	r3, [r7, #32]
 800db6e:	3302      	adds	r3, #2
 800db70:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	b2da      	uxtb	r2, r3
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800db7a:	69fb      	ldr	r3, [r7, #28]
 800db7c:	3301      	adds	r3, #1
 800db7e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	0a1b      	lsrs	r3, r3, #8
 800db84:	b2da      	uxtb	r2, r3
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	3301      	adds	r3, #1
 800db8e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800db90:	6a3b      	ldr	r3, [r7, #32]
 800db92:	3302      	adds	r3, #2
 800db94:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800db96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db98:	3b01      	subs	r3, #1
 800db9a:	627b      	str	r3, [r7, #36]	; 0x24
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d1e0      	bne.n	800db64 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800dba2:	88bb      	ldrh	r3, [r7, #4]
 800dba4:	f003 0301 	and.w	r3, r3, #1
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d007      	beq.n	800dbbe <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800dbae:	6a3b      	ldr	r3, [r7, #32]
 800dbb0:	881b      	ldrh	r3, [r3, #0]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	701a      	strb	r2, [r3, #0]
  }
}
 800dbbe:	bf00      	nop
 800dbc0:	372c      	adds	r7, #44	; 0x2c
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bc80      	pop	{r7}
 800dbc6:	4770      	bx	lr

0800dbc8 <__assert_func>:
 800dbc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbca:	4614      	mov	r4, r2
 800dbcc:	461a      	mov	r2, r3
 800dbce:	4b09      	ldr	r3, [pc, #36]	; (800dbf4 <__assert_func+0x2c>)
 800dbd0:	4605      	mov	r5, r0
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68d8      	ldr	r0, [r3, #12]
 800dbd6:	b14c      	cbz	r4, 800dbec <__assert_func+0x24>
 800dbd8:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <__assert_func+0x30>)
 800dbda:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbde:	9100      	str	r1, [sp, #0]
 800dbe0:	462b      	mov	r3, r5
 800dbe2:	4906      	ldr	r1, [pc, #24]	; (800dbfc <__assert_func+0x34>)
 800dbe4:	f000 f814 	bl	800dc10 <fiprintf>
 800dbe8:	f000 fd48 	bl	800e67c <abort>
 800dbec:	4b04      	ldr	r3, [pc, #16]	; (800dc00 <__assert_func+0x38>)
 800dbee:	461c      	mov	r4, r3
 800dbf0:	e7f3      	b.n	800dbda <__assert_func+0x12>
 800dbf2:	bf00      	nop
 800dbf4:	20000074 	.word	0x20000074
 800dbf8:	0800f806 	.word	0x0800f806
 800dbfc:	0800f813 	.word	0x0800f813
 800dc00:	0800f841 	.word	0x0800f841

0800dc04 <__errno>:
 800dc04:	4b01      	ldr	r3, [pc, #4]	; (800dc0c <__errno+0x8>)
 800dc06:	6818      	ldr	r0, [r3, #0]
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	20000074 	.word	0x20000074

0800dc10 <fiprintf>:
 800dc10:	b40e      	push	{r1, r2, r3}
 800dc12:	b503      	push	{r0, r1, lr}
 800dc14:	4601      	mov	r1, r0
 800dc16:	ab03      	add	r3, sp, #12
 800dc18:	4805      	ldr	r0, [pc, #20]	; (800dc30 <fiprintf+0x20>)
 800dc1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc1e:	6800      	ldr	r0, [r0, #0]
 800dc20:	9301      	str	r3, [sp, #4]
 800dc22:	f000 f92d 	bl	800de80 <_vfiprintf_r>
 800dc26:	b002      	add	sp, #8
 800dc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc2c:	b003      	add	sp, #12
 800dc2e:	4770      	bx	lr
 800dc30:	20000074 	.word	0x20000074

0800dc34 <__libc_init_array>:
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	2600      	movs	r6, #0
 800dc38:	4d0c      	ldr	r5, [pc, #48]	; (800dc6c <__libc_init_array+0x38>)
 800dc3a:	4c0d      	ldr	r4, [pc, #52]	; (800dc70 <__libc_init_array+0x3c>)
 800dc3c:	1b64      	subs	r4, r4, r5
 800dc3e:	10a4      	asrs	r4, r4, #2
 800dc40:	42a6      	cmp	r6, r4
 800dc42:	d109      	bne.n	800dc58 <__libc_init_array+0x24>
 800dc44:	f001 f9ee 	bl	800f024 <_init>
 800dc48:	2600      	movs	r6, #0
 800dc4a:	4d0a      	ldr	r5, [pc, #40]	; (800dc74 <__libc_init_array+0x40>)
 800dc4c:	4c0a      	ldr	r4, [pc, #40]	; (800dc78 <__libc_init_array+0x44>)
 800dc4e:	1b64      	subs	r4, r4, r5
 800dc50:	10a4      	asrs	r4, r4, #2
 800dc52:	42a6      	cmp	r6, r4
 800dc54:	d105      	bne.n	800dc62 <__libc_init_array+0x2e>
 800dc56:	bd70      	pop	{r4, r5, r6, pc}
 800dc58:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc5c:	4798      	blx	r3
 800dc5e:	3601      	adds	r6, #1
 800dc60:	e7ee      	b.n	800dc40 <__libc_init_array+0xc>
 800dc62:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc66:	4798      	blx	r3
 800dc68:	3601      	adds	r6, #1
 800dc6a:	e7f2      	b.n	800dc52 <__libc_init_array+0x1e>
 800dc6c:	0800f8dc 	.word	0x0800f8dc
 800dc70:	0800f8dc 	.word	0x0800f8dc
 800dc74:	0800f8dc 	.word	0x0800f8dc
 800dc78:	0800f8e0 	.word	0x0800f8e0

0800dc7c <malloc>:
 800dc7c:	4b02      	ldr	r3, [pc, #8]	; (800dc88 <malloc+0xc>)
 800dc7e:	4601      	mov	r1, r0
 800dc80:	6818      	ldr	r0, [r3, #0]
 800dc82:	f000 b87b 	b.w	800dd7c <_malloc_r>
 800dc86:	bf00      	nop
 800dc88:	20000074 	.word	0x20000074

0800dc8c <free>:
 800dc8c:	4b02      	ldr	r3, [pc, #8]	; (800dc98 <free+0xc>)
 800dc8e:	4601      	mov	r1, r0
 800dc90:	6818      	ldr	r0, [r3, #0]
 800dc92:	f000 b827 	b.w	800dce4 <_free_r>
 800dc96:	bf00      	nop
 800dc98:	20000074 	.word	0x20000074

0800dc9c <memcmp>:
 800dc9c:	b530      	push	{r4, r5, lr}
 800dc9e:	2400      	movs	r4, #0
 800dca0:	3901      	subs	r1, #1
 800dca2:	42a2      	cmp	r2, r4
 800dca4:	d101      	bne.n	800dcaa <memcmp+0xe>
 800dca6:	2000      	movs	r0, #0
 800dca8:	e005      	b.n	800dcb6 <memcmp+0x1a>
 800dcaa:	5d03      	ldrb	r3, [r0, r4]
 800dcac:	3401      	adds	r4, #1
 800dcae:	5d0d      	ldrb	r5, [r1, r4]
 800dcb0:	42ab      	cmp	r3, r5
 800dcb2:	d0f6      	beq.n	800dca2 <memcmp+0x6>
 800dcb4:	1b58      	subs	r0, r3, r5
 800dcb6:	bd30      	pop	{r4, r5, pc}

0800dcb8 <memcpy>:
 800dcb8:	440a      	add	r2, r1
 800dcba:	4291      	cmp	r1, r2
 800dcbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcc0:	d100      	bne.n	800dcc4 <memcpy+0xc>
 800dcc2:	4770      	bx	lr
 800dcc4:	b510      	push	{r4, lr}
 800dcc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcca:	4291      	cmp	r1, r2
 800dccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcd0:	d1f9      	bne.n	800dcc6 <memcpy+0xe>
 800dcd2:	bd10      	pop	{r4, pc}

0800dcd4 <memset>:
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	4402      	add	r2, r0
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d100      	bne.n	800dcde <memset+0xa>
 800dcdc:	4770      	bx	lr
 800dcde:	f803 1b01 	strb.w	r1, [r3], #1
 800dce2:	e7f9      	b.n	800dcd8 <memset+0x4>

0800dce4 <_free_r>:
 800dce4:	b538      	push	{r3, r4, r5, lr}
 800dce6:	4605      	mov	r5, r0
 800dce8:	2900      	cmp	r1, #0
 800dcea:	d043      	beq.n	800dd74 <_free_r+0x90>
 800dcec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcf0:	1f0c      	subs	r4, r1, #4
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	bfb8      	it	lt
 800dcf6:	18e4      	addlt	r4, r4, r3
 800dcf8:	f000 ff0e 	bl	800eb18 <__malloc_lock>
 800dcfc:	4a1e      	ldr	r2, [pc, #120]	; (800dd78 <_free_r+0x94>)
 800dcfe:	6813      	ldr	r3, [r2, #0]
 800dd00:	4610      	mov	r0, r2
 800dd02:	b933      	cbnz	r3, 800dd12 <_free_r+0x2e>
 800dd04:	6063      	str	r3, [r4, #4]
 800dd06:	6014      	str	r4, [r2, #0]
 800dd08:	4628      	mov	r0, r5
 800dd0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd0e:	f000 bf09 	b.w	800eb24 <__malloc_unlock>
 800dd12:	42a3      	cmp	r3, r4
 800dd14:	d90a      	bls.n	800dd2c <_free_r+0x48>
 800dd16:	6821      	ldr	r1, [r4, #0]
 800dd18:	1862      	adds	r2, r4, r1
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	bf01      	itttt	eq
 800dd1e:	681a      	ldreq	r2, [r3, #0]
 800dd20:	685b      	ldreq	r3, [r3, #4]
 800dd22:	1852      	addeq	r2, r2, r1
 800dd24:	6022      	streq	r2, [r4, #0]
 800dd26:	6063      	str	r3, [r4, #4]
 800dd28:	6004      	str	r4, [r0, #0]
 800dd2a:	e7ed      	b.n	800dd08 <_free_r+0x24>
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	b10b      	cbz	r3, 800dd36 <_free_r+0x52>
 800dd32:	42a3      	cmp	r3, r4
 800dd34:	d9fa      	bls.n	800dd2c <_free_r+0x48>
 800dd36:	6811      	ldr	r1, [r2, #0]
 800dd38:	1850      	adds	r0, r2, r1
 800dd3a:	42a0      	cmp	r0, r4
 800dd3c:	d10b      	bne.n	800dd56 <_free_r+0x72>
 800dd3e:	6820      	ldr	r0, [r4, #0]
 800dd40:	4401      	add	r1, r0
 800dd42:	1850      	adds	r0, r2, r1
 800dd44:	4283      	cmp	r3, r0
 800dd46:	6011      	str	r1, [r2, #0]
 800dd48:	d1de      	bne.n	800dd08 <_free_r+0x24>
 800dd4a:	6818      	ldr	r0, [r3, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	4401      	add	r1, r0
 800dd50:	6011      	str	r1, [r2, #0]
 800dd52:	6053      	str	r3, [r2, #4]
 800dd54:	e7d8      	b.n	800dd08 <_free_r+0x24>
 800dd56:	d902      	bls.n	800dd5e <_free_r+0x7a>
 800dd58:	230c      	movs	r3, #12
 800dd5a:	602b      	str	r3, [r5, #0]
 800dd5c:	e7d4      	b.n	800dd08 <_free_r+0x24>
 800dd5e:	6820      	ldr	r0, [r4, #0]
 800dd60:	1821      	adds	r1, r4, r0
 800dd62:	428b      	cmp	r3, r1
 800dd64:	bf01      	itttt	eq
 800dd66:	6819      	ldreq	r1, [r3, #0]
 800dd68:	685b      	ldreq	r3, [r3, #4]
 800dd6a:	1809      	addeq	r1, r1, r0
 800dd6c:	6021      	streq	r1, [r4, #0]
 800dd6e:	6063      	str	r3, [r4, #4]
 800dd70:	6054      	str	r4, [r2, #4]
 800dd72:	e7c9      	b.n	800dd08 <_free_r+0x24>
 800dd74:	bd38      	pop	{r3, r4, r5, pc}
 800dd76:	bf00      	nop
 800dd78:	200001b8 	.word	0x200001b8

0800dd7c <_malloc_r>:
 800dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7e:	1ccd      	adds	r5, r1, #3
 800dd80:	f025 0503 	bic.w	r5, r5, #3
 800dd84:	3508      	adds	r5, #8
 800dd86:	2d0c      	cmp	r5, #12
 800dd88:	bf38      	it	cc
 800dd8a:	250c      	movcc	r5, #12
 800dd8c:	2d00      	cmp	r5, #0
 800dd8e:	4606      	mov	r6, r0
 800dd90:	db01      	blt.n	800dd96 <_malloc_r+0x1a>
 800dd92:	42a9      	cmp	r1, r5
 800dd94:	d903      	bls.n	800dd9e <_malloc_r+0x22>
 800dd96:	230c      	movs	r3, #12
 800dd98:	6033      	str	r3, [r6, #0]
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd9e:	f000 febb 	bl	800eb18 <__malloc_lock>
 800dda2:	4921      	ldr	r1, [pc, #132]	; (800de28 <_malloc_r+0xac>)
 800dda4:	680a      	ldr	r2, [r1, #0]
 800dda6:	4614      	mov	r4, r2
 800dda8:	b99c      	cbnz	r4, 800ddd2 <_malloc_r+0x56>
 800ddaa:	4f20      	ldr	r7, [pc, #128]	; (800de2c <_malloc_r+0xb0>)
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	b923      	cbnz	r3, 800ddba <_malloc_r+0x3e>
 800ddb0:	4621      	mov	r1, r4
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f000 fb2a 	bl	800e40c <_sbrk_r>
 800ddb8:	6038      	str	r0, [r7, #0]
 800ddba:	4629      	mov	r1, r5
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	f000 fb25 	bl	800e40c <_sbrk_r>
 800ddc2:	1c43      	adds	r3, r0, #1
 800ddc4:	d123      	bne.n	800de0e <_malloc_r+0x92>
 800ddc6:	230c      	movs	r3, #12
 800ddc8:	4630      	mov	r0, r6
 800ddca:	6033      	str	r3, [r6, #0]
 800ddcc:	f000 feaa 	bl	800eb24 <__malloc_unlock>
 800ddd0:	e7e3      	b.n	800dd9a <_malloc_r+0x1e>
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	1b5b      	subs	r3, r3, r5
 800ddd6:	d417      	bmi.n	800de08 <_malloc_r+0x8c>
 800ddd8:	2b0b      	cmp	r3, #11
 800ddda:	d903      	bls.n	800dde4 <_malloc_r+0x68>
 800dddc:	6023      	str	r3, [r4, #0]
 800ddde:	441c      	add	r4, r3
 800dde0:	6025      	str	r5, [r4, #0]
 800dde2:	e004      	b.n	800ddee <_malloc_r+0x72>
 800dde4:	6863      	ldr	r3, [r4, #4]
 800dde6:	42a2      	cmp	r2, r4
 800dde8:	bf0c      	ite	eq
 800ddea:	600b      	streq	r3, [r1, #0]
 800ddec:	6053      	strne	r3, [r2, #4]
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f000 fe98 	bl	800eb24 <__malloc_unlock>
 800ddf4:	f104 000b 	add.w	r0, r4, #11
 800ddf8:	1d23      	adds	r3, r4, #4
 800ddfa:	f020 0007 	bic.w	r0, r0, #7
 800ddfe:	1ac2      	subs	r2, r0, r3
 800de00:	d0cc      	beq.n	800dd9c <_malloc_r+0x20>
 800de02:	1a1b      	subs	r3, r3, r0
 800de04:	50a3      	str	r3, [r4, r2]
 800de06:	e7c9      	b.n	800dd9c <_malloc_r+0x20>
 800de08:	4622      	mov	r2, r4
 800de0a:	6864      	ldr	r4, [r4, #4]
 800de0c:	e7cc      	b.n	800dda8 <_malloc_r+0x2c>
 800de0e:	1cc4      	adds	r4, r0, #3
 800de10:	f024 0403 	bic.w	r4, r4, #3
 800de14:	42a0      	cmp	r0, r4
 800de16:	d0e3      	beq.n	800dde0 <_malloc_r+0x64>
 800de18:	1a21      	subs	r1, r4, r0
 800de1a:	4630      	mov	r0, r6
 800de1c:	f000 faf6 	bl	800e40c <_sbrk_r>
 800de20:	3001      	adds	r0, #1
 800de22:	d1dd      	bne.n	800dde0 <_malloc_r+0x64>
 800de24:	e7cf      	b.n	800ddc6 <_malloc_r+0x4a>
 800de26:	bf00      	nop
 800de28:	200001b8 	.word	0x200001b8
 800de2c:	200001bc 	.word	0x200001bc

0800de30 <__sfputc_r>:
 800de30:	6893      	ldr	r3, [r2, #8]
 800de32:	b410      	push	{r4}
 800de34:	3b01      	subs	r3, #1
 800de36:	2b00      	cmp	r3, #0
 800de38:	6093      	str	r3, [r2, #8]
 800de3a:	da07      	bge.n	800de4c <__sfputc_r+0x1c>
 800de3c:	6994      	ldr	r4, [r2, #24]
 800de3e:	42a3      	cmp	r3, r4
 800de40:	db01      	blt.n	800de46 <__sfputc_r+0x16>
 800de42:	290a      	cmp	r1, #10
 800de44:	d102      	bne.n	800de4c <__sfputc_r+0x1c>
 800de46:	bc10      	pop	{r4}
 800de48:	f000 bb58 	b.w	800e4fc <__swbuf_r>
 800de4c:	6813      	ldr	r3, [r2, #0]
 800de4e:	1c58      	adds	r0, r3, #1
 800de50:	6010      	str	r0, [r2, #0]
 800de52:	7019      	strb	r1, [r3, #0]
 800de54:	4608      	mov	r0, r1
 800de56:	bc10      	pop	{r4}
 800de58:	4770      	bx	lr

0800de5a <__sfputs_r>:
 800de5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5c:	4606      	mov	r6, r0
 800de5e:	460f      	mov	r7, r1
 800de60:	4614      	mov	r4, r2
 800de62:	18d5      	adds	r5, r2, r3
 800de64:	42ac      	cmp	r4, r5
 800de66:	d101      	bne.n	800de6c <__sfputs_r+0x12>
 800de68:	2000      	movs	r0, #0
 800de6a:	e007      	b.n	800de7c <__sfputs_r+0x22>
 800de6c:	463a      	mov	r2, r7
 800de6e:	4630      	mov	r0, r6
 800de70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de74:	f7ff ffdc 	bl	800de30 <__sfputc_r>
 800de78:	1c43      	adds	r3, r0, #1
 800de7a:	d1f3      	bne.n	800de64 <__sfputs_r+0xa>
 800de7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de80 <_vfiprintf_r>:
 800de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de84:	460d      	mov	r5, r1
 800de86:	4614      	mov	r4, r2
 800de88:	4698      	mov	r8, r3
 800de8a:	4606      	mov	r6, r0
 800de8c:	b09d      	sub	sp, #116	; 0x74
 800de8e:	b118      	cbz	r0, 800de98 <_vfiprintf_r+0x18>
 800de90:	6983      	ldr	r3, [r0, #24]
 800de92:	b90b      	cbnz	r3, 800de98 <_vfiprintf_r+0x18>
 800de94:	f000 fd14 	bl	800e8c0 <__sinit>
 800de98:	4b89      	ldr	r3, [pc, #548]	; (800e0c0 <_vfiprintf_r+0x240>)
 800de9a:	429d      	cmp	r5, r3
 800de9c:	d11b      	bne.n	800ded6 <_vfiprintf_r+0x56>
 800de9e:	6875      	ldr	r5, [r6, #4]
 800dea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dea2:	07d9      	lsls	r1, r3, #31
 800dea4:	d405      	bmi.n	800deb2 <_vfiprintf_r+0x32>
 800dea6:	89ab      	ldrh	r3, [r5, #12]
 800dea8:	059a      	lsls	r2, r3, #22
 800deaa:	d402      	bmi.n	800deb2 <_vfiprintf_r+0x32>
 800deac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800deae:	f000 fda5 	bl	800e9fc <__retarget_lock_acquire_recursive>
 800deb2:	89ab      	ldrh	r3, [r5, #12]
 800deb4:	071b      	lsls	r3, r3, #28
 800deb6:	d501      	bpl.n	800debc <_vfiprintf_r+0x3c>
 800deb8:	692b      	ldr	r3, [r5, #16]
 800deba:	b9eb      	cbnz	r3, 800def8 <_vfiprintf_r+0x78>
 800debc:	4629      	mov	r1, r5
 800debe:	4630      	mov	r0, r6
 800dec0:	f000 fb6e 	bl	800e5a0 <__swsetup_r>
 800dec4:	b1c0      	cbz	r0, 800def8 <_vfiprintf_r+0x78>
 800dec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dec8:	07dc      	lsls	r4, r3, #31
 800deca:	d50e      	bpl.n	800deea <_vfiprintf_r+0x6a>
 800decc:	f04f 30ff 	mov.w	r0, #4294967295
 800ded0:	b01d      	add	sp, #116	; 0x74
 800ded2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded6:	4b7b      	ldr	r3, [pc, #492]	; (800e0c4 <_vfiprintf_r+0x244>)
 800ded8:	429d      	cmp	r5, r3
 800deda:	d101      	bne.n	800dee0 <_vfiprintf_r+0x60>
 800dedc:	68b5      	ldr	r5, [r6, #8]
 800dede:	e7df      	b.n	800dea0 <_vfiprintf_r+0x20>
 800dee0:	4b79      	ldr	r3, [pc, #484]	; (800e0c8 <_vfiprintf_r+0x248>)
 800dee2:	429d      	cmp	r5, r3
 800dee4:	bf08      	it	eq
 800dee6:	68f5      	ldreq	r5, [r6, #12]
 800dee8:	e7da      	b.n	800dea0 <_vfiprintf_r+0x20>
 800deea:	89ab      	ldrh	r3, [r5, #12]
 800deec:	0598      	lsls	r0, r3, #22
 800deee:	d4ed      	bmi.n	800decc <_vfiprintf_r+0x4c>
 800def0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800def2:	f000 fd84 	bl	800e9fe <__retarget_lock_release_recursive>
 800def6:	e7e9      	b.n	800decc <_vfiprintf_r+0x4c>
 800def8:	2300      	movs	r3, #0
 800defa:	9309      	str	r3, [sp, #36]	; 0x24
 800defc:	2320      	movs	r3, #32
 800defe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df02:	2330      	movs	r3, #48	; 0x30
 800df04:	f04f 0901 	mov.w	r9, #1
 800df08:	f8cd 800c 	str.w	r8, [sp, #12]
 800df0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e0cc <_vfiprintf_r+0x24c>
 800df10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df14:	4623      	mov	r3, r4
 800df16:	469a      	mov	sl, r3
 800df18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df1c:	b10a      	cbz	r2, 800df22 <_vfiprintf_r+0xa2>
 800df1e:	2a25      	cmp	r2, #37	; 0x25
 800df20:	d1f9      	bne.n	800df16 <_vfiprintf_r+0x96>
 800df22:	ebba 0b04 	subs.w	fp, sl, r4
 800df26:	d00b      	beq.n	800df40 <_vfiprintf_r+0xc0>
 800df28:	465b      	mov	r3, fp
 800df2a:	4622      	mov	r2, r4
 800df2c:	4629      	mov	r1, r5
 800df2e:	4630      	mov	r0, r6
 800df30:	f7ff ff93 	bl	800de5a <__sfputs_r>
 800df34:	3001      	adds	r0, #1
 800df36:	f000 80aa 	beq.w	800e08e <_vfiprintf_r+0x20e>
 800df3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df3c:	445a      	add	r2, fp
 800df3e:	9209      	str	r2, [sp, #36]	; 0x24
 800df40:	f89a 3000 	ldrb.w	r3, [sl]
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 80a2 	beq.w	800e08e <_vfiprintf_r+0x20e>
 800df4a:	2300      	movs	r3, #0
 800df4c:	f04f 32ff 	mov.w	r2, #4294967295
 800df50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df54:	f10a 0a01 	add.w	sl, sl, #1
 800df58:	9304      	str	r3, [sp, #16]
 800df5a:	9307      	str	r3, [sp, #28]
 800df5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df60:	931a      	str	r3, [sp, #104]	; 0x68
 800df62:	4654      	mov	r4, sl
 800df64:	2205      	movs	r2, #5
 800df66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df6a:	4858      	ldr	r0, [pc, #352]	; (800e0cc <_vfiprintf_r+0x24c>)
 800df6c:	f000 fdac 	bl	800eac8 <memchr>
 800df70:	9a04      	ldr	r2, [sp, #16]
 800df72:	b9d8      	cbnz	r0, 800dfac <_vfiprintf_r+0x12c>
 800df74:	06d1      	lsls	r1, r2, #27
 800df76:	bf44      	itt	mi
 800df78:	2320      	movmi	r3, #32
 800df7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df7e:	0713      	lsls	r3, r2, #28
 800df80:	bf44      	itt	mi
 800df82:	232b      	movmi	r3, #43	; 0x2b
 800df84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df88:	f89a 3000 	ldrb.w	r3, [sl]
 800df8c:	2b2a      	cmp	r3, #42	; 0x2a
 800df8e:	d015      	beq.n	800dfbc <_vfiprintf_r+0x13c>
 800df90:	4654      	mov	r4, sl
 800df92:	2000      	movs	r0, #0
 800df94:	f04f 0c0a 	mov.w	ip, #10
 800df98:	9a07      	ldr	r2, [sp, #28]
 800df9a:	4621      	mov	r1, r4
 800df9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfa0:	3b30      	subs	r3, #48	; 0x30
 800dfa2:	2b09      	cmp	r3, #9
 800dfa4:	d94e      	bls.n	800e044 <_vfiprintf_r+0x1c4>
 800dfa6:	b1b0      	cbz	r0, 800dfd6 <_vfiprintf_r+0x156>
 800dfa8:	9207      	str	r2, [sp, #28]
 800dfaa:	e014      	b.n	800dfd6 <_vfiprintf_r+0x156>
 800dfac:	eba0 0308 	sub.w	r3, r0, r8
 800dfb0:	fa09 f303 	lsl.w	r3, r9, r3
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	46a2      	mov	sl, r4
 800dfb8:	9304      	str	r3, [sp, #16]
 800dfba:	e7d2      	b.n	800df62 <_vfiprintf_r+0xe2>
 800dfbc:	9b03      	ldr	r3, [sp, #12]
 800dfbe:	1d19      	adds	r1, r3, #4
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	9103      	str	r1, [sp, #12]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	bfbb      	ittet	lt
 800dfc8:	425b      	neglt	r3, r3
 800dfca:	f042 0202 	orrlt.w	r2, r2, #2
 800dfce:	9307      	strge	r3, [sp, #28]
 800dfd0:	9307      	strlt	r3, [sp, #28]
 800dfd2:	bfb8      	it	lt
 800dfd4:	9204      	strlt	r2, [sp, #16]
 800dfd6:	7823      	ldrb	r3, [r4, #0]
 800dfd8:	2b2e      	cmp	r3, #46	; 0x2e
 800dfda:	d10c      	bne.n	800dff6 <_vfiprintf_r+0x176>
 800dfdc:	7863      	ldrb	r3, [r4, #1]
 800dfde:	2b2a      	cmp	r3, #42	; 0x2a
 800dfe0:	d135      	bne.n	800e04e <_vfiprintf_r+0x1ce>
 800dfe2:	9b03      	ldr	r3, [sp, #12]
 800dfe4:	3402      	adds	r4, #2
 800dfe6:	1d1a      	adds	r2, r3, #4
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	9203      	str	r2, [sp, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	bfb8      	it	lt
 800dff0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dff4:	9305      	str	r3, [sp, #20]
 800dff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e0dc <_vfiprintf_r+0x25c>
 800dffa:	2203      	movs	r2, #3
 800dffc:	4650      	mov	r0, sl
 800dffe:	7821      	ldrb	r1, [r4, #0]
 800e000:	f000 fd62 	bl	800eac8 <memchr>
 800e004:	b140      	cbz	r0, 800e018 <_vfiprintf_r+0x198>
 800e006:	2340      	movs	r3, #64	; 0x40
 800e008:	eba0 000a 	sub.w	r0, r0, sl
 800e00c:	fa03 f000 	lsl.w	r0, r3, r0
 800e010:	9b04      	ldr	r3, [sp, #16]
 800e012:	3401      	adds	r4, #1
 800e014:	4303      	orrs	r3, r0
 800e016:	9304      	str	r3, [sp, #16]
 800e018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e01c:	2206      	movs	r2, #6
 800e01e:	482c      	ldr	r0, [pc, #176]	; (800e0d0 <_vfiprintf_r+0x250>)
 800e020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e024:	f000 fd50 	bl	800eac8 <memchr>
 800e028:	2800      	cmp	r0, #0
 800e02a:	d03f      	beq.n	800e0ac <_vfiprintf_r+0x22c>
 800e02c:	4b29      	ldr	r3, [pc, #164]	; (800e0d4 <_vfiprintf_r+0x254>)
 800e02e:	bb1b      	cbnz	r3, 800e078 <_vfiprintf_r+0x1f8>
 800e030:	9b03      	ldr	r3, [sp, #12]
 800e032:	3307      	adds	r3, #7
 800e034:	f023 0307 	bic.w	r3, r3, #7
 800e038:	3308      	adds	r3, #8
 800e03a:	9303      	str	r3, [sp, #12]
 800e03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e03e:	443b      	add	r3, r7
 800e040:	9309      	str	r3, [sp, #36]	; 0x24
 800e042:	e767      	b.n	800df14 <_vfiprintf_r+0x94>
 800e044:	460c      	mov	r4, r1
 800e046:	2001      	movs	r0, #1
 800e048:	fb0c 3202 	mla	r2, ip, r2, r3
 800e04c:	e7a5      	b.n	800df9a <_vfiprintf_r+0x11a>
 800e04e:	2300      	movs	r3, #0
 800e050:	f04f 0c0a 	mov.w	ip, #10
 800e054:	4619      	mov	r1, r3
 800e056:	3401      	adds	r4, #1
 800e058:	9305      	str	r3, [sp, #20]
 800e05a:	4620      	mov	r0, r4
 800e05c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e060:	3a30      	subs	r2, #48	; 0x30
 800e062:	2a09      	cmp	r2, #9
 800e064:	d903      	bls.n	800e06e <_vfiprintf_r+0x1ee>
 800e066:	2b00      	cmp	r3, #0
 800e068:	d0c5      	beq.n	800dff6 <_vfiprintf_r+0x176>
 800e06a:	9105      	str	r1, [sp, #20]
 800e06c:	e7c3      	b.n	800dff6 <_vfiprintf_r+0x176>
 800e06e:	4604      	mov	r4, r0
 800e070:	2301      	movs	r3, #1
 800e072:	fb0c 2101 	mla	r1, ip, r1, r2
 800e076:	e7f0      	b.n	800e05a <_vfiprintf_r+0x1da>
 800e078:	ab03      	add	r3, sp, #12
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	462a      	mov	r2, r5
 800e07e:	4630      	mov	r0, r6
 800e080:	4b15      	ldr	r3, [pc, #84]	; (800e0d8 <_vfiprintf_r+0x258>)
 800e082:	a904      	add	r1, sp, #16
 800e084:	f3af 8000 	nop.w
 800e088:	4607      	mov	r7, r0
 800e08a:	1c78      	adds	r0, r7, #1
 800e08c:	d1d6      	bne.n	800e03c <_vfiprintf_r+0x1bc>
 800e08e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e090:	07d9      	lsls	r1, r3, #31
 800e092:	d405      	bmi.n	800e0a0 <_vfiprintf_r+0x220>
 800e094:	89ab      	ldrh	r3, [r5, #12]
 800e096:	059a      	lsls	r2, r3, #22
 800e098:	d402      	bmi.n	800e0a0 <_vfiprintf_r+0x220>
 800e09a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e09c:	f000 fcaf 	bl	800e9fe <__retarget_lock_release_recursive>
 800e0a0:	89ab      	ldrh	r3, [r5, #12]
 800e0a2:	065b      	lsls	r3, r3, #25
 800e0a4:	f53f af12 	bmi.w	800decc <_vfiprintf_r+0x4c>
 800e0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0aa:	e711      	b.n	800ded0 <_vfiprintf_r+0x50>
 800e0ac:	ab03      	add	r3, sp, #12
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	462a      	mov	r2, r5
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	4b08      	ldr	r3, [pc, #32]	; (800e0d8 <_vfiprintf_r+0x258>)
 800e0b6:	a904      	add	r1, sp, #16
 800e0b8:	f000 f882 	bl	800e1c0 <_printf_i>
 800e0bc:	e7e4      	b.n	800e088 <_vfiprintf_r+0x208>
 800e0be:	bf00      	nop
 800e0c0:	0800f89c 	.word	0x0800f89c
 800e0c4:	0800f8bc 	.word	0x0800f8bc
 800e0c8:	0800f87c 	.word	0x0800f87c
 800e0cc:	0800f848 	.word	0x0800f848
 800e0d0:	0800f852 	.word	0x0800f852
 800e0d4:	00000000 	.word	0x00000000
 800e0d8:	0800de5b 	.word	0x0800de5b
 800e0dc:	0800f84e 	.word	0x0800f84e

0800e0e0 <_printf_common>:
 800e0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0e4:	4616      	mov	r6, r2
 800e0e6:	4699      	mov	r9, r3
 800e0e8:	688a      	ldr	r2, [r1, #8]
 800e0ea:	690b      	ldr	r3, [r1, #16]
 800e0ec:	4607      	mov	r7, r0
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	bfb8      	it	lt
 800e0f2:	4613      	movlt	r3, r2
 800e0f4:	6033      	str	r3, [r6, #0]
 800e0f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e100:	b10a      	cbz	r2, 800e106 <_printf_common+0x26>
 800e102:	3301      	adds	r3, #1
 800e104:	6033      	str	r3, [r6, #0]
 800e106:	6823      	ldr	r3, [r4, #0]
 800e108:	0699      	lsls	r1, r3, #26
 800e10a:	bf42      	ittt	mi
 800e10c:	6833      	ldrmi	r3, [r6, #0]
 800e10e:	3302      	addmi	r3, #2
 800e110:	6033      	strmi	r3, [r6, #0]
 800e112:	6825      	ldr	r5, [r4, #0]
 800e114:	f015 0506 	ands.w	r5, r5, #6
 800e118:	d106      	bne.n	800e128 <_printf_common+0x48>
 800e11a:	f104 0a19 	add.w	sl, r4, #25
 800e11e:	68e3      	ldr	r3, [r4, #12]
 800e120:	6832      	ldr	r2, [r6, #0]
 800e122:	1a9b      	subs	r3, r3, r2
 800e124:	42ab      	cmp	r3, r5
 800e126:	dc28      	bgt.n	800e17a <_printf_common+0x9a>
 800e128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e12c:	1e13      	subs	r3, r2, #0
 800e12e:	6822      	ldr	r2, [r4, #0]
 800e130:	bf18      	it	ne
 800e132:	2301      	movne	r3, #1
 800e134:	0692      	lsls	r2, r2, #26
 800e136:	d42d      	bmi.n	800e194 <_printf_common+0xb4>
 800e138:	4649      	mov	r1, r9
 800e13a:	4638      	mov	r0, r7
 800e13c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e140:	47c0      	blx	r8
 800e142:	3001      	adds	r0, #1
 800e144:	d020      	beq.n	800e188 <_printf_common+0xa8>
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	68e5      	ldr	r5, [r4, #12]
 800e14a:	f003 0306 	and.w	r3, r3, #6
 800e14e:	2b04      	cmp	r3, #4
 800e150:	bf18      	it	ne
 800e152:	2500      	movne	r5, #0
 800e154:	6832      	ldr	r2, [r6, #0]
 800e156:	f04f 0600 	mov.w	r6, #0
 800e15a:	68a3      	ldr	r3, [r4, #8]
 800e15c:	bf08      	it	eq
 800e15e:	1aad      	subeq	r5, r5, r2
 800e160:	6922      	ldr	r2, [r4, #16]
 800e162:	bf08      	it	eq
 800e164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e168:	4293      	cmp	r3, r2
 800e16a:	bfc4      	itt	gt
 800e16c:	1a9b      	subgt	r3, r3, r2
 800e16e:	18ed      	addgt	r5, r5, r3
 800e170:	341a      	adds	r4, #26
 800e172:	42b5      	cmp	r5, r6
 800e174:	d11a      	bne.n	800e1ac <_printf_common+0xcc>
 800e176:	2000      	movs	r0, #0
 800e178:	e008      	b.n	800e18c <_printf_common+0xac>
 800e17a:	2301      	movs	r3, #1
 800e17c:	4652      	mov	r2, sl
 800e17e:	4649      	mov	r1, r9
 800e180:	4638      	mov	r0, r7
 800e182:	47c0      	blx	r8
 800e184:	3001      	adds	r0, #1
 800e186:	d103      	bne.n	800e190 <_printf_common+0xb0>
 800e188:	f04f 30ff 	mov.w	r0, #4294967295
 800e18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e190:	3501      	adds	r5, #1
 800e192:	e7c4      	b.n	800e11e <_printf_common+0x3e>
 800e194:	2030      	movs	r0, #48	; 0x30
 800e196:	18e1      	adds	r1, r4, r3
 800e198:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e19c:	1c5a      	adds	r2, r3, #1
 800e19e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e1a2:	4422      	add	r2, r4
 800e1a4:	3302      	adds	r3, #2
 800e1a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1aa:	e7c5      	b.n	800e138 <_printf_common+0x58>
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	4622      	mov	r2, r4
 800e1b0:	4649      	mov	r1, r9
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	47c0      	blx	r8
 800e1b6:	3001      	adds	r0, #1
 800e1b8:	d0e6      	beq.n	800e188 <_printf_common+0xa8>
 800e1ba:	3601      	adds	r6, #1
 800e1bc:	e7d9      	b.n	800e172 <_printf_common+0x92>
	...

0800e1c0 <_printf_i>:
 800e1c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	7e27      	ldrb	r7, [r4, #24]
 800e1c8:	4691      	mov	r9, r2
 800e1ca:	2f78      	cmp	r7, #120	; 0x78
 800e1cc:	4680      	mov	r8, r0
 800e1ce:	469a      	mov	sl, r3
 800e1d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e1d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1d6:	d807      	bhi.n	800e1e8 <_printf_i+0x28>
 800e1d8:	2f62      	cmp	r7, #98	; 0x62
 800e1da:	d80a      	bhi.n	800e1f2 <_printf_i+0x32>
 800e1dc:	2f00      	cmp	r7, #0
 800e1de:	f000 80d9 	beq.w	800e394 <_printf_i+0x1d4>
 800e1e2:	2f58      	cmp	r7, #88	; 0x58
 800e1e4:	f000 80a4 	beq.w	800e330 <_printf_i+0x170>
 800e1e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e1ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e1f0:	e03a      	b.n	800e268 <_printf_i+0xa8>
 800e1f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e1f6:	2b15      	cmp	r3, #21
 800e1f8:	d8f6      	bhi.n	800e1e8 <_printf_i+0x28>
 800e1fa:	a001      	add	r0, pc, #4	; (adr r0, 800e200 <_printf_i+0x40>)
 800e1fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e200:	0800e259 	.word	0x0800e259
 800e204:	0800e26d 	.word	0x0800e26d
 800e208:	0800e1e9 	.word	0x0800e1e9
 800e20c:	0800e1e9 	.word	0x0800e1e9
 800e210:	0800e1e9 	.word	0x0800e1e9
 800e214:	0800e1e9 	.word	0x0800e1e9
 800e218:	0800e26d 	.word	0x0800e26d
 800e21c:	0800e1e9 	.word	0x0800e1e9
 800e220:	0800e1e9 	.word	0x0800e1e9
 800e224:	0800e1e9 	.word	0x0800e1e9
 800e228:	0800e1e9 	.word	0x0800e1e9
 800e22c:	0800e37b 	.word	0x0800e37b
 800e230:	0800e29d 	.word	0x0800e29d
 800e234:	0800e35d 	.word	0x0800e35d
 800e238:	0800e1e9 	.word	0x0800e1e9
 800e23c:	0800e1e9 	.word	0x0800e1e9
 800e240:	0800e39d 	.word	0x0800e39d
 800e244:	0800e1e9 	.word	0x0800e1e9
 800e248:	0800e29d 	.word	0x0800e29d
 800e24c:	0800e1e9 	.word	0x0800e1e9
 800e250:	0800e1e9 	.word	0x0800e1e9
 800e254:	0800e365 	.word	0x0800e365
 800e258:	680b      	ldr	r3, [r1, #0]
 800e25a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e25e:	1d1a      	adds	r2, r3, #4
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	600a      	str	r2, [r1, #0]
 800e264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e268:	2301      	movs	r3, #1
 800e26a:	e0a4      	b.n	800e3b6 <_printf_i+0x1f6>
 800e26c:	6825      	ldr	r5, [r4, #0]
 800e26e:	6808      	ldr	r0, [r1, #0]
 800e270:	062e      	lsls	r6, r5, #24
 800e272:	f100 0304 	add.w	r3, r0, #4
 800e276:	d50a      	bpl.n	800e28e <_printf_i+0xce>
 800e278:	6805      	ldr	r5, [r0, #0]
 800e27a:	600b      	str	r3, [r1, #0]
 800e27c:	2d00      	cmp	r5, #0
 800e27e:	da03      	bge.n	800e288 <_printf_i+0xc8>
 800e280:	232d      	movs	r3, #45	; 0x2d
 800e282:	426d      	negs	r5, r5
 800e284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e288:	230a      	movs	r3, #10
 800e28a:	485e      	ldr	r0, [pc, #376]	; (800e404 <_printf_i+0x244>)
 800e28c:	e019      	b.n	800e2c2 <_printf_i+0x102>
 800e28e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e292:	6805      	ldr	r5, [r0, #0]
 800e294:	600b      	str	r3, [r1, #0]
 800e296:	bf18      	it	ne
 800e298:	b22d      	sxthne	r5, r5
 800e29a:	e7ef      	b.n	800e27c <_printf_i+0xbc>
 800e29c:	680b      	ldr	r3, [r1, #0]
 800e29e:	6825      	ldr	r5, [r4, #0]
 800e2a0:	1d18      	adds	r0, r3, #4
 800e2a2:	6008      	str	r0, [r1, #0]
 800e2a4:	0628      	lsls	r0, r5, #24
 800e2a6:	d501      	bpl.n	800e2ac <_printf_i+0xec>
 800e2a8:	681d      	ldr	r5, [r3, #0]
 800e2aa:	e002      	b.n	800e2b2 <_printf_i+0xf2>
 800e2ac:	0669      	lsls	r1, r5, #25
 800e2ae:	d5fb      	bpl.n	800e2a8 <_printf_i+0xe8>
 800e2b0:	881d      	ldrh	r5, [r3, #0]
 800e2b2:	2f6f      	cmp	r7, #111	; 0x6f
 800e2b4:	bf0c      	ite	eq
 800e2b6:	2308      	moveq	r3, #8
 800e2b8:	230a      	movne	r3, #10
 800e2ba:	4852      	ldr	r0, [pc, #328]	; (800e404 <_printf_i+0x244>)
 800e2bc:	2100      	movs	r1, #0
 800e2be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e2c2:	6866      	ldr	r6, [r4, #4]
 800e2c4:	2e00      	cmp	r6, #0
 800e2c6:	bfa8      	it	ge
 800e2c8:	6821      	ldrge	r1, [r4, #0]
 800e2ca:	60a6      	str	r6, [r4, #8]
 800e2cc:	bfa4      	itt	ge
 800e2ce:	f021 0104 	bicge.w	r1, r1, #4
 800e2d2:	6021      	strge	r1, [r4, #0]
 800e2d4:	b90d      	cbnz	r5, 800e2da <_printf_i+0x11a>
 800e2d6:	2e00      	cmp	r6, #0
 800e2d8:	d04d      	beq.n	800e376 <_printf_i+0x1b6>
 800e2da:	4616      	mov	r6, r2
 800e2dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e2e0:	fb03 5711 	mls	r7, r3, r1, r5
 800e2e4:	5dc7      	ldrb	r7, [r0, r7]
 800e2e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e2ea:	462f      	mov	r7, r5
 800e2ec:	42bb      	cmp	r3, r7
 800e2ee:	460d      	mov	r5, r1
 800e2f0:	d9f4      	bls.n	800e2dc <_printf_i+0x11c>
 800e2f2:	2b08      	cmp	r3, #8
 800e2f4:	d10b      	bne.n	800e30e <_printf_i+0x14e>
 800e2f6:	6823      	ldr	r3, [r4, #0]
 800e2f8:	07df      	lsls	r7, r3, #31
 800e2fa:	d508      	bpl.n	800e30e <_printf_i+0x14e>
 800e2fc:	6923      	ldr	r3, [r4, #16]
 800e2fe:	6861      	ldr	r1, [r4, #4]
 800e300:	4299      	cmp	r1, r3
 800e302:	bfde      	ittt	le
 800e304:	2330      	movle	r3, #48	; 0x30
 800e306:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e30a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e30e:	1b92      	subs	r2, r2, r6
 800e310:	6122      	str	r2, [r4, #16]
 800e312:	464b      	mov	r3, r9
 800e314:	4621      	mov	r1, r4
 800e316:	4640      	mov	r0, r8
 800e318:	f8cd a000 	str.w	sl, [sp]
 800e31c:	aa03      	add	r2, sp, #12
 800e31e:	f7ff fedf 	bl	800e0e0 <_printf_common>
 800e322:	3001      	adds	r0, #1
 800e324:	d14c      	bne.n	800e3c0 <_printf_i+0x200>
 800e326:	f04f 30ff 	mov.w	r0, #4294967295
 800e32a:	b004      	add	sp, #16
 800e32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e330:	4834      	ldr	r0, [pc, #208]	; (800e404 <_printf_i+0x244>)
 800e332:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e336:	680e      	ldr	r6, [r1, #0]
 800e338:	6823      	ldr	r3, [r4, #0]
 800e33a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e33e:	061f      	lsls	r7, r3, #24
 800e340:	600e      	str	r6, [r1, #0]
 800e342:	d514      	bpl.n	800e36e <_printf_i+0x1ae>
 800e344:	07d9      	lsls	r1, r3, #31
 800e346:	bf44      	itt	mi
 800e348:	f043 0320 	orrmi.w	r3, r3, #32
 800e34c:	6023      	strmi	r3, [r4, #0]
 800e34e:	b91d      	cbnz	r5, 800e358 <_printf_i+0x198>
 800e350:	6823      	ldr	r3, [r4, #0]
 800e352:	f023 0320 	bic.w	r3, r3, #32
 800e356:	6023      	str	r3, [r4, #0]
 800e358:	2310      	movs	r3, #16
 800e35a:	e7af      	b.n	800e2bc <_printf_i+0xfc>
 800e35c:	6823      	ldr	r3, [r4, #0]
 800e35e:	f043 0320 	orr.w	r3, r3, #32
 800e362:	6023      	str	r3, [r4, #0]
 800e364:	2378      	movs	r3, #120	; 0x78
 800e366:	4828      	ldr	r0, [pc, #160]	; (800e408 <_printf_i+0x248>)
 800e368:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e36c:	e7e3      	b.n	800e336 <_printf_i+0x176>
 800e36e:	065e      	lsls	r6, r3, #25
 800e370:	bf48      	it	mi
 800e372:	b2ad      	uxthmi	r5, r5
 800e374:	e7e6      	b.n	800e344 <_printf_i+0x184>
 800e376:	4616      	mov	r6, r2
 800e378:	e7bb      	b.n	800e2f2 <_printf_i+0x132>
 800e37a:	680b      	ldr	r3, [r1, #0]
 800e37c:	6826      	ldr	r6, [r4, #0]
 800e37e:	1d1d      	adds	r5, r3, #4
 800e380:	6960      	ldr	r0, [r4, #20]
 800e382:	600d      	str	r5, [r1, #0]
 800e384:	0635      	lsls	r5, r6, #24
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	d501      	bpl.n	800e38e <_printf_i+0x1ce>
 800e38a:	6018      	str	r0, [r3, #0]
 800e38c:	e002      	b.n	800e394 <_printf_i+0x1d4>
 800e38e:	0671      	lsls	r1, r6, #25
 800e390:	d5fb      	bpl.n	800e38a <_printf_i+0x1ca>
 800e392:	8018      	strh	r0, [r3, #0]
 800e394:	2300      	movs	r3, #0
 800e396:	4616      	mov	r6, r2
 800e398:	6123      	str	r3, [r4, #16]
 800e39a:	e7ba      	b.n	800e312 <_printf_i+0x152>
 800e39c:	680b      	ldr	r3, [r1, #0]
 800e39e:	1d1a      	adds	r2, r3, #4
 800e3a0:	600a      	str	r2, [r1, #0]
 800e3a2:	681e      	ldr	r6, [r3, #0]
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	6862      	ldr	r2, [r4, #4]
 800e3aa:	f000 fb8d 	bl	800eac8 <memchr>
 800e3ae:	b108      	cbz	r0, 800e3b4 <_printf_i+0x1f4>
 800e3b0:	1b80      	subs	r0, r0, r6
 800e3b2:	6060      	str	r0, [r4, #4]
 800e3b4:	6863      	ldr	r3, [r4, #4]
 800e3b6:	6123      	str	r3, [r4, #16]
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3be:	e7a8      	b.n	800e312 <_printf_i+0x152>
 800e3c0:	4632      	mov	r2, r6
 800e3c2:	4649      	mov	r1, r9
 800e3c4:	4640      	mov	r0, r8
 800e3c6:	6923      	ldr	r3, [r4, #16]
 800e3c8:	47d0      	blx	sl
 800e3ca:	3001      	adds	r0, #1
 800e3cc:	d0ab      	beq.n	800e326 <_printf_i+0x166>
 800e3ce:	6823      	ldr	r3, [r4, #0]
 800e3d0:	079b      	lsls	r3, r3, #30
 800e3d2:	d413      	bmi.n	800e3fc <_printf_i+0x23c>
 800e3d4:	68e0      	ldr	r0, [r4, #12]
 800e3d6:	9b03      	ldr	r3, [sp, #12]
 800e3d8:	4298      	cmp	r0, r3
 800e3da:	bfb8      	it	lt
 800e3dc:	4618      	movlt	r0, r3
 800e3de:	e7a4      	b.n	800e32a <_printf_i+0x16a>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	4632      	mov	r2, r6
 800e3e4:	4649      	mov	r1, r9
 800e3e6:	4640      	mov	r0, r8
 800e3e8:	47d0      	blx	sl
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	d09b      	beq.n	800e326 <_printf_i+0x166>
 800e3ee:	3501      	adds	r5, #1
 800e3f0:	68e3      	ldr	r3, [r4, #12]
 800e3f2:	9903      	ldr	r1, [sp, #12]
 800e3f4:	1a5b      	subs	r3, r3, r1
 800e3f6:	42ab      	cmp	r3, r5
 800e3f8:	dcf2      	bgt.n	800e3e0 <_printf_i+0x220>
 800e3fa:	e7eb      	b.n	800e3d4 <_printf_i+0x214>
 800e3fc:	2500      	movs	r5, #0
 800e3fe:	f104 0619 	add.w	r6, r4, #25
 800e402:	e7f5      	b.n	800e3f0 <_printf_i+0x230>
 800e404:	0800f859 	.word	0x0800f859
 800e408:	0800f86a 	.word	0x0800f86a

0800e40c <_sbrk_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	2300      	movs	r3, #0
 800e410:	4d05      	ldr	r5, [pc, #20]	; (800e428 <_sbrk_r+0x1c>)
 800e412:	4604      	mov	r4, r0
 800e414:	4608      	mov	r0, r1
 800e416:	602b      	str	r3, [r5, #0]
 800e418:	f7fa f9de 	bl	80087d8 <_sbrk>
 800e41c:	1c43      	adds	r3, r0, #1
 800e41e:	d102      	bne.n	800e426 <_sbrk_r+0x1a>
 800e420:	682b      	ldr	r3, [r5, #0]
 800e422:	b103      	cbz	r3, 800e426 <_sbrk_r+0x1a>
 800e424:	6023      	str	r3, [r4, #0]
 800e426:	bd38      	pop	{r3, r4, r5, pc}
 800e428:	20000a60 	.word	0x20000a60

0800e42c <strchr>:
 800e42c:	4603      	mov	r3, r0
 800e42e:	b2c9      	uxtb	r1, r1
 800e430:	4618      	mov	r0, r3
 800e432:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e436:	b112      	cbz	r2, 800e43e <strchr+0x12>
 800e438:	428a      	cmp	r2, r1
 800e43a:	d1f9      	bne.n	800e430 <strchr+0x4>
 800e43c:	4770      	bx	lr
 800e43e:	2900      	cmp	r1, #0
 800e440:	bf18      	it	ne
 800e442:	2000      	movne	r0, #0
 800e444:	4770      	bx	lr

0800e446 <strcspn>:
 800e446:	4603      	mov	r3, r0
 800e448:	b570      	push	{r4, r5, r6, lr}
 800e44a:	461e      	mov	r6, r3
 800e44c:	f813 4b01 	ldrb.w	r4, [r3], #1
 800e450:	b144      	cbz	r4, 800e464 <strcspn+0x1e>
 800e452:	1e4a      	subs	r2, r1, #1
 800e454:	e001      	b.n	800e45a <strcspn+0x14>
 800e456:	42a5      	cmp	r5, r4
 800e458:	d004      	beq.n	800e464 <strcspn+0x1e>
 800e45a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800e45e:	2d00      	cmp	r5, #0
 800e460:	d1f9      	bne.n	800e456 <strcspn+0x10>
 800e462:	e7f2      	b.n	800e44a <strcspn+0x4>
 800e464:	1a30      	subs	r0, r6, r0
 800e466:	bd70      	pop	{r4, r5, r6, pc}

0800e468 <strspn>:
 800e468:	4603      	mov	r3, r0
 800e46a:	b570      	push	{r4, r5, r6, lr}
 800e46c:	461e      	mov	r6, r3
 800e46e:	f813 4b01 	ldrb.w	r4, [r3], #1
 800e472:	b13c      	cbz	r4, 800e484 <strspn+0x1c>
 800e474:	1e4a      	subs	r2, r1, #1
 800e476:	e001      	b.n	800e47c <strspn+0x14>
 800e478:	42a5      	cmp	r5, r4
 800e47a:	d0f7      	beq.n	800e46c <strspn+0x4>
 800e47c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800e480:	2d00      	cmp	r5, #0
 800e482:	d1f9      	bne.n	800e478 <strspn+0x10>
 800e484:	1a30      	subs	r0, r6, r0
 800e486:	bd70      	pop	{r4, r5, r6, pc}

0800e488 <_vsniprintf_r>:
 800e488:	b530      	push	{r4, r5, lr}
 800e48a:	1e14      	subs	r4, r2, #0
 800e48c:	4605      	mov	r5, r0
 800e48e:	b09b      	sub	sp, #108	; 0x6c
 800e490:	4618      	mov	r0, r3
 800e492:	da05      	bge.n	800e4a0 <_vsniprintf_r+0x18>
 800e494:	238b      	movs	r3, #139	; 0x8b
 800e496:	f04f 30ff 	mov.w	r0, #4294967295
 800e49a:	602b      	str	r3, [r5, #0]
 800e49c:	b01b      	add	sp, #108	; 0x6c
 800e49e:	bd30      	pop	{r4, r5, pc}
 800e4a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e4a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e4a8:	bf0c      	ite	eq
 800e4aa:	4623      	moveq	r3, r4
 800e4ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e4b0:	9302      	str	r3, [sp, #8]
 800e4b2:	9305      	str	r3, [sp, #20]
 800e4b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	9100      	str	r1, [sp, #0]
 800e4bc:	9104      	str	r1, [sp, #16]
 800e4be:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e4c2:	4669      	mov	r1, sp
 800e4c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f000 fbb4 	bl	800ec34 <_svfiprintf_r>
 800e4cc:	1c43      	adds	r3, r0, #1
 800e4ce:	bfbc      	itt	lt
 800e4d0:	238b      	movlt	r3, #139	; 0x8b
 800e4d2:	602b      	strlt	r3, [r5, #0]
 800e4d4:	2c00      	cmp	r4, #0
 800e4d6:	d0e1      	beq.n	800e49c <_vsniprintf_r+0x14>
 800e4d8:	2200      	movs	r2, #0
 800e4da:	9b00      	ldr	r3, [sp, #0]
 800e4dc:	701a      	strb	r2, [r3, #0]
 800e4de:	e7dd      	b.n	800e49c <_vsniprintf_r+0x14>

0800e4e0 <vsniprintf>:
 800e4e0:	b507      	push	{r0, r1, r2, lr}
 800e4e2:	9300      	str	r3, [sp, #0]
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	460a      	mov	r2, r1
 800e4e8:	4601      	mov	r1, r0
 800e4ea:	4803      	ldr	r0, [pc, #12]	; (800e4f8 <vsniprintf+0x18>)
 800e4ec:	6800      	ldr	r0, [r0, #0]
 800e4ee:	f7ff ffcb 	bl	800e488 <_vsniprintf_r>
 800e4f2:	b003      	add	sp, #12
 800e4f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4f8:	20000074 	.word	0x20000074

0800e4fc <__swbuf_r>:
 800e4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fe:	460e      	mov	r6, r1
 800e500:	4614      	mov	r4, r2
 800e502:	4605      	mov	r5, r0
 800e504:	b118      	cbz	r0, 800e50e <__swbuf_r+0x12>
 800e506:	6983      	ldr	r3, [r0, #24]
 800e508:	b90b      	cbnz	r3, 800e50e <__swbuf_r+0x12>
 800e50a:	f000 f9d9 	bl	800e8c0 <__sinit>
 800e50e:	4b21      	ldr	r3, [pc, #132]	; (800e594 <__swbuf_r+0x98>)
 800e510:	429c      	cmp	r4, r3
 800e512:	d12b      	bne.n	800e56c <__swbuf_r+0x70>
 800e514:	686c      	ldr	r4, [r5, #4]
 800e516:	69a3      	ldr	r3, [r4, #24]
 800e518:	60a3      	str	r3, [r4, #8]
 800e51a:	89a3      	ldrh	r3, [r4, #12]
 800e51c:	071a      	lsls	r2, r3, #28
 800e51e:	d52f      	bpl.n	800e580 <__swbuf_r+0x84>
 800e520:	6923      	ldr	r3, [r4, #16]
 800e522:	b36b      	cbz	r3, 800e580 <__swbuf_r+0x84>
 800e524:	6923      	ldr	r3, [r4, #16]
 800e526:	6820      	ldr	r0, [r4, #0]
 800e528:	b2f6      	uxtb	r6, r6
 800e52a:	1ac0      	subs	r0, r0, r3
 800e52c:	6963      	ldr	r3, [r4, #20]
 800e52e:	4637      	mov	r7, r6
 800e530:	4283      	cmp	r3, r0
 800e532:	dc04      	bgt.n	800e53e <__swbuf_r+0x42>
 800e534:	4621      	mov	r1, r4
 800e536:	4628      	mov	r0, r5
 800e538:	f000 f92e 	bl	800e798 <_fflush_r>
 800e53c:	bb30      	cbnz	r0, 800e58c <__swbuf_r+0x90>
 800e53e:	68a3      	ldr	r3, [r4, #8]
 800e540:	3001      	adds	r0, #1
 800e542:	3b01      	subs	r3, #1
 800e544:	60a3      	str	r3, [r4, #8]
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	1c5a      	adds	r2, r3, #1
 800e54a:	6022      	str	r2, [r4, #0]
 800e54c:	701e      	strb	r6, [r3, #0]
 800e54e:	6963      	ldr	r3, [r4, #20]
 800e550:	4283      	cmp	r3, r0
 800e552:	d004      	beq.n	800e55e <__swbuf_r+0x62>
 800e554:	89a3      	ldrh	r3, [r4, #12]
 800e556:	07db      	lsls	r3, r3, #31
 800e558:	d506      	bpl.n	800e568 <__swbuf_r+0x6c>
 800e55a:	2e0a      	cmp	r6, #10
 800e55c:	d104      	bne.n	800e568 <__swbuf_r+0x6c>
 800e55e:	4621      	mov	r1, r4
 800e560:	4628      	mov	r0, r5
 800e562:	f000 f919 	bl	800e798 <_fflush_r>
 800e566:	b988      	cbnz	r0, 800e58c <__swbuf_r+0x90>
 800e568:	4638      	mov	r0, r7
 800e56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e56c:	4b0a      	ldr	r3, [pc, #40]	; (800e598 <__swbuf_r+0x9c>)
 800e56e:	429c      	cmp	r4, r3
 800e570:	d101      	bne.n	800e576 <__swbuf_r+0x7a>
 800e572:	68ac      	ldr	r4, [r5, #8]
 800e574:	e7cf      	b.n	800e516 <__swbuf_r+0x1a>
 800e576:	4b09      	ldr	r3, [pc, #36]	; (800e59c <__swbuf_r+0xa0>)
 800e578:	429c      	cmp	r4, r3
 800e57a:	bf08      	it	eq
 800e57c:	68ec      	ldreq	r4, [r5, #12]
 800e57e:	e7ca      	b.n	800e516 <__swbuf_r+0x1a>
 800e580:	4621      	mov	r1, r4
 800e582:	4628      	mov	r0, r5
 800e584:	f000 f80c 	bl	800e5a0 <__swsetup_r>
 800e588:	2800      	cmp	r0, #0
 800e58a:	d0cb      	beq.n	800e524 <__swbuf_r+0x28>
 800e58c:	f04f 37ff 	mov.w	r7, #4294967295
 800e590:	e7ea      	b.n	800e568 <__swbuf_r+0x6c>
 800e592:	bf00      	nop
 800e594:	0800f89c 	.word	0x0800f89c
 800e598:	0800f8bc 	.word	0x0800f8bc
 800e59c:	0800f87c 	.word	0x0800f87c

0800e5a0 <__swsetup_r>:
 800e5a0:	4b32      	ldr	r3, [pc, #200]	; (800e66c <__swsetup_r+0xcc>)
 800e5a2:	b570      	push	{r4, r5, r6, lr}
 800e5a4:	681d      	ldr	r5, [r3, #0]
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	460c      	mov	r4, r1
 800e5aa:	b125      	cbz	r5, 800e5b6 <__swsetup_r+0x16>
 800e5ac:	69ab      	ldr	r3, [r5, #24]
 800e5ae:	b913      	cbnz	r3, 800e5b6 <__swsetup_r+0x16>
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	f000 f985 	bl	800e8c0 <__sinit>
 800e5b6:	4b2e      	ldr	r3, [pc, #184]	; (800e670 <__swsetup_r+0xd0>)
 800e5b8:	429c      	cmp	r4, r3
 800e5ba:	d10f      	bne.n	800e5dc <__swsetup_r+0x3c>
 800e5bc:	686c      	ldr	r4, [r5, #4]
 800e5be:	89a3      	ldrh	r3, [r4, #12]
 800e5c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5c4:	0719      	lsls	r1, r3, #28
 800e5c6:	d42c      	bmi.n	800e622 <__swsetup_r+0x82>
 800e5c8:	06dd      	lsls	r5, r3, #27
 800e5ca:	d411      	bmi.n	800e5f0 <__swsetup_r+0x50>
 800e5cc:	2309      	movs	r3, #9
 800e5ce:	6033      	str	r3, [r6, #0]
 800e5d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d8:	81a3      	strh	r3, [r4, #12]
 800e5da:	e03e      	b.n	800e65a <__swsetup_r+0xba>
 800e5dc:	4b25      	ldr	r3, [pc, #148]	; (800e674 <__swsetup_r+0xd4>)
 800e5de:	429c      	cmp	r4, r3
 800e5e0:	d101      	bne.n	800e5e6 <__swsetup_r+0x46>
 800e5e2:	68ac      	ldr	r4, [r5, #8]
 800e5e4:	e7eb      	b.n	800e5be <__swsetup_r+0x1e>
 800e5e6:	4b24      	ldr	r3, [pc, #144]	; (800e678 <__swsetup_r+0xd8>)
 800e5e8:	429c      	cmp	r4, r3
 800e5ea:	bf08      	it	eq
 800e5ec:	68ec      	ldreq	r4, [r5, #12]
 800e5ee:	e7e6      	b.n	800e5be <__swsetup_r+0x1e>
 800e5f0:	0758      	lsls	r0, r3, #29
 800e5f2:	d512      	bpl.n	800e61a <__swsetup_r+0x7a>
 800e5f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5f6:	b141      	cbz	r1, 800e60a <__swsetup_r+0x6a>
 800e5f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5fc:	4299      	cmp	r1, r3
 800e5fe:	d002      	beq.n	800e606 <__swsetup_r+0x66>
 800e600:	4630      	mov	r0, r6
 800e602:	f7ff fb6f 	bl	800dce4 <_free_r>
 800e606:	2300      	movs	r3, #0
 800e608:	6363      	str	r3, [r4, #52]	; 0x34
 800e60a:	89a3      	ldrh	r3, [r4, #12]
 800e60c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e610:	81a3      	strh	r3, [r4, #12]
 800e612:	2300      	movs	r3, #0
 800e614:	6063      	str	r3, [r4, #4]
 800e616:	6923      	ldr	r3, [r4, #16]
 800e618:	6023      	str	r3, [r4, #0]
 800e61a:	89a3      	ldrh	r3, [r4, #12]
 800e61c:	f043 0308 	orr.w	r3, r3, #8
 800e620:	81a3      	strh	r3, [r4, #12]
 800e622:	6923      	ldr	r3, [r4, #16]
 800e624:	b94b      	cbnz	r3, 800e63a <__swsetup_r+0x9a>
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e62c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e630:	d003      	beq.n	800e63a <__swsetup_r+0x9a>
 800e632:	4621      	mov	r1, r4
 800e634:	4630      	mov	r0, r6
 800e636:	f000 fa07 	bl	800ea48 <__smakebuf_r>
 800e63a:	89a0      	ldrh	r0, [r4, #12]
 800e63c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e640:	f010 0301 	ands.w	r3, r0, #1
 800e644:	d00a      	beq.n	800e65c <__swsetup_r+0xbc>
 800e646:	2300      	movs	r3, #0
 800e648:	60a3      	str	r3, [r4, #8]
 800e64a:	6963      	ldr	r3, [r4, #20]
 800e64c:	425b      	negs	r3, r3
 800e64e:	61a3      	str	r3, [r4, #24]
 800e650:	6923      	ldr	r3, [r4, #16]
 800e652:	b943      	cbnz	r3, 800e666 <__swsetup_r+0xc6>
 800e654:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e658:	d1ba      	bne.n	800e5d0 <__swsetup_r+0x30>
 800e65a:	bd70      	pop	{r4, r5, r6, pc}
 800e65c:	0781      	lsls	r1, r0, #30
 800e65e:	bf58      	it	pl
 800e660:	6963      	ldrpl	r3, [r4, #20]
 800e662:	60a3      	str	r3, [r4, #8]
 800e664:	e7f4      	b.n	800e650 <__swsetup_r+0xb0>
 800e666:	2000      	movs	r0, #0
 800e668:	e7f7      	b.n	800e65a <__swsetup_r+0xba>
 800e66a:	bf00      	nop
 800e66c:	20000074 	.word	0x20000074
 800e670:	0800f89c 	.word	0x0800f89c
 800e674:	0800f8bc 	.word	0x0800f8bc
 800e678:	0800f87c 	.word	0x0800f87c

0800e67c <abort>:
 800e67c:	2006      	movs	r0, #6
 800e67e:	b508      	push	{r3, lr}
 800e680:	f000 fc00 	bl	800ee84 <raise>
 800e684:	2001      	movs	r0, #1
 800e686:	f7fa f834 	bl	80086f2 <_exit>
	...

0800e68c <__sflush_r>:
 800e68c:	898a      	ldrh	r2, [r1, #12]
 800e68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e692:	4605      	mov	r5, r0
 800e694:	0710      	lsls	r0, r2, #28
 800e696:	460c      	mov	r4, r1
 800e698:	d458      	bmi.n	800e74c <__sflush_r+0xc0>
 800e69a:	684b      	ldr	r3, [r1, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	dc05      	bgt.n	800e6ac <__sflush_r+0x20>
 800e6a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	dc02      	bgt.n	800e6ac <__sflush_r+0x20>
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6ae:	2e00      	cmp	r6, #0
 800e6b0:	d0f9      	beq.n	800e6a6 <__sflush_r+0x1a>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e6b8:	682f      	ldr	r7, [r5, #0]
 800e6ba:	602b      	str	r3, [r5, #0]
 800e6bc:	d032      	beq.n	800e724 <__sflush_r+0x98>
 800e6be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e6c0:	89a3      	ldrh	r3, [r4, #12]
 800e6c2:	075a      	lsls	r2, r3, #29
 800e6c4:	d505      	bpl.n	800e6d2 <__sflush_r+0x46>
 800e6c6:	6863      	ldr	r3, [r4, #4]
 800e6c8:	1ac0      	subs	r0, r0, r3
 800e6ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6cc:	b10b      	cbz	r3, 800e6d2 <__sflush_r+0x46>
 800e6ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6d0:	1ac0      	subs	r0, r0, r3
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6d8:	4628      	mov	r0, r5
 800e6da:	6a21      	ldr	r1, [r4, #32]
 800e6dc:	47b0      	blx	r6
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	89a3      	ldrh	r3, [r4, #12]
 800e6e2:	d106      	bne.n	800e6f2 <__sflush_r+0x66>
 800e6e4:	6829      	ldr	r1, [r5, #0]
 800e6e6:	291d      	cmp	r1, #29
 800e6e8:	d82c      	bhi.n	800e744 <__sflush_r+0xb8>
 800e6ea:	4a2a      	ldr	r2, [pc, #168]	; (800e794 <__sflush_r+0x108>)
 800e6ec:	40ca      	lsrs	r2, r1
 800e6ee:	07d6      	lsls	r6, r2, #31
 800e6f0:	d528      	bpl.n	800e744 <__sflush_r+0xb8>
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	6062      	str	r2, [r4, #4]
 800e6f6:	6922      	ldr	r2, [r4, #16]
 800e6f8:	04d9      	lsls	r1, r3, #19
 800e6fa:	6022      	str	r2, [r4, #0]
 800e6fc:	d504      	bpl.n	800e708 <__sflush_r+0x7c>
 800e6fe:	1c42      	adds	r2, r0, #1
 800e700:	d101      	bne.n	800e706 <__sflush_r+0x7a>
 800e702:	682b      	ldr	r3, [r5, #0]
 800e704:	b903      	cbnz	r3, 800e708 <__sflush_r+0x7c>
 800e706:	6560      	str	r0, [r4, #84]	; 0x54
 800e708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e70a:	602f      	str	r7, [r5, #0]
 800e70c:	2900      	cmp	r1, #0
 800e70e:	d0ca      	beq.n	800e6a6 <__sflush_r+0x1a>
 800e710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e714:	4299      	cmp	r1, r3
 800e716:	d002      	beq.n	800e71e <__sflush_r+0x92>
 800e718:	4628      	mov	r0, r5
 800e71a:	f7ff fae3 	bl	800dce4 <_free_r>
 800e71e:	2000      	movs	r0, #0
 800e720:	6360      	str	r0, [r4, #52]	; 0x34
 800e722:	e7c1      	b.n	800e6a8 <__sflush_r+0x1c>
 800e724:	6a21      	ldr	r1, [r4, #32]
 800e726:	2301      	movs	r3, #1
 800e728:	4628      	mov	r0, r5
 800e72a:	47b0      	blx	r6
 800e72c:	1c41      	adds	r1, r0, #1
 800e72e:	d1c7      	bne.n	800e6c0 <__sflush_r+0x34>
 800e730:	682b      	ldr	r3, [r5, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d0c4      	beq.n	800e6c0 <__sflush_r+0x34>
 800e736:	2b1d      	cmp	r3, #29
 800e738:	d001      	beq.n	800e73e <__sflush_r+0xb2>
 800e73a:	2b16      	cmp	r3, #22
 800e73c:	d101      	bne.n	800e742 <__sflush_r+0xb6>
 800e73e:	602f      	str	r7, [r5, #0]
 800e740:	e7b1      	b.n	800e6a6 <__sflush_r+0x1a>
 800e742:	89a3      	ldrh	r3, [r4, #12]
 800e744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e748:	81a3      	strh	r3, [r4, #12]
 800e74a:	e7ad      	b.n	800e6a8 <__sflush_r+0x1c>
 800e74c:	690f      	ldr	r7, [r1, #16]
 800e74e:	2f00      	cmp	r7, #0
 800e750:	d0a9      	beq.n	800e6a6 <__sflush_r+0x1a>
 800e752:	0793      	lsls	r3, r2, #30
 800e754:	bf18      	it	ne
 800e756:	2300      	movne	r3, #0
 800e758:	680e      	ldr	r6, [r1, #0]
 800e75a:	bf08      	it	eq
 800e75c:	694b      	ldreq	r3, [r1, #20]
 800e75e:	eba6 0807 	sub.w	r8, r6, r7
 800e762:	600f      	str	r7, [r1, #0]
 800e764:	608b      	str	r3, [r1, #8]
 800e766:	f1b8 0f00 	cmp.w	r8, #0
 800e76a:	dd9c      	ble.n	800e6a6 <__sflush_r+0x1a>
 800e76c:	4643      	mov	r3, r8
 800e76e:	463a      	mov	r2, r7
 800e770:	4628      	mov	r0, r5
 800e772:	6a21      	ldr	r1, [r4, #32]
 800e774:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e776:	47b0      	blx	r6
 800e778:	2800      	cmp	r0, #0
 800e77a:	dc06      	bgt.n	800e78a <__sflush_r+0xfe>
 800e77c:	89a3      	ldrh	r3, [r4, #12]
 800e77e:	f04f 30ff 	mov.w	r0, #4294967295
 800e782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e786:	81a3      	strh	r3, [r4, #12]
 800e788:	e78e      	b.n	800e6a8 <__sflush_r+0x1c>
 800e78a:	4407      	add	r7, r0
 800e78c:	eba8 0800 	sub.w	r8, r8, r0
 800e790:	e7e9      	b.n	800e766 <__sflush_r+0xda>
 800e792:	bf00      	nop
 800e794:	20400001 	.word	0x20400001

0800e798 <_fflush_r>:
 800e798:	b538      	push	{r3, r4, r5, lr}
 800e79a:	690b      	ldr	r3, [r1, #16]
 800e79c:	4605      	mov	r5, r0
 800e79e:	460c      	mov	r4, r1
 800e7a0:	b913      	cbnz	r3, 800e7a8 <_fflush_r+0x10>
 800e7a2:	2500      	movs	r5, #0
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	bd38      	pop	{r3, r4, r5, pc}
 800e7a8:	b118      	cbz	r0, 800e7b2 <_fflush_r+0x1a>
 800e7aa:	6983      	ldr	r3, [r0, #24]
 800e7ac:	b90b      	cbnz	r3, 800e7b2 <_fflush_r+0x1a>
 800e7ae:	f000 f887 	bl	800e8c0 <__sinit>
 800e7b2:	4b14      	ldr	r3, [pc, #80]	; (800e804 <_fflush_r+0x6c>)
 800e7b4:	429c      	cmp	r4, r3
 800e7b6:	d11b      	bne.n	800e7f0 <_fflush_r+0x58>
 800e7b8:	686c      	ldr	r4, [r5, #4]
 800e7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0ef      	beq.n	800e7a2 <_fflush_r+0xa>
 800e7c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7c4:	07d0      	lsls	r0, r2, #31
 800e7c6:	d404      	bmi.n	800e7d2 <_fflush_r+0x3a>
 800e7c8:	0599      	lsls	r1, r3, #22
 800e7ca:	d402      	bmi.n	800e7d2 <_fflush_r+0x3a>
 800e7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7ce:	f000 f915 	bl	800e9fc <__retarget_lock_acquire_recursive>
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	f7ff ff59 	bl	800e68c <__sflush_r>
 800e7da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7dc:	4605      	mov	r5, r0
 800e7de:	07da      	lsls	r2, r3, #31
 800e7e0:	d4e0      	bmi.n	800e7a4 <_fflush_r+0xc>
 800e7e2:	89a3      	ldrh	r3, [r4, #12]
 800e7e4:	059b      	lsls	r3, r3, #22
 800e7e6:	d4dd      	bmi.n	800e7a4 <_fflush_r+0xc>
 800e7e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7ea:	f000 f908 	bl	800e9fe <__retarget_lock_release_recursive>
 800e7ee:	e7d9      	b.n	800e7a4 <_fflush_r+0xc>
 800e7f0:	4b05      	ldr	r3, [pc, #20]	; (800e808 <_fflush_r+0x70>)
 800e7f2:	429c      	cmp	r4, r3
 800e7f4:	d101      	bne.n	800e7fa <_fflush_r+0x62>
 800e7f6:	68ac      	ldr	r4, [r5, #8]
 800e7f8:	e7df      	b.n	800e7ba <_fflush_r+0x22>
 800e7fa:	4b04      	ldr	r3, [pc, #16]	; (800e80c <_fflush_r+0x74>)
 800e7fc:	429c      	cmp	r4, r3
 800e7fe:	bf08      	it	eq
 800e800:	68ec      	ldreq	r4, [r5, #12]
 800e802:	e7da      	b.n	800e7ba <_fflush_r+0x22>
 800e804:	0800f89c 	.word	0x0800f89c
 800e808:	0800f8bc 	.word	0x0800f8bc
 800e80c:	0800f87c 	.word	0x0800f87c

0800e810 <std>:
 800e810:	2300      	movs	r3, #0
 800e812:	b510      	push	{r4, lr}
 800e814:	4604      	mov	r4, r0
 800e816:	e9c0 3300 	strd	r3, r3, [r0]
 800e81a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e81e:	6083      	str	r3, [r0, #8]
 800e820:	8181      	strh	r1, [r0, #12]
 800e822:	6643      	str	r3, [r0, #100]	; 0x64
 800e824:	81c2      	strh	r2, [r0, #14]
 800e826:	6183      	str	r3, [r0, #24]
 800e828:	4619      	mov	r1, r3
 800e82a:	2208      	movs	r2, #8
 800e82c:	305c      	adds	r0, #92	; 0x5c
 800e82e:	f7ff fa51 	bl	800dcd4 <memset>
 800e832:	4b05      	ldr	r3, [pc, #20]	; (800e848 <std+0x38>)
 800e834:	6224      	str	r4, [r4, #32]
 800e836:	6263      	str	r3, [r4, #36]	; 0x24
 800e838:	4b04      	ldr	r3, [pc, #16]	; (800e84c <std+0x3c>)
 800e83a:	62a3      	str	r3, [r4, #40]	; 0x28
 800e83c:	4b04      	ldr	r3, [pc, #16]	; (800e850 <std+0x40>)
 800e83e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e840:	4b04      	ldr	r3, [pc, #16]	; (800e854 <std+0x44>)
 800e842:	6323      	str	r3, [r4, #48]	; 0x30
 800e844:	bd10      	pop	{r4, pc}
 800e846:	bf00      	nop
 800e848:	0800eebd 	.word	0x0800eebd
 800e84c:	0800eedf 	.word	0x0800eedf
 800e850:	0800ef17 	.word	0x0800ef17
 800e854:	0800ef3b 	.word	0x0800ef3b

0800e858 <_cleanup_r>:
 800e858:	4901      	ldr	r1, [pc, #4]	; (800e860 <_cleanup_r+0x8>)
 800e85a:	f000 b8af 	b.w	800e9bc <_fwalk_reent>
 800e85e:	bf00      	nop
 800e860:	0800e799 	.word	0x0800e799

0800e864 <__sfmoreglue>:
 800e864:	b570      	push	{r4, r5, r6, lr}
 800e866:	2568      	movs	r5, #104	; 0x68
 800e868:	1e4a      	subs	r2, r1, #1
 800e86a:	4355      	muls	r5, r2
 800e86c:	460e      	mov	r6, r1
 800e86e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e872:	f7ff fa83 	bl	800dd7c <_malloc_r>
 800e876:	4604      	mov	r4, r0
 800e878:	b140      	cbz	r0, 800e88c <__sfmoreglue+0x28>
 800e87a:	2100      	movs	r1, #0
 800e87c:	e9c0 1600 	strd	r1, r6, [r0]
 800e880:	300c      	adds	r0, #12
 800e882:	60a0      	str	r0, [r4, #8]
 800e884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e888:	f7ff fa24 	bl	800dcd4 <memset>
 800e88c:	4620      	mov	r0, r4
 800e88e:	bd70      	pop	{r4, r5, r6, pc}

0800e890 <__sfp_lock_acquire>:
 800e890:	4801      	ldr	r0, [pc, #4]	; (800e898 <__sfp_lock_acquire+0x8>)
 800e892:	f000 b8b3 	b.w	800e9fc <__retarget_lock_acquire_recursive>
 800e896:	bf00      	nop
 800e898:	20000a5c 	.word	0x20000a5c

0800e89c <__sfp_lock_release>:
 800e89c:	4801      	ldr	r0, [pc, #4]	; (800e8a4 <__sfp_lock_release+0x8>)
 800e89e:	f000 b8ae 	b.w	800e9fe <__retarget_lock_release_recursive>
 800e8a2:	bf00      	nop
 800e8a4:	20000a5c 	.word	0x20000a5c

0800e8a8 <__sinit_lock_acquire>:
 800e8a8:	4801      	ldr	r0, [pc, #4]	; (800e8b0 <__sinit_lock_acquire+0x8>)
 800e8aa:	f000 b8a7 	b.w	800e9fc <__retarget_lock_acquire_recursive>
 800e8ae:	bf00      	nop
 800e8b0:	20000a57 	.word	0x20000a57

0800e8b4 <__sinit_lock_release>:
 800e8b4:	4801      	ldr	r0, [pc, #4]	; (800e8bc <__sinit_lock_release+0x8>)
 800e8b6:	f000 b8a2 	b.w	800e9fe <__retarget_lock_release_recursive>
 800e8ba:	bf00      	nop
 800e8bc:	20000a57 	.word	0x20000a57

0800e8c0 <__sinit>:
 800e8c0:	b510      	push	{r4, lr}
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	f7ff fff0 	bl	800e8a8 <__sinit_lock_acquire>
 800e8c8:	69a3      	ldr	r3, [r4, #24]
 800e8ca:	b11b      	cbz	r3, 800e8d4 <__sinit+0x14>
 800e8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8d0:	f7ff bff0 	b.w	800e8b4 <__sinit_lock_release>
 800e8d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e8d8:	6523      	str	r3, [r4, #80]	; 0x50
 800e8da:	4b13      	ldr	r3, [pc, #76]	; (800e928 <__sinit+0x68>)
 800e8dc:	4a13      	ldr	r2, [pc, #76]	; (800e92c <__sinit+0x6c>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e8e2:	42a3      	cmp	r3, r4
 800e8e4:	bf08      	it	eq
 800e8e6:	2301      	moveq	r3, #1
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	bf08      	it	eq
 800e8ec:	61a3      	streq	r3, [r4, #24]
 800e8ee:	f000 f81f 	bl	800e930 <__sfp>
 800e8f2:	6060      	str	r0, [r4, #4]
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f000 f81b 	bl	800e930 <__sfp>
 800e8fa:	60a0      	str	r0, [r4, #8]
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f000 f817 	bl	800e930 <__sfp>
 800e902:	2200      	movs	r2, #0
 800e904:	2104      	movs	r1, #4
 800e906:	60e0      	str	r0, [r4, #12]
 800e908:	6860      	ldr	r0, [r4, #4]
 800e90a:	f7ff ff81 	bl	800e810 <std>
 800e90e:	2201      	movs	r2, #1
 800e910:	2109      	movs	r1, #9
 800e912:	68a0      	ldr	r0, [r4, #8]
 800e914:	f7ff ff7c 	bl	800e810 <std>
 800e918:	2202      	movs	r2, #2
 800e91a:	2112      	movs	r1, #18
 800e91c:	68e0      	ldr	r0, [r4, #12]
 800e91e:	f7ff ff77 	bl	800e810 <std>
 800e922:	2301      	movs	r3, #1
 800e924:	61a3      	str	r3, [r4, #24]
 800e926:	e7d1      	b.n	800e8cc <__sinit+0xc>
 800e928:	0800f844 	.word	0x0800f844
 800e92c:	0800e859 	.word	0x0800e859

0800e930 <__sfp>:
 800e930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e932:	4607      	mov	r7, r0
 800e934:	f7ff ffac 	bl	800e890 <__sfp_lock_acquire>
 800e938:	4b1e      	ldr	r3, [pc, #120]	; (800e9b4 <__sfp+0x84>)
 800e93a:	681e      	ldr	r6, [r3, #0]
 800e93c:	69b3      	ldr	r3, [r6, #24]
 800e93e:	b913      	cbnz	r3, 800e946 <__sfp+0x16>
 800e940:	4630      	mov	r0, r6
 800e942:	f7ff ffbd 	bl	800e8c0 <__sinit>
 800e946:	3648      	adds	r6, #72	; 0x48
 800e948:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	d503      	bpl.n	800e958 <__sfp+0x28>
 800e950:	6833      	ldr	r3, [r6, #0]
 800e952:	b30b      	cbz	r3, 800e998 <__sfp+0x68>
 800e954:	6836      	ldr	r6, [r6, #0]
 800e956:	e7f7      	b.n	800e948 <__sfp+0x18>
 800e958:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e95c:	b9d5      	cbnz	r5, 800e994 <__sfp+0x64>
 800e95e:	4b16      	ldr	r3, [pc, #88]	; (800e9b8 <__sfp+0x88>)
 800e960:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e964:	60e3      	str	r3, [r4, #12]
 800e966:	6665      	str	r5, [r4, #100]	; 0x64
 800e968:	f000 f847 	bl	800e9fa <__retarget_lock_init_recursive>
 800e96c:	f7ff ff96 	bl	800e89c <__sfp_lock_release>
 800e970:	2208      	movs	r2, #8
 800e972:	4629      	mov	r1, r5
 800e974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e97c:	6025      	str	r5, [r4, #0]
 800e97e:	61a5      	str	r5, [r4, #24]
 800e980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e984:	f7ff f9a6 	bl	800dcd4 <memset>
 800e988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e98c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e990:	4620      	mov	r0, r4
 800e992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e994:	3468      	adds	r4, #104	; 0x68
 800e996:	e7d9      	b.n	800e94c <__sfp+0x1c>
 800e998:	2104      	movs	r1, #4
 800e99a:	4638      	mov	r0, r7
 800e99c:	f7ff ff62 	bl	800e864 <__sfmoreglue>
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	6030      	str	r0, [r6, #0]
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d1d5      	bne.n	800e954 <__sfp+0x24>
 800e9a8:	f7ff ff78 	bl	800e89c <__sfp_lock_release>
 800e9ac:	230c      	movs	r3, #12
 800e9ae:	603b      	str	r3, [r7, #0]
 800e9b0:	e7ee      	b.n	800e990 <__sfp+0x60>
 800e9b2:	bf00      	nop
 800e9b4:	0800f844 	.word	0x0800f844
 800e9b8:	ffff0001 	.word	0xffff0001

0800e9bc <_fwalk_reent>:
 800e9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	4688      	mov	r8, r1
 800e9c4:	2700      	movs	r7, #0
 800e9c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e9ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e9ce:	f1b9 0901 	subs.w	r9, r9, #1
 800e9d2:	d505      	bpl.n	800e9e0 <_fwalk_reent+0x24>
 800e9d4:	6824      	ldr	r4, [r4, #0]
 800e9d6:	2c00      	cmp	r4, #0
 800e9d8:	d1f7      	bne.n	800e9ca <_fwalk_reent+0xe>
 800e9da:	4638      	mov	r0, r7
 800e9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9e0:	89ab      	ldrh	r3, [r5, #12]
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d907      	bls.n	800e9f6 <_fwalk_reent+0x3a>
 800e9e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	d003      	beq.n	800e9f6 <_fwalk_reent+0x3a>
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	47c0      	blx	r8
 800e9f4:	4307      	orrs	r7, r0
 800e9f6:	3568      	adds	r5, #104	; 0x68
 800e9f8:	e7e9      	b.n	800e9ce <_fwalk_reent+0x12>

0800e9fa <__retarget_lock_init_recursive>:
 800e9fa:	4770      	bx	lr

0800e9fc <__retarget_lock_acquire_recursive>:
 800e9fc:	4770      	bx	lr

0800e9fe <__retarget_lock_release_recursive>:
 800e9fe:	4770      	bx	lr

0800ea00 <__swhatbuf_r>:
 800ea00:	b570      	push	{r4, r5, r6, lr}
 800ea02:	460e      	mov	r6, r1
 800ea04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea08:	4614      	mov	r4, r2
 800ea0a:	2900      	cmp	r1, #0
 800ea0c:	461d      	mov	r5, r3
 800ea0e:	b096      	sub	sp, #88	; 0x58
 800ea10:	da07      	bge.n	800ea22 <__swhatbuf_r+0x22>
 800ea12:	2300      	movs	r3, #0
 800ea14:	602b      	str	r3, [r5, #0]
 800ea16:	89b3      	ldrh	r3, [r6, #12]
 800ea18:	061a      	lsls	r2, r3, #24
 800ea1a:	d410      	bmi.n	800ea3e <__swhatbuf_r+0x3e>
 800ea1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea20:	e00e      	b.n	800ea40 <__swhatbuf_r+0x40>
 800ea22:	466a      	mov	r2, sp
 800ea24:	f000 fab0 	bl	800ef88 <_fstat_r>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	dbf2      	blt.n	800ea12 <__swhatbuf_r+0x12>
 800ea2c:	9a01      	ldr	r2, [sp, #4]
 800ea2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ea32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ea36:	425a      	negs	r2, r3
 800ea38:	415a      	adcs	r2, r3
 800ea3a:	602a      	str	r2, [r5, #0]
 800ea3c:	e7ee      	b.n	800ea1c <__swhatbuf_r+0x1c>
 800ea3e:	2340      	movs	r3, #64	; 0x40
 800ea40:	2000      	movs	r0, #0
 800ea42:	6023      	str	r3, [r4, #0]
 800ea44:	b016      	add	sp, #88	; 0x58
 800ea46:	bd70      	pop	{r4, r5, r6, pc}

0800ea48 <__smakebuf_r>:
 800ea48:	898b      	ldrh	r3, [r1, #12]
 800ea4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea4c:	079d      	lsls	r5, r3, #30
 800ea4e:	4606      	mov	r6, r0
 800ea50:	460c      	mov	r4, r1
 800ea52:	d507      	bpl.n	800ea64 <__smakebuf_r+0x1c>
 800ea54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea58:	6023      	str	r3, [r4, #0]
 800ea5a:	6123      	str	r3, [r4, #16]
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	6163      	str	r3, [r4, #20]
 800ea60:	b002      	add	sp, #8
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	466a      	mov	r2, sp
 800ea66:	ab01      	add	r3, sp, #4
 800ea68:	f7ff ffca 	bl	800ea00 <__swhatbuf_r>
 800ea6c:	9900      	ldr	r1, [sp, #0]
 800ea6e:	4605      	mov	r5, r0
 800ea70:	4630      	mov	r0, r6
 800ea72:	f7ff f983 	bl	800dd7c <_malloc_r>
 800ea76:	b948      	cbnz	r0, 800ea8c <__smakebuf_r+0x44>
 800ea78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea7c:	059a      	lsls	r2, r3, #22
 800ea7e:	d4ef      	bmi.n	800ea60 <__smakebuf_r+0x18>
 800ea80:	f023 0303 	bic.w	r3, r3, #3
 800ea84:	f043 0302 	orr.w	r3, r3, #2
 800ea88:	81a3      	strh	r3, [r4, #12]
 800ea8a:	e7e3      	b.n	800ea54 <__smakebuf_r+0xc>
 800ea8c:	4b0d      	ldr	r3, [pc, #52]	; (800eac4 <__smakebuf_r+0x7c>)
 800ea8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ea90:	89a3      	ldrh	r3, [r4, #12]
 800ea92:	6020      	str	r0, [r4, #0]
 800ea94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea98:	81a3      	strh	r3, [r4, #12]
 800ea9a:	9b00      	ldr	r3, [sp, #0]
 800ea9c:	6120      	str	r0, [r4, #16]
 800ea9e:	6163      	str	r3, [r4, #20]
 800eaa0:	9b01      	ldr	r3, [sp, #4]
 800eaa2:	b15b      	cbz	r3, 800eabc <__smakebuf_r+0x74>
 800eaa4:	4630      	mov	r0, r6
 800eaa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eaaa:	f000 fa7f 	bl	800efac <_isatty_r>
 800eaae:	b128      	cbz	r0, 800eabc <__smakebuf_r+0x74>
 800eab0:	89a3      	ldrh	r3, [r4, #12]
 800eab2:	f023 0303 	bic.w	r3, r3, #3
 800eab6:	f043 0301 	orr.w	r3, r3, #1
 800eaba:	81a3      	strh	r3, [r4, #12]
 800eabc:	89a0      	ldrh	r0, [r4, #12]
 800eabe:	4305      	orrs	r5, r0
 800eac0:	81a5      	strh	r5, [r4, #12]
 800eac2:	e7cd      	b.n	800ea60 <__smakebuf_r+0x18>
 800eac4:	0800e859 	.word	0x0800e859

0800eac8 <memchr>:
 800eac8:	4603      	mov	r3, r0
 800eaca:	b510      	push	{r4, lr}
 800eacc:	b2c9      	uxtb	r1, r1
 800eace:	4402      	add	r2, r0
 800ead0:	4293      	cmp	r3, r2
 800ead2:	4618      	mov	r0, r3
 800ead4:	d101      	bne.n	800eada <memchr+0x12>
 800ead6:	2000      	movs	r0, #0
 800ead8:	e003      	b.n	800eae2 <memchr+0x1a>
 800eada:	7804      	ldrb	r4, [r0, #0]
 800eadc:	3301      	adds	r3, #1
 800eade:	428c      	cmp	r4, r1
 800eae0:	d1f6      	bne.n	800ead0 <memchr+0x8>
 800eae2:	bd10      	pop	{r4, pc}

0800eae4 <memmove>:
 800eae4:	4288      	cmp	r0, r1
 800eae6:	b510      	push	{r4, lr}
 800eae8:	eb01 0402 	add.w	r4, r1, r2
 800eaec:	d902      	bls.n	800eaf4 <memmove+0x10>
 800eaee:	4284      	cmp	r4, r0
 800eaf0:	4623      	mov	r3, r4
 800eaf2:	d807      	bhi.n	800eb04 <memmove+0x20>
 800eaf4:	1e43      	subs	r3, r0, #1
 800eaf6:	42a1      	cmp	r1, r4
 800eaf8:	d008      	beq.n	800eb0c <memmove+0x28>
 800eafa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eafe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb02:	e7f8      	b.n	800eaf6 <memmove+0x12>
 800eb04:	4601      	mov	r1, r0
 800eb06:	4402      	add	r2, r0
 800eb08:	428a      	cmp	r2, r1
 800eb0a:	d100      	bne.n	800eb0e <memmove+0x2a>
 800eb0c:	bd10      	pop	{r4, pc}
 800eb0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb16:	e7f7      	b.n	800eb08 <memmove+0x24>

0800eb18 <__malloc_lock>:
 800eb18:	4801      	ldr	r0, [pc, #4]	; (800eb20 <__malloc_lock+0x8>)
 800eb1a:	f7ff bf6f 	b.w	800e9fc <__retarget_lock_acquire_recursive>
 800eb1e:	bf00      	nop
 800eb20:	20000a58 	.word	0x20000a58

0800eb24 <__malloc_unlock>:
 800eb24:	4801      	ldr	r0, [pc, #4]	; (800eb2c <__malloc_unlock+0x8>)
 800eb26:	f7ff bf6a 	b.w	800e9fe <__retarget_lock_release_recursive>
 800eb2a:	bf00      	nop
 800eb2c:	20000a58 	.word	0x20000a58

0800eb30 <_realloc_r>:
 800eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb32:	4607      	mov	r7, r0
 800eb34:	4614      	mov	r4, r2
 800eb36:	460e      	mov	r6, r1
 800eb38:	b921      	cbnz	r1, 800eb44 <_realloc_r+0x14>
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eb40:	f7ff b91c 	b.w	800dd7c <_malloc_r>
 800eb44:	b922      	cbnz	r2, 800eb50 <_realloc_r+0x20>
 800eb46:	f7ff f8cd 	bl	800dce4 <_free_r>
 800eb4a:	4625      	mov	r5, r4
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb50:	f000 fa4e 	bl	800eff0 <_malloc_usable_size_r>
 800eb54:	42a0      	cmp	r0, r4
 800eb56:	d20f      	bcs.n	800eb78 <_realloc_r+0x48>
 800eb58:	4621      	mov	r1, r4
 800eb5a:	4638      	mov	r0, r7
 800eb5c:	f7ff f90e 	bl	800dd7c <_malloc_r>
 800eb60:	4605      	mov	r5, r0
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d0f2      	beq.n	800eb4c <_realloc_r+0x1c>
 800eb66:	4631      	mov	r1, r6
 800eb68:	4622      	mov	r2, r4
 800eb6a:	f7ff f8a5 	bl	800dcb8 <memcpy>
 800eb6e:	4631      	mov	r1, r6
 800eb70:	4638      	mov	r0, r7
 800eb72:	f7ff f8b7 	bl	800dce4 <_free_r>
 800eb76:	e7e9      	b.n	800eb4c <_realloc_r+0x1c>
 800eb78:	4635      	mov	r5, r6
 800eb7a:	e7e7      	b.n	800eb4c <_realloc_r+0x1c>

0800eb7c <__ssputs_r>:
 800eb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb80:	688e      	ldr	r6, [r1, #8]
 800eb82:	4682      	mov	sl, r0
 800eb84:	429e      	cmp	r6, r3
 800eb86:	460c      	mov	r4, r1
 800eb88:	4690      	mov	r8, r2
 800eb8a:	461f      	mov	r7, r3
 800eb8c:	d838      	bhi.n	800ec00 <__ssputs_r+0x84>
 800eb8e:	898a      	ldrh	r2, [r1, #12]
 800eb90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb94:	d032      	beq.n	800ebfc <__ssputs_r+0x80>
 800eb96:	6825      	ldr	r5, [r4, #0]
 800eb98:	6909      	ldr	r1, [r1, #16]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	eba5 0901 	sub.w	r9, r5, r1
 800eba0:	6965      	ldr	r5, [r4, #20]
 800eba2:	444b      	add	r3, r9
 800eba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ebac:	106d      	asrs	r5, r5, #1
 800ebae:	429d      	cmp	r5, r3
 800ebb0:	bf38      	it	cc
 800ebb2:	461d      	movcc	r5, r3
 800ebb4:	0553      	lsls	r3, r2, #21
 800ebb6:	d531      	bpl.n	800ec1c <__ssputs_r+0xa0>
 800ebb8:	4629      	mov	r1, r5
 800ebba:	f7ff f8df 	bl	800dd7c <_malloc_r>
 800ebbe:	4606      	mov	r6, r0
 800ebc0:	b950      	cbnz	r0, 800ebd8 <__ssputs_r+0x5c>
 800ebc2:	230c      	movs	r3, #12
 800ebc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc8:	f8ca 3000 	str.w	r3, [sl]
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebd2:	81a3      	strh	r3, [r4, #12]
 800ebd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebd8:	464a      	mov	r2, r9
 800ebda:	6921      	ldr	r1, [r4, #16]
 800ebdc:	f7ff f86c 	bl	800dcb8 <memcpy>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ebe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebea:	81a3      	strh	r3, [r4, #12]
 800ebec:	6126      	str	r6, [r4, #16]
 800ebee:	444e      	add	r6, r9
 800ebf0:	6026      	str	r6, [r4, #0]
 800ebf2:	463e      	mov	r6, r7
 800ebf4:	6165      	str	r5, [r4, #20]
 800ebf6:	eba5 0509 	sub.w	r5, r5, r9
 800ebfa:	60a5      	str	r5, [r4, #8]
 800ebfc:	42be      	cmp	r6, r7
 800ebfe:	d900      	bls.n	800ec02 <__ssputs_r+0x86>
 800ec00:	463e      	mov	r6, r7
 800ec02:	4632      	mov	r2, r6
 800ec04:	4641      	mov	r1, r8
 800ec06:	6820      	ldr	r0, [r4, #0]
 800ec08:	f7ff ff6c 	bl	800eae4 <memmove>
 800ec0c:	68a3      	ldr	r3, [r4, #8]
 800ec0e:	6822      	ldr	r2, [r4, #0]
 800ec10:	1b9b      	subs	r3, r3, r6
 800ec12:	4432      	add	r2, r6
 800ec14:	2000      	movs	r0, #0
 800ec16:	60a3      	str	r3, [r4, #8]
 800ec18:	6022      	str	r2, [r4, #0]
 800ec1a:	e7db      	b.n	800ebd4 <__ssputs_r+0x58>
 800ec1c:	462a      	mov	r2, r5
 800ec1e:	f7ff ff87 	bl	800eb30 <_realloc_r>
 800ec22:	4606      	mov	r6, r0
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d1e1      	bne.n	800ebec <__ssputs_r+0x70>
 800ec28:	4650      	mov	r0, sl
 800ec2a:	6921      	ldr	r1, [r4, #16]
 800ec2c:	f7ff f85a 	bl	800dce4 <_free_r>
 800ec30:	e7c7      	b.n	800ebc2 <__ssputs_r+0x46>
	...

0800ec34 <_svfiprintf_r>:
 800ec34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec38:	4698      	mov	r8, r3
 800ec3a:	898b      	ldrh	r3, [r1, #12]
 800ec3c:	4607      	mov	r7, r0
 800ec3e:	061b      	lsls	r3, r3, #24
 800ec40:	460d      	mov	r5, r1
 800ec42:	4614      	mov	r4, r2
 800ec44:	b09d      	sub	sp, #116	; 0x74
 800ec46:	d50e      	bpl.n	800ec66 <_svfiprintf_r+0x32>
 800ec48:	690b      	ldr	r3, [r1, #16]
 800ec4a:	b963      	cbnz	r3, 800ec66 <_svfiprintf_r+0x32>
 800ec4c:	2140      	movs	r1, #64	; 0x40
 800ec4e:	f7ff f895 	bl	800dd7c <_malloc_r>
 800ec52:	6028      	str	r0, [r5, #0]
 800ec54:	6128      	str	r0, [r5, #16]
 800ec56:	b920      	cbnz	r0, 800ec62 <_svfiprintf_r+0x2e>
 800ec58:	230c      	movs	r3, #12
 800ec5a:	603b      	str	r3, [r7, #0]
 800ec5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec60:	e0d1      	b.n	800ee06 <_svfiprintf_r+0x1d2>
 800ec62:	2340      	movs	r3, #64	; 0x40
 800ec64:	616b      	str	r3, [r5, #20]
 800ec66:	2300      	movs	r3, #0
 800ec68:	9309      	str	r3, [sp, #36]	; 0x24
 800ec6a:	2320      	movs	r3, #32
 800ec6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec70:	2330      	movs	r3, #48	; 0x30
 800ec72:	f04f 0901 	mov.w	r9, #1
 800ec76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ee20 <_svfiprintf_r+0x1ec>
 800ec7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec82:	4623      	mov	r3, r4
 800ec84:	469a      	mov	sl, r3
 800ec86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec8a:	b10a      	cbz	r2, 800ec90 <_svfiprintf_r+0x5c>
 800ec8c:	2a25      	cmp	r2, #37	; 0x25
 800ec8e:	d1f9      	bne.n	800ec84 <_svfiprintf_r+0x50>
 800ec90:	ebba 0b04 	subs.w	fp, sl, r4
 800ec94:	d00b      	beq.n	800ecae <_svfiprintf_r+0x7a>
 800ec96:	465b      	mov	r3, fp
 800ec98:	4622      	mov	r2, r4
 800ec9a:	4629      	mov	r1, r5
 800ec9c:	4638      	mov	r0, r7
 800ec9e:	f7ff ff6d 	bl	800eb7c <__ssputs_r>
 800eca2:	3001      	adds	r0, #1
 800eca4:	f000 80aa 	beq.w	800edfc <_svfiprintf_r+0x1c8>
 800eca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecaa:	445a      	add	r2, fp
 800ecac:	9209      	str	r2, [sp, #36]	; 0x24
 800ecae:	f89a 3000 	ldrb.w	r3, [sl]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f000 80a2 	beq.w	800edfc <_svfiprintf_r+0x1c8>
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f04f 32ff 	mov.w	r2, #4294967295
 800ecbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecc2:	f10a 0a01 	add.w	sl, sl, #1
 800ecc6:	9304      	str	r3, [sp, #16]
 800ecc8:	9307      	str	r3, [sp, #28]
 800ecca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecce:	931a      	str	r3, [sp, #104]	; 0x68
 800ecd0:	4654      	mov	r4, sl
 800ecd2:	2205      	movs	r2, #5
 800ecd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecd8:	4851      	ldr	r0, [pc, #324]	; (800ee20 <_svfiprintf_r+0x1ec>)
 800ecda:	f7ff fef5 	bl	800eac8 <memchr>
 800ecde:	9a04      	ldr	r2, [sp, #16]
 800ece0:	b9d8      	cbnz	r0, 800ed1a <_svfiprintf_r+0xe6>
 800ece2:	06d0      	lsls	r0, r2, #27
 800ece4:	bf44      	itt	mi
 800ece6:	2320      	movmi	r3, #32
 800ece8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecec:	0711      	lsls	r1, r2, #28
 800ecee:	bf44      	itt	mi
 800ecf0:	232b      	movmi	r3, #43	; 0x2b
 800ecf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecf6:	f89a 3000 	ldrb.w	r3, [sl]
 800ecfa:	2b2a      	cmp	r3, #42	; 0x2a
 800ecfc:	d015      	beq.n	800ed2a <_svfiprintf_r+0xf6>
 800ecfe:	4654      	mov	r4, sl
 800ed00:	2000      	movs	r0, #0
 800ed02:	f04f 0c0a 	mov.w	ip, #10
 800ed06:	9a07      	ldr	r2, [sp, #28]
 800ed08:	4621      	mov	r1, r4
 800ed0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed0e:	3b30      	subs	r3, #48	; 0x30
 800ed10:	2b09      	cmp	r3, #9
 800ed12:	d94e      	bls.n	800edb2 <_svfiprintf_r+0x17e>
 800ed14:	b1b0      	cbz	r0, 800ed44 <_svfiprintf_r+0x110>
 800ed16:	9207      	str	r2, [sp, #28]
 800ed18:	e014      	b.n	800ed44 <_svfiprintf_r+0x110>
 800ed1a:	eba0 0308 	sub.w	r3, r0, r8
 800ed1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ed22:	4313      	orrs	r3, r2
 800ed24:	46a2      	mov	sl, r4
 800ed26:	9304      	str	r3, [sp, #16]
 800ed28:	e7d2      	b.n	800ecd0 <_svfiprintf_r+0x9c>
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	1d19      	adds	r1, r3, #4
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	9103      	str	r1, [sp, #12]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	bfbb      	ittet	lt
 800ed36:	425b      	neglt	r3, r3
 800ed38:	f042 0202 	orrlt.w	r2, r2, #2
 800ed3c:	9307      	strge	r3, [sp, #28]
 800ed3e:	9307      	strlt	r3, [sp, #28]
 800ed40:	bfb8      	it	lt
 800ed42:	9204      	strlt	r2, [sp, #16]
 800ed44:	7823      	ldrb	r3, [r4, #0]
 800ed46:	2b2e      	cmp	r3, #46	; 0x2e
 800ed48:	d10c      	bne.n	800ed64 <_svfiprintf_r+0x130>
 800ed4a:	7863      	ldrb	r3, [r4, #1]
 800ed4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed4e:	d135      	bne.n	800edbc <_svfiprintf_r+0x188>
 800ed50:	9b03      	ldr	r3, [sp, #12]
 800ed52:	3402      	adds	r4, #2
 800ed54:	1d1a      	adds	r2, r3, #4
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	9203      	str	r2, [sp, #12]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	bfb8      	it	lt
 800ed5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed62:	9305      	str	r3, [sp, #20]
 800ed64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ee30 <_svfiprintf_r+0x1fc>
 800ed68:	2203      	movs	r2, #3
 800ed6a:	4650      	mov	r0, sl
 800ed6c:	7821      	ldrb	r1, [r4, #0]
 800ed6e:	f7ff feab 	bl	800eac8 <memchr>
 800ed72:	b140      	cbz	r0, 800ed86 <_svfiprintf_r+0x152>
 800ed74:	2340      	movs	r3, #64	; 0x40
 800ed76:	eba0 000a 	sub.w	r0, r0, sl
 800ed7a:	fa03 f000 	lsl.w	r0, r3, r0
 800ed7e:	9b04      	ldr	r3, [sp, #16]
 800ed80:	3401      	adds	r4, #1
 800ed82:	4303      	orrs	r3, r0
 800ed84:	9304      	str	r3, [sp, #16]
 800ed86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed8a:	2206      	movs	r2, #6
 800ed8c:	4825      	ldr	r0, [pc, #148]	; (800ee24 <_svfiprintf_r+0x1f0>)
 800ed8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed92:	f7ff fe99 	bl	800eac8 <memchr>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d038      	beq.n	800ee0c <_svfiprintf_r+0x1d8>
 800ed9a:	4b23      	ldr	r3, [pc, #140]	; (800ee28 <_svfiprintf_r+0x1f4>)
 800ed9c:	bb1b      	cbnz	r3, 800ede6 <_svfiprintf_r+0x1b2>
 800ed9e:	9b03      	ldr	r3, [sp, #12]
 800eda0:	3307      	adds	r3, #7
 800eda2:	f023 0307 	bic.w	r3, r3, #7
 800eda6:	3308      	adds	r3, #8
 800eda8:	9303      	str	r3, [sp, #12]
 800edaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edac:	4433      	add	r3, r6
 800edae:	9309      	str	r3, [sp, #36]	; 0x24
 800edb0:	e767      	b.n	800ec82 <_svfiprintf_r+0x4e>
 800edb2:	460c      	mov	r4, r1
 800edb4:	2001      	movs	r0, #1
 800edb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800edba:	e7a5      	b.n	800ed08 <_svfiprintf_r+0xd4>
 800edbc:	2300      	movs	r3, #0
 800edbe:	f04f 0c0a 	mov.w	ip, #10
 800edc2:	4619      	mov	r1, r3
 800edc4:	3401      	adds	r4, #1
 800edc6:	9305      	str	r3, [sp, #20]
 800edc8:	4620      	mov	r0, r4
 800edca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edce:	3a30      	subs	r2, #48	; 0x30
 800edd0:	2a09      	cmp	r2, #9
 800edd2:	d903      	bls.n	800eddc <_svfiprintf_r+0x1a8>
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d0c5      	beq.n	800ed64 <_svfiprintf_r+0x130>
 800edd8:	9105      	str	r1, [sp, #20]
 800edda:	e7c3      	b.n	800ed64 <_svfiprintf_r+0x130>
 800eddc:	4604      	mov	r4, r0
 800edde:	2301      	movs	r3, #1
 800ede0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ede4:	e7f0      	b.n	800edc8 <_svfiprintf_r+0x194>
 800ede6:	ab03      	add	r3, sp, #12
 800ede8:	9300      	str	r3, [sp, #0]
 800edea:	462a      	mov	r2, r5
 800edec:	4638      	mov	r0, r7
 800edee:	4b0f      	ldr	r3, [pc, #60]	; (800ee2c <_svfiprintf_r+0x1f8>)
 800edf0:	a904      	add	r1, sp, #16
 800edf2:	f3af 8000 	nop.w
 800edf6:	1c42      	adds	r2, r0, #1
 800edf8:	4606      	mov	r6, r0
 800edfa:	d1d6      	bne.n	800edaa <_svfiprintf_r+0x176>
 800edfc:	89ab      	ldrh	r3, [r5, #12]
 800edfe:	065b      	lsls	r3, r3, #25
 800ee00:	f53f af2c 	bmi.w	800ec5c <_svfiprintf_r+0x28>
 800ee04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee06:	b01d      	add	sp, #116	; 0x74
 800ee08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0c:	ab03      	add	r3, sp, #12
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	462a      	mov	r2, r5
 800ee12:	4638      	mov	r0, r7
 800ee14:	4b05      	ldr	r3, [pc, #20]	; (800ee2c <_svfiprintf_r+0x1f8>)
 800ee16:	a904      	add	r1, sp, #16
 800ee18:	f7ff f9d2 	bl	800e1c0 <_printf_i>
 800ee1c:	e7eb      	b.n	800edf6 <_svfiprintf_r+0x1c2>
 800ee1e:	bf00      	nop
 800ee20:	0800f848 	.word	0x0800f848
 800ee24:	0800f852 	.word	0x0800f852
 800ee28:	00000000 	.word	0x00000000
 800ee2c:	0800eb7d 	.word	0x0800eb7d
 800ee30:	0800f84e 	.word	0x0800f84e

0800ee34 <_raise_r>:
 800ee34:	291f      	cmp	r1, #31
 800ee36:	b538      	push	{r3, r4, r5, lr}
 800ee38:	4604      	mov	r4, r0
 800ee3a:	460d      	mov	r5, r1
 800ee3c:	d904      	bls.n	800ee48 <_raise_r+0x14>
 800ee3e:	2316      	movs	r3, #22
 800ee40:	6003      	str	r3, [r0, #0]
 800ee42:	f04f 30ff 	mov.w	r0, #4294967295
 800ee46:	bd38      	pop	{r3, r4, r5, pc}
 800ee48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee4a:	b112      	cbz	r2, 800ee52 <_raise_r+0x1e>
 800ee4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee50:	b94b      	cbnz	r3, 800ee66 <_raise_r+0x32>
 800ee52:	4620      	mov	r0, r4
 800ee54:	f000 f830 	bl	800eeb8 <_getpid_r>
 800ee58:	462a      	mov	r2, r5
 800ee5a:	4601      	mov	r1, r0
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee62:	f000 b817 	b.w	800ee94 <_kill_r>
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d00a      	beq.n	800ee80 <_raise_r+0x4c>
 800ee6a:	1c59      	adds	r1, r3, #1
 800ee6c:	d103      	bne.n	800ee76 <_raise_r+0x42>
 800ee6e:	2316      	movs	r3, #22
 800ee70:	6003      	str	r3, [r0, #0]
 800ee72:	2001      	movs	r0, #1
 800ee74:	e7e7      	b.n	800ee46 <_raise_r+0x12>
 800ee76:	2400      	movs	r4, #0
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee7e:	4798      	blx	r3
 800ee80:	2000      	movs	r0, #0
 800ee82:	e7e0      	b.n	800ee46 <_raise_r+0x12>

0800ee84 <raise>:
 800ee84:	4b02      	ldr	r3, [pc, #8]	; (800ee90 <raise+0xc>)
 800ee86:	4601      	mov	r1, r0
 800ee88:	6818      	ldr	r0, [r3, #0]
 800ee8a:	f7ff bfd3 	b.w	800ee34 <_raise_r>
 800ee8e:	bf00      	nop
 800ee90:	20000074 	.word	0x20000074

0800ee94 <_kill_r>:
 800ee94:	b538      	push	{r3, r4, r5, lr}
 800ee96:	2300      	movs	r3, #0
 800ee98:	4d06      	ldr	r5, [pc, #24]	; (800eeb4 <_kill_r+0x20>)
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	4608      	mov	r0, r1
 800ee9e:	4611      	mov	r1, r2
 800eea0:	602b      	str	r3, [r5, #0]
 800eea2:	f7f9 fc16 	bl	80086d2 <_kill>
 800eea6:	1c43      	adds	r3, r0, #1
 800eea8:	d102      	bne.n	800eeb0 <_kill_r+0x1c>
 800eeaa:	682b      	ldr	r3, [r5, #0]
 800eeac:	b103      	cbz	r3, 800eeb0 <_kill_r+0x1c>
 800eeae:	6023      	str	r3, [r4, #0]
 800eeb0:	bd38      	pop	{r3, r4, r5, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20000a60 	.word	0x20000a60

0800eeb8 <_getpid_r>:
 800eeb8:	f7f9 bc04 	b.w	80086c4 <_getpid>

0800eebc <__sread>:
 800eebc:	b510      	push	{r4, lr}
 800eebe:	460c      	mov	r4, r1
 800eec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec4:	f000 f89c 	bl	800f000 <_read_r>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	bfab      	itete	ge
 800eecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eece:	89a3      	ldrhlt	r3, [r4, #12]
 800eed0:	181b      	addge	r3, r3, r0
 800eed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eed6:	bfac      	ite	ge
 800eed8:	6563      	strge	r3, [r4, #84]	; 0x54
 800eeda:	81a3      	strhlt	r3, [r4, #12]
 800eedc:	bd10      	pop	{r4, pc}

0800eede <__swrite>:
 800eede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee2:	461f      	mov	r7, r3
 800eee4:	898b      	ldrh	r3, [r1, #12]
 800eee6:	4605      	mov	r5, r0
 800eee8:	05db      	lsls	r3, r3, #23
 800eeea:	460c      	mov	r4, r1
 800eeec:	4616      	mov	r6, r2
 800eeee:	d505      	bpl.n	800eefc <__swrite+0x1e>
 800eef0:	2302      	movs	r3, #2
 800eef2:	2200      	movs	r2, #0
 800eef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef8:	f000 f868 	bl	800efcc <_lseek_r>
 800eefc:	89a3      	ldrh	r3, [r4, #12]
 800eefe:	4632      	mov	r2, r6
 800ef00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef04:	81a3      	strh	r3, [r4, #12]
 800ef06:	4628      	mov	r0, r5
 800ef08:	463b      	mov	r3, r7
 800ef0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef12:	f000 b817 	b.w	800ef44 <_write_r>

0800ef16 <__sseek>:
 800ef16:	b510      	push	{r4, lr}
 800ef18:	460c      	mov	r4, r1
 800ef1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef1e:	f000 f855 	bl	800efcc <_lseek_r>
 800ef22:	1c43      	adds	r3, r0, #1
 800ef24:	89a3      	ldrh	r3, [r4, #12]
 800ef26:	bf15      	itete	ne
 800ef28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef32:	81a3      	strheq	r3, [r4, #12]
 800ef34:	bf18      	it	ne
 800ef36:	81a3      	strhne	r3, [r4, #12]
 800ef38:	bd10      	pop	{r4, pc}

0800ef3a <__sclose>:
 800ef3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef3e:	f000 b813 	b.w	800ef68 <_close_r>
	...

0800ef44 <_write_r>:
 800ef44:	b538      	push	{r3, r4, r5, lr}
 800ef46:	4604      	mov	r4, r0
 800ef48:	4608      	mov	r0, r1
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	4d05      	ldr	r5, [pc, #20]	; (800ef64 <_write_r+0x20>)
 800ef50:	602a      	str	r2, [r5, #0]
 800ef52:	461a      	mov	r2, r3
 800ef54:	f7f9 fbf4 	bl	8008740 <_write>
 800ef58:	1c43      	adds	r3, r0, #1
 800ef5a:	d102      	bne.n	800ef62 <_write_r+0x1e>
 800ef5c:	682b      	ldr	r3, [r5, #0]
 800ef5e:	b103      	cbz	r3, 800ef62 <_write_r+0x1e>
 800ef60:	6023      	str	r3, [r4, #0]
 800ef62:	bd38      	pop	{r3, r4, r5, pc}
 800ef64:	20000a60 	.word	0x20000a60

0800ef68 <_close_r>:
 800ef68:	b538      	push	{r3, r4, r5, lr}
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	4d05      	ldr	r5, [pc, #20]	; (800ef84 <_close_r+0x1c>)
 800ef6e:	4604      	mov	r4, r0
 800ef70:	4608      	mov	r0, r1
 800ef72:	602b      	str	r3, [r5, #0]
 800ef74:	f7f9 fc00 	bl	8008778 <_close>
 800ef78:	1c43      	adds	r3, r0, #1
 800ef7a:	d102      	bne.n	800ef82 <_close_r+0x1a>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	b103      	cbz	r3, 800ef82 <_close_r+0x1a>
 800ef80:	6023      	str	r3, [r4, #0]
 800ef82:	bd38      	pop	{r3, r4, r5, pc}
 800ef84:	20000a60 	.word	0x20000a60

0800ef88 <_fstat_r>:
 800ef88:	b538      	push	{r3, r4, r5, lr}
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	4d06      	ldr	r5, [pc, #24]	; (800efa8 <_fstat_r+0x20>)
 800ef8e:	4604      	mov	r4, r0
 800ef90:	4608      	mov	r0, r1
 800ef92:	4611      	mov	r1, r2
 800ef94:	602b      	str	r3, [r5, #0]
 800ef96:	f7f9 fbfa 	bl	800878e <_fstat>
 800ef9a:	1c43      	adds	r3, r0, #1
 800ef9c:	d102      	bne.n	800efa4 <_fstat_r+0x1c>
 800ef9e:	682b      	ldr	r3, [r5, #0]
 800efa0:	b103      	cbz	r3, 800efa4 <_fstat_r+0x1c>
 800efa2:	6023      	str	r3, [r4, #0]
 800efa4:	bd38      	pop	{r3, r4, r5, pc}
 800efa6:	bf00      	nop
 800efa8:	20000a60 	.word	0x20000a60

0800efac <_isatty_r>:
 800efac:	b538      	push	{r3, r4, r5, lr}
 800efae:	2300      	movs	r3, #0
 800efb0:	4d05      	ldr	r5, [pc, #20]	; (800efc8 <_isatty_r+0x1c>)
 800efb2:	4604      	mov	r4, r0
 800efb4:	4608      	mov	r0, r1
 800efb6:	602b      	str	r3, [r5, #0]
 800efb8:	f7f9 fbf8 	bl	80087ac <_isatty>
 800efbc:	1c43      	adds	r3, r0, #1
 800efbe:	d102      	bne.n	800efc6 <_isatty_r+0x1a>
 800efc0:	682b      	ldr	r3, [r5, #0]
 800efc2:	b103      	cbz	r3, 800efc6 <_isatty_r+0x1a>
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	bd38      	pop	{r3, r4, r5, pc}
 800efc8:	20000a60 	.word	0x20000a60

0800efcc <_lseek_r>:
 800efcc:	b538      	push	{r3, r4, r5, lr}
 800efce:	4604      	mov	r4, r0
 800efd0:	4608      	mov	r0, r1
 800efd2:	4611      	mov	r1, r2
 800efd4:	2200      	movs	r2, #0
 800efd6:	4d05      	ldr	r5, [pc, #20]	; (800efec <_lseek_r+0x20>)
 800efd8:	602a      	str	r2, [r5, #0]
 800efda:	461a      	mov	r2, r3
 800efdc:	f7f9 fbf0 	bl	80087c0 <_lseek>
 800efe0:	1c43      	adds	r3, r0, #1
 800efe2:	d102      	bne.n	800efea <_lseek_r+0x1e>
 800efe4:	682b      	ldr	r3, [r5, #0]
 800efe6:	b103      	cbz	r3, 800efea <_lseek_r+0x1e>
 800efe8:	6023      	str	r3, [r4, #0]
 800efea:	bd38      	pop	{r3, r4, r5, pc}
 800efec:	20000a60 	.word	0x20000a60

0800eff0 <_malloc_usable_size_r>:
 800eff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eff4:	1f18      	subs	r0, r3, #4
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	bfbc      	itt	lt
 800effa:	580b      	ldrlt	r3, [r1, r0]
 800effc:	18c0      	addlt	r0, r0, r3
 800effe:	4770      	bx	lr

0800f000 <_read_r>:
 800f000:	b538      	push	{r3, r4, r5, lr}
 800f002:	4604      	mov	r4, r0
 800f004:	4608      	mov	r0, r1
 800f006:	4611      	mov	r1, r2
 800f008:	2200      	movs	r2, #0
 800f00a:	4d05      	ldr	r5, [pc, #20]	; (800f020 <_read_r+0x20>)
 800f00c:	602a      	str	r2, [r5, #0]
 800f00e:	461a      	mov	r2, r3
 800f010:	f7f9 fb79 	bl	8008706 <_read>
 800f014:	1c43      	adds	r3, r0, #1
 800f016:	d102      	bne.n	800f01e <_read_r+0x1e>
 800f018:	682b      	ldr	r3, [r5, #0]
 800f01a:	b103      	cbz	r3, 800f01e <_read_r+0x1e>
 800f01c:	6023      	str	r3, [r4, #0]
 800f01e:	bd38      	pop	{r3, r4, r5, pc}
 800f020:	20000a60 	.word	0x20000a60

0800f024 <_init>:
 800f024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f026:	bf00      	nop
 800f028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f02a:	bc08      	pop	{r3}
 800f02c:	469e      	mov	lr, r3
 800f02e:	4770      	bx	lr

0800f030 <_fini>:
 800f030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f032:	bf00      	nop
 800f034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f036:	bc08      	pop	{r3}
 800f038:	469e      	mov	lr, r3
 800f03a:	4770      	bx	lr
